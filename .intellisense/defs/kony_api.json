{
    "!define": {
        "kony.forcetouch.getPinnedQuickActionItems.!ret": "[?]",
        "kony.forcetouch.getQuickActionItems.!ret": "[?]",
        "kony.forcetouch.getStaticQuickActionItems.!ret": "[?]",
        "kony.forcetouch.setQuickActionItems.!0": "[?]",
        "kony.image.createImage.!ret": {
            "compress": {
                "!doc": "Compresses an image by the specified compression ratio.\n@param {Number} compressionRatio A floating point value that specifies the amount of compression to use.",
                "!type": "fn(compressionRatio: number)"
            },
            "cropToRect": {
                "!doc": "This method crops the bitmap contained by the Image object to the size of the input rectangle.\n@param {Array} array An array of integers specifying the cropping rectangle in the order (x,y,width,height).",
                "!type": "fn(array: [?])"
            },
            "getImageAsRawBytes": {
                "!doc": "Retrieves the image as raw bytes.\n@param {Constant} encodingFormat A constant from the Image Format Constants in the kony.image namespace that specifies the format of the bitmap image.\n@return The Image object's bitmap in RawBytes format if an image format is specified. If not, this method returns the RawBytes data in a platform-specific formats.",
                "!type": "fn(encodingFormat: ?)"
            },
            "getImageHeight": {
                "!doc": "Retrieves the image height as an integer.\n@return An integer that specifies the height of the Image.",
                "!type": "fn()"
            },
            "getImageWidth": {
                "!doc": "Retrieves the image width as an integer.\n@return An integer that specifies the object of the Image.",
                "!type": "fn()"
            },
            "releaseImage": {
                "!doc": "Removes the internal image from the image object.",
                "!type": "fn()"
            },
            "rotate": {
                "!doc": " This method provides user with a provision to rotate an ImageObject. The rotated ImageObject can be reused by assigning to an ImageWidget.\n@param {Number} degree - Can be of any positive or negative number. Rotation will be done in clockwise for positive values and in anticlockwise for negative values.<b>Mandatory</b><br>\n@param {Boolean} cropImage - If value is true, then rotated image will be cropped at the edges otherwise it will not be cropped.<b>Optional</b><br>Applicable only in Windows.\n@Available iOS, Android and Windows\n@usage <pre>\nvar imageObject = kony.image.createImage(\"Image.png\");\nimageObject.rotate(45);</pre>",
                "!type": "fn(degree: number, cropImage: bool)"
            },
            "scale": {
                "!doc": "Scales the bitmap in the current Image object to a larger or smaller size.\n@param {Number} scaleFactor A floating point number that is used to scale the bitmap to a larger or smaller size.",
                "!type": "fn(scaleFactor: number)"
            },
            "writeToMediaGallery": {
                "!doc": " This api writes the image to media gallery.\n @param {Object} config - config is a optional argument which is a dictionary with configurable properties.\n @param {String} config.albumName - optional, An albumName is created has a subfolder under the Gallary app to save image to it.  Note: If this argument isn't specified, the image will be written to the public location.(iOS -  Camera Roll, Android - Pictures, Windows - Pictures).\n @throws Error if the value of the albumName key is not of the string type, throw the exception with errorcode as 100 with the message \"Invalid argument\".\n @param {String} config.imageName - Optional, The Image will be written to the media gallery with the given imagename without extension.  Note1:  Incase extension is provided, an exception will be thrown with the errorcode as 100 with the message \"Invalid argument\".  Note2:  In case of no image name specified, the sdk will take care of giving the image name to the image. This parameter will be applied for only Android and Windows platforms.\n @throws Error if the value of the imageName key is not of the string type, throw the exception with errorcode as 100 with the message \"Invalid argument\".\n @param {Boolean} config.overwrite - Optional, If true the existing image will be overridden else it doesn't override. by default it is false.  Note: This parameter will be applied for only Android and Windows platforms.  Note: if overwrite is set to false, and image with specified name already exists, then to the specified name timestamp will be appended and stored in the gallery. Note: if overwrite is set to true, and image with specified name already exists ,then the existing image will be overwritten with new image.\n @throws Error if the value of the overwrite key is not of the bool type, throw the exception with errorcode as 100 with the message \"Invalid argument\".\n@param {String} config.extensionType - Optional, The const value specifies the format  of the image that will be written to the media gallery. values: 1. kony.image.ENCODE_JPEG (default) 2. kony.image.ENCODE_PNG Note: availability on all the platforms\n @param {Function} config.onSuccess – Optional, This callback receives an argument, a string of the written image. Note: In case of  IOS, a local-device-specific unique identifier(910E7DBE-1DB0-455F-93B3-4500AA93042F/L0/001) is a string of the written image from the media gallery. This function has 'uniqueIdentifier' as argument. Note: availability on all the platforms.\n @param {Function} config.onFailure – Optional, This callback receives two arguments:  error code and errorMessage which is reason for the failure.\n @Available Available on iOS 8+, Android, Windows",
                "!type": "fn(config: ?)"
            }
        },
        "kony.image.createImage.!ret.cropToRect.!0": "[?]",
        "kony.image.findImageInGallery.!ret": {
            "getTempPath": "kony.types.RawBytes.getTempPath"
        },
        "kony.keychain.remove.!ret": "[?]",
        "kony.net.getCookies.!ret": "[?]",
        "kony.payment.getSupportedPaymentNetworks.!ret": "[?]",
        "kony.phone.getRemoveEventOptions.!ret": "[?]",
        "kony.theme.getAllThemes.!ret": "[?]",
        "kony.ui.Alert.!ret": "+kony.ui.Alert",
        "kony.ui.BarButtonItem.!ret": "+kony.ui.BarButtonItem",
        "kony.ui.BottomSheet.!ret": "+kony.ui.BottomSheet",
        "kony.ui.Box.!ret": "+kony.ui.Box",
        "kony.ui.Box.prototype.widgets.!ret": "[?]",
        "kony.ui.Browser.!ret": "+kony.ui.Browser",
        "kony.ui.Button.!ret": "+kony.ui.Button",
        "kony.ui.Calendar.!ret": "+kony.ui.Calendar",
        "kony.ui.Camera.!ret": "+kony.ui.Camera",
        "kony.ui.CheckBoxGroup.!ret": "+kony.ui.CheckBoxGroup",
        "kony.ui.ComboBox.!ret": "+kony.ui.ComboBox",
        "kony.ui.CordovaBrowser.!ret": "+kony.ui.CordovaBrowser",
        "kony.ui.DataGrid.!ret": "+kony.ui.DataGrid",
        "kony.ui.FlexContainer.!ret": "+kony.ui.FlexContainer",
        "kony.ui.FlexContainer.prototype.widgets.!ret": "[?]",
        "kony.ui.FlexScrollContainer.!ret": "+kony.ui.FlexScrollContainer",
        "kony.ui.FlexScrollContainer.prototype.widgets.!ret": "[?]",
        "kony.ui.Form.!ret": "+kony.ui.Form",
        "kony.ui.Form.prototype.setPreviewActionItems.!0": "[?]",
        "kony.ui.Form.prototype.widgets.!ret": "[?]",
        "kony.ui.Form2.!ret": "+kony.ui.Form2",
        "kony.ui.Form2.prototype.setPreviewActionItems.!0": "[?]",
        "kony.ui.Form2.prototype.widgets.!ret": "[?]",
        "kony.ui.HorizontalImageStrip.!ret": "+kony.ui.HorizontalImageStrip",
        "kony.ui.HorizontalImageStrip2.!ret": "+kony.ui.HorizontalImageStrip2",
        "kony.ui.Image.!ret": "+kony.ui.Image",
        "kony.ui.Image2.!ret": "+kony.ui.Image2",
        "kony.ui.ImageGallery.!ret": "+kony.ui.ImageGallery",
        "kony.ui.ImageGallery2.!ret": "+kony.ui.ImageGallery2",
        "kony.ui.Label.!ret": "+kony.ui.Label",
        "kony.ui.Line.!ret": "+kony.ui.Line",
        "kony.ui.Link.!ret": "+kony.ui.Link",
        "kony.ui.ListBox.!ret": "+kony.ui.ListBox",
        "kony.ui.Map.!ret": "+kony.ui.Map",
        "kony.ui.MenuContainer.!ret": "+kony.ui.MenuContainer",
        "kony.ui.NativeContainer.!ret": "+kony.ui.NativeContainer",
        "kony.ui.ObjectSelector3D.!ret": "+kony.ui.ObjectSelector3D",
        "kony.ui.Phone.!ret": "+kony.ui.Phone",
        "kony.ui.PickerView.!ret": "+kony.ui.PickerView",
        "kony.ui.Popup.!ret": "+kony.ui.Popup",
        "kony.ui.Popup.prototype.widgets.!ret": "[?]",
        "kony.ui.RadioButtonGroup.!ret": "+kony.ui.RadioButtonGroup",
        "kony.ui.RichText.!ret": "+kony.ui.RichText",
        "kony.ui.ScrollBox.!ret": "+kony.ui.ScrollBox",
        "kony.ui.SegmentedUI.!ret": "+kony.ui.SegmentedUI",
        "kony.ui.SegmentedUI2.!ret": "+kony.ui.SegmentedUI2",
        "kony.ui.Slider.!ret": "+kony.ui.Slider",
        "kony.ui.Switch.!ret": "+kony.ui.Switch",
        "kony.ui.TabPane.!ret": "+kony.ui.TabPane",
        "kony.ui.TextArea.!ret": "+kony.ui.TextArea",
        "kony.ui.TextArea2.!ret": "+kony.ui.TextArea2",
        "kony.ui.TextBox.!ret": "+kony.ui.TextBox",
        "kony.ui.TextBox2.!ret": "+kony.ui.TextBox2",
        "kony.ui.UserWidgetInstance.!ret": "+kony.ui.UserWidgetInstance",
        "kony.ui.Video.!ret": "+kony.ui.Video",
        "kony.ui.makeAffineTransform.!ret": {
            "rotate": {
                "!doc": "This method returns an affine transformation matrix constructed by rotating receivers affine transform. Angle is a number in degrees and always measured from x-axis as shown.\n@param angle {Number} A number represents the angle, in degrees, by which this matrix rotates the coordinate system axes.\n@returns Returns an affine transformation matrix constructed by rotating receivers affine transform.\n@Available iOS, Android/Android Tablet, Windows, SPA",
                "!type": "fn()"
            },
            "rotate3D": {
                "!doc": "This method rotates the widget by angle on the unit directional vector formed by rx, ry, and rz.\n@param angle {Number} Specify the angle, by which a widget to be rotated around rx, ry, and rz axises.\n@param rx {Number} Specify the x-axis value on which rotation to happen.\n@param ry {Number} Specify the y-axis value on which rotation to happen.\n@param rz {Number} Specify the z-axis value on which rotation to happen.\n@Available iOS, Android, SPA",
                "!type": "fn()"
            },
            "scale": {
                "!doc": "This method returns an affine transformation matrix constructed by scaling receivers affine transform. It is a JSObject with keys sx and sy and allow numbers only.\n@param sx {Number} The factor by which to scale the x-axis of the widget coordinate system.\n@param sy {Number} The factor by which to scale the y-axis of the widget coordinate system.\n@returns Returns an affine transformation matrix constructed by rotating receivers affine transform.\n@Available iOS, Android/Android Tablet, Windows, SPA",
                "!type": "fn()"
            },
            "scale3D": {
                "!doc": "Scales a widget in three dimensions (x, y, z) coordinate system.\n@param sx {Number} Specify the value to be scaled in the x direction.\n@param sy {Number} Specify the value to be scaled in the y direction.\n@param sz {Number} Specify the value to be scaled in the z direction.\n@Available iOS, Android, SPA",
                "!type": "fn()"
            },
            "setPerspective": {
                "!doc": "This method sets the perspective and sets the vanishing point at the center of the widget.\n@param distanceOfViewerToPlane {Number} The distance between the viewer and object. Always the value of this parameter should be greater than zero. Otherwise results an exception 100.\n@Available iOS, SPA",
                "!type": "fn()"
            },
            "translate": {
                "!doc": "This method returns an affine transformation matrix constructed by translating receivers affine transform. It is a JavaScript object with keys tx and ty and allow numbers in dp.\n@param tx {Number} The value by which to move the x-axis of the widget coordinate system.\n@param ty {Number} The factor by which to move the y-axis of the widget coordinate system.\n@returns Returns an affine transformation matrix constructed by rotating receivers affine transform.\n@Available iOS, Android/Android Tablet, Windows, SPA",
                "!type": "fn()"
            },
            "translate3D": {
                "!doc": "Translates the widget from present location to new location by x, y, z amount.\n@param tx {Number} Specify the value to be moved in the x direction from present location.\n@param ty {Number} Specify the value to be moved in the y direction from present location.\n@param tz {Number} Specify the value to be moved in the z direction from present location.\n@Available iOS, Android, SPA",
                "!type": "fn()"
            }
        }
    },
    "!name": "__kony_api__",
    "PREVIEW_ACTION_STYLE_DEFAULT": {
        "!doc": "Value of preview action style",
        "!type": "string"
    },
    "PREVIEW_ACTION_STYLE_DESTRUCTIVE": "string",
    "PREVIEW_ACTION_STYLE_SELECTED": "string",
    "PREVIEW_ACTION_TYPE_GROUP": "string",
    "PREVIEW_ACTION_TYPE_INDIVIDUAL": {
        "!doc": "Value of preview action type",
        "!type": "string"
    },
    "QUICK_ACTION_ICON_TYPE_ADD": "string",
    "QUICK_ACTION_ICON_TYPE_ALARM": "string",
    "QUICK_ACTION_ICON_TYPE_AUDIO": "string",
    "QUICK_ACTION_ICON_TYPE_BOOKMARK": "string",
    "QUICK_ACTION_ICON_TYPE_CAPTUREPHOTO": "string",
    "QUICK_ACTION_ICON_TYPE_CAPTUREVIDEO": "string",
    "QUICK_ACTION_ICON_TYPE_CLOUD": "string",
    "QUICK_ACTION_ICON_TYPE_COMPOSE": {
        "!doc": "@since 9.0",
        "!type": "string"
    },
    "QUICK_ACTION_ICON_TYPE_CONFIRMATION": "string",
    "QUICK_ACTION_ICON_TYPE_CONTACT": "string",
    "QUICK_ACTION_ICON_TYPE_DATE": "string",
    "QUICK_ACTION_ICON_TYPE_FAVORITE": "string",
    "QUICK_ACTION_ICON_TYPE_HOME": "string",
    "QUICK_ACTION_ICON_TYPE_INVITATION": "string",
    "QUICK_ACTION_ICON_TYPE_LOCATION": "string",
    "QUICK_ACTION_ICON_TYPE_LOVE": "string",
    "QUICK_ACTION_ICON_TYPE_MAIL": "string",
    "QUICK_ACTION_ICON_TYPE_MARKLOCATION": "string",
    "QUICK_ACTION_ICON_TYPE_MESSAGE": "string",
    "QUICK_ACTION_ICON_TYPE_PAUSE": "string",
    "QUICK_ACTION_ICON_TYPE_PLAY": "string",
    "QUICK_ACTION_ICON_TYPE_PROHIBIT": {
        "!doc": "@since 9.1",
        "!type": "string"
    },
    "QUICK_ACTION_ICON_TYPE_SEARCH": "string",
    "QUICK_ACTION_ICON_TYPE_SHARE": "string",
    "QUICK_ACTION_ICON_TYPE_SHUFFLE": "string",
    "QUICK_ACTION_ICON_TYPE_TASK": "string",
    "QUICK_ACTION_ICON_TYPE_TASKCOMPLETED": "string",
    "QUICK_ACTION_ICON_TYPE_TIME": "string",
    "QUICK_ACTION_ICON_TYPE_UPDATE": "string",
    "close": {
        "!doc": "Worker thread can be terminated from inner scope of the worker by invoking close(). The worker thread is killed immediately without an opportunity to complete its operations or clean up.\nThe tasks pending in the message queue and callbacks registered for network, timer APIs etc are discarded without wait until completion.\n    @Available Available only on iOS.\n    @access Write\n    @usage  <pre>\n//worker init\n\n//post a message to parent\nself.postMessage(“Hello from Worker”);\n\n//do some work\n\n//terminate this worker from inner scope\nself.close();\n</pre>",
        "!type": "fn()"
    },
    "constants": {
        "!doc": "KONY CONSTANTS",
        "ALERT_TYPE_CONFIRMATION": {
            "!doc": "ALERT CONSTANTS",
            "!type": "string"
        },
        "ALERT_TYPE_ERROR": "string",
        "ALERT_TYPE_INFO": "string",
        "APPLICATION_LAUNCH_MODE_DEEPLINK": "number",
        "APPLICATION_LAUNCH_MODE_NORMAL": "number",
        "APPLICATION_LAUNCH_MODE_PUSHNOTIFICATION": "number",
        "APPLICATION_MODE_HYBRID": "number",
        "APPLICATION_MODE_NATIVE": {
            "!doc": "APP MODE",
            "!type": "number"
        },
        "APPLICATION_MODE_WRAPPER": "number",
        "APPMENU_SHOWASFLAG_MENUITEM_SHOW_AS_ACTION_ALWAYS": "number",
        "APPMENU_SHOWASFLAG_MENUITEM_SHOW_AS_ACTION_ALWAYS_WITH_TEXT": "number",
        "APPMENU_SHOWASFLAG_MENUITEM_SHOW_AS_ACTION_IF_ROOM": "number",
        "APPMENU_SHOWASFLAG_MENUITEM_SHOW_AS_ACTION_IF_ROOM_WITH_TEXT": "number",
        "APPMENU_SHOWASFLAG_MENUITEM_SHOW_AS_ACTION_NEVER": "number",
        "BAR_BUTTON_CUSTOM": "number",
        "BAR_BUTTON_IMAGE": "number",
        "BAR_BUTTON_LEGACY": "number",
        "BAR_BUTTON_SYSTEM_ITEM": "number",
        "BAR_BUTTON_TITLE": "number",
        "BAR_ITEM_STYLE_DONE": "number",
        "BAR_ITEM_STYLE_PLAIN": "number",
        "BAR_METRICS_COMPACT": "number",
        "BAR_METRICS_COMPACT_PROMPT": "number",
        "BAR_METRICS_DEFAULT": "number",
        "BAR_METRICS_PROMPT": "number",
        "BAR_STYLE_BLACK": "number",
        "BAR_STYLE_DEAFULT": "number",
        "BOTTOM_SHEET_PEEK_HEIGHT_AUTO": {
            "!doc": "BottomSheet Constant",
            "!type": "number"
        },
        "BOTTOM_SHEET_STATE_COLLAPSED": {
            "!doc": "BottomSheet Constant",
            "!type": "number"
        },
        "BOTTOM_SHEET_STATE_EXPANDED": {
            "!doc": "BottomSheet Constant",
            "!type": "number"
        },
        "BOX_LAYOUT_ALIGN_FROM_CENTER": "number",
        "BOX_LAYOUT_ALIGN_FROM_LEFT": "number",
        "BOX_LAYOUT_ALIGN_FROM_RIGHT": "number",
        "BOX_LAYOUT_FREE": "number",
        "BOX_LAYOUT_HORIZONTAL": {
            "!doc": "BOX CONSTANTS",
            "!type": "number"
        },
        "BOX_LAYOUT_VERTICAL": "number",
        "BOX_POSITION_AS_FOOTER": "number",
        "BOX_POSITION_AS_HEADER": "number",
        "BOX_POSITION_AS_NORMAL": "number",
        "BOX_POSITION_AS_SCREENLEVEL_SEG_FOOTER": "number",
        "BOX_POSITION_AS_SCREENLEVEL_SEG_HEADER": "number",
        "BROWSER_REQUEST_METHOD_GET": "string",
        "BROWSER_REQUEST_METHOD_POST": "string",
        "BROWSER_TYPE_UIWEBVIEW": {
            "!doc": "Constant for browserType property of Browser widget",
            "!type": "number"
        },
        "BROWSER_TYPE_WKWEBVIEW": {
            "!doc": "Constant for browserType property of Browser widget",
            "!type": "number"
        },
        "CALENDAREVENT_REMOVE_THIS": {
            "!doc": "Constants for type of recurrence of calendar events that can be set during kony.phone.addCalendarEvent",
            "!type": "number"
        },
        "CALENDAREVENT_REMOVE_THIS_AND_FUTRUE": "number",
        "CALENDAREVENT_REPEAT_DAILY": "number",
        "CALENDAREVENT_REPEAT_MONTHLY": "number",
        "CALENDAREVENT_REPEAT_NONE": {
            "!doc": "Constants for removeOption given to kony.phone.removeCalendarEvent.",
            "!type": "number"
        },
        "CALENDAREVENT_REPEAT_WEEKLY": "number",
        "CALENDAREVENT_REPEAT_YEARLY": "number",
        "CALENDAR_DATE_FORMAT_DEFAULT": "string",
        "CALENDAR_VIEW_TYPE_DEFAULT": {
            "!doc": "CALENDER VIEW TYPES",
            "!type": "string"
        },
        "CALENDAR_VIEW_TYPE_GRID_ONSCREEN": "string",
        "CALENDAR_VIEW_TYPE_GRID_POPUP": "string",
        "CALENDAR_VIEW_TYPE_METRO": "string",
        "CALENDAR_VIEW_TYPE_WHEEL_ONSCREEN": "string",
        "CALENDAR_VIEW_TYPE_WHEEL_POPUP": "string",
        "CALENDAR_WHEEL_BOTH_DATETIME": "number",
        "CALENDAR_WHEEL_ONLY_DATE": {
            "!doc": "Calendar iOS specific constants",
            "!type": "number"
        },
        "CALENDAR_WHEEL_ONLY_TIME": "number",
        "CAMERA_ACCESS_MODE_INMEMORY": "string",
        "CAMERA_ACCESS_MODE_PRIVATE": "string",
        "CAMERA_ACCESS_MODE_PUBLIC": "string",
        "CAMERA_CAPTURE_MODE_PHOTO": {
            "!doc": "Camera Capture Modes",
            "!type": "string"
        },
        "CAMERA_CAPTURE_MODE_VIDEO": "string",
        "CAMERA_CAPTURE_ORIENTATION_DEFAULT": {
            "!doc": "Constants for captureOrientation",
            "!type": "number"
        },
        "CAMERA_CAPTURE_ORIENTATION_LANDSCAPE": "number",
        "CAMERA_CAPTURE_ORIENTATION_PORTRAIT": "number",
        "CAMERA_IMAGE_FORMAT_JPEG": "number",
        "CAMERA_IMAGE_FORMAT_PNG": {
            "!doc": "Constants for imageFormat",
            "!type": "number"
        },
        "CAMERA_SOURCE_DEFAULT": {
            "!doc": "Camera Source",
            "!type": "string"
        },
        "CAMERA_SOURCE_FRONT": "string",
        "CAMERA_SOURCE_REAR": "string",
        "CAMERA_VIDEO_FORMAT_MOV": "string",
        "CAMERA_VIDEO_FORMAT_MP4": {
            "!doc": "Camera Video format",
            "!type": "string"
        },
        "CHECKBOX_ITEM_ORIENTATION_HORIZONTAL": "string",
        "CHECKBOX_ITEM_ORIENTATION_VERTICAL": {
            "!doc": "CHECKBOX CONSTANTS",
            "!type": "string"
        },
        "CHECKBOX_VIEW_TYPE_LISTVIEW": "number",
        "CHECKBOX_VIEW_TYPE_ONOFFSWITCH": "number",
        "CHECKBOX_VIEW_TYPE_ONSCREENWHEEL": "number",
        "CHECKBOX_VIEW_TYPE_TABLEVIEW": "number",
        "CHECKBOX_VIEW_TYPE_TOGGLEVIEW": "number",
        "COMBOBOX_TOGGLE_VIEW_STYLE_BAR": "number",
        "COMBOBOX_TOGGLE_VIEW_STYLE_BORDERED": "number",
        "COMBOBOX_TOGGLE_VIEW_STYLE_PLAIN": {
            "!doc": "COMBOBOX viewStyle",
            "!type": "number"
        },
        "COMBOBOX_VIEW_TYPE_EDIT": "number",
        "COMBOBOX_VIEW_TYPE_EDITVIEW": "string",
        "COMBOBOX_VIEW_TYPE_LISTVIEW": {
            "!doc": "COMBOBOX CONSTANTS",
            "!type": "number"
        },
        "COMBOBOX_VIEW_TYPE_ONSCREENWHEEL": "number",
        "COMBOBOX_VIEW_TYPE_TABLEVIEW": "number",
        "COMBOBOX_VIEW_TYPE_TOGGLEVIEW": "number",
        "CONTAINER_HEIGHT_BY_DEVICE_REFERENCE": "number",
        "CONTAINER_HEIGHT_BY_FORM_REFERENCE": {
            "!doc": "TEXTBOX2 CONSTANT",
            "!type": "number"
        },
        "CONTAINER_HEIGHT_BY_PARENT_WIDTH": "number",
        "CONTAINER_LAYOUT_BOX": {
            "!doc": "CONTAINER LAYOUT TYPES",
            "!type": "number"
        },
        "CONTAINER_LAYOUT_GRID": "number",
        "CONTENT_ALIGN_BOTTOM_CENTER": "number",
        "CONTENT_ALIGN_BOTTOM_LEFT": "number",
        "CONTENT_ALIGN_BOTTOM_RIGHT": "number",
        "CONTENT_ALIGN_CENTER": "number",
        "CONTENT_ALIGN_MIDDLE_LEFT": "number",
        "CONTENT_ALIGN_MIDDLE_RIGHT": "number",
        "CONTENT_ALIGN_TOP_CENTER": "number",
        "CONTENT_ALIGN_TOP_LEFT": {
            "!doc": "CONTENT ALIGNMENT",
            "!type": "number"
        },
        "CONTENT_ALIGN_TOP_RIGHT": "number",
        "DATAGRID_COLUMN_TYPE_IMAGE": "string",
        "DATAGRID_COLUMN_TYPE_TEMPLATE": "string",
        "DATAGRID_COLUMN_TYPE_TEXT": "string",
        "DATAGRID_SCROLLBAR_NONE": "number",
        "DATAGRID_SCROLLBAR_VERTICAL": "number",
        "DEVICE_ORIENTATION_LANDSCAPE": "number",
        "DEVICE_ORIENTATION_PORTRAIT": {
            "!doc": "DEVICE ORIENTATION",
            "!type": "number"
        },
        "FLEX_DEFAULT_UNIT_DP": "number",
        "FLEX_DEFAULT_UNIT_PERCENTAGE": "number",
        "FLEX_DEFAULT_UNIT_PX": {
            "!doc": "Default units for Flex Container properties",
            "!type": "number"
        },
        "FLEX_LAYOUT_TYPE_FLOW_HORIZONTAL": "number",
        "FLEX_LAYOUT_TYPE_FLOW_VERTICAL": "number",
        "FLEX_LAYOUT_TYPE_FREE_FORM": {
            "!doc": "Layout type for Flex Container",
            "!type": "number"
        },
        "FLEX_SCROLL_DIRECTION_BOTH": "number",
        "FLEX_SCROLL_DIRECTION_HORIZONTAL": {
            "!doc": "Scroll Direction for Flex Scroll Container",
            "!type": "number"
        },
        "FLEX_SCROLL_DIRECTION_NONE": "number",
        "FLEX_SCROLL_DIRECTION_VERTICAL": "number",
        "FORM_ADJUST_PAN": "number",
        "FORM_ADJUST_RESIZE": "number",
        "FORM_DEVICE_ORIENTATION_LANDSCAPE": "number",
        "FORM_DEVICE_ORIENTATION_PORTRAIT": "number",
        "FORM_DISPLAY_ORIENTATION_BOTH": "number",
        "FORM_DISPLAY_ORIENTATION_LANDSCAPE": "number",
        "FORM_DISPLAY_ORIENTATION_PORTRAIT": "number",
        "FORM_FORWARD_NAVIGATION": "number",
        "FORM_INPUTACCESSORYVIEW_CANCEL": "number",
        "FORM_INPUTACCESSORYVIEW_DEFAULT": {
            "!doc": "KONY viz platform CONSTANTS",
            "!type": "number"
        },
        "FORM_INPUTACCESSORYVIEW_NEXTPREV": "number",
        "FORM_INPUTACCESSORYVIEW_NONE": "number",
        "FORM_LAYOUT_HORIZONTAL": "number",
        "FORM_LAYOUT_TYPE_FLOW_VERTICAL": "number",
        "FORM_LAYOUT_TYPE_FREE_FORM": "number",
        "FORM_LAYOUT_TYPE_VBOX": "number",
        "FORM_LAYOUT_VERTICAL": "number",
        "FORM_MENU_POSITION_AFTER_APPMENU": "number",
        "FORM_MENU_POSITION_BEFORE_APPMENU": "number",
        "FORM_TYPE_DYNAMIC": "number",
        "FORM_TYPE_NATIVE": "number",
        "FORM_TYPE_STATIC": {
            "!doc": "FORM CONSTANTS",
            "!type": "number"
        },
        "HORIZONTAL_IMAGESTRIP_VIEW_TYPE_COVERFLOW": "string",
        "HORIZONTAL_IMAGESTRIP_VIEW_TYPE_COVERFLOW2": "string",
        "HORIZONTAL_IMAGESTRIP_VIEW_TYPE_CYLINDRICAL": "string",
        "HORIZONTAL_IMAGESTRIP_VIEW_TYPE_INVERTED_CYLINDRICAL": "string",
        "HORIZONTAL_IMAGESTRIP_VIEW_TYPE_INVERTED_ROTARY": "string",
        "HORIZONTAL_IMAGESTRIP_VIEW_TYPE_LINEAR": "string",
        "HORIZONTAL_IMAGESTRIP_VIEW_TYPE_PAGEVIEW": "string",
        "HORIZONTAL_IMAGESTRIP_VIEW_TYPE_ROTARY": "string",
        "HORIZONTAL_IMAGESTRIP_VIEW_TYPE_SLOTVIEW": "string",
        "HORIZONTAL_IMAGESTRIP_VIEW_TYPE_STACK": "string",
        "HORIZONTAL_IMAGESTRIP_VIEW_TYPE_STRIPVIEW": "string",
        "IMAGE0_SCALE_MODE_DEFAULT": "number",
        "IMAGE0_SCALE_MODE_MAINTAIN_ASPECT_RATIO": "number",
        "IMAGE0_SCALE_MODE_RETAIN_INITIAL_DIMENSION": "number",
        "IMAGE0_SCALE_MODE_SPA_DEFAULT": "string",
        "IMAGE0_SCALE_MODE_SPA_FIXED_SIZE": "string",
        "IMAGE0_SCALE_MODE_SPA_MAINTAIN_ASPECT_RATIO": "string",
        "IMAGE_GALLERY_VIEW_TYPE_DEFAULT": "string",
        "IMAGE_GALLERY_VIEW_TYPE_PAGEVIEW": "string",
        "IMAGE_GLOSSY_EFFECT_DEFAULT": "number",
        "IMAGE_GLOSSY_EFFECT_LINEAR": "number",
        "IMAGE_GLOSSY_EFFECT_RADIAL": "number",
        "IMAGE_SCALE_MODE_CROP": "number",
        "IMAGE_SCALE_MODE_FIT_TO_DIMENSIONS": {
            "!doc": "IMAGE CONSTANTS",
            "!type": "number"
        },
        "IMAGE_SCALE_MODE_MAINTAIN_ASPECT_RATIO": "number",
        "IMG_MODE_ASPECT_FILL": "string",
        "IMG_MODE_ASPECT_FIT": "string",
        "IMG_MODE_BOTTOM": "string",
        "IMG_MODE_BOTTOM_LEFT": "string",
        "IMG_MODE_BOTTOM_RIGHT": "string",
        "IMG_MODE_CENTER": "string",
        "IMG_MODE_LEFT": "string",
        "IMG_MODE_REDRAW": "string",
        "IMG_MODE_RIGHT": "string",
        "IMG_MODE_SCALE_TO_FILL": {
            "!doc": "BACKGROUND IMAGE MODE CONSTANTS",
            "!type": "string"
        },
        "IMG_MODE_TOP": "string",
        "IMG_MODE_TOP_LEFT": "string",
        "IMG_MODE_TOP_RIGHT": "string",
        "KONY_KEYCHAIN_ITEM_ACCESSIBLE_AFTER_FIRST_UNLOCK": {
            "!doc": "The data in the keychain item cannot be accessed after a restart until the device has been unlocked once by the user.",
            "!type": "string"
        },
        "KONY_KEYCHAIN_ITEM_ACCESSIBLE_AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY": {
            "!doc": "The data in the keychain item cannot be accessed after a restart until the device has been unlocked once by the user.",
            "!type": "string"
        },
        "KONY_KEYCHAIN_ITEM_ACCESSIBLE_ALWAYS": {
            "!doc": "The data in the key chain item can always be accessed regardless of whether a device is locked.",
            "!type": "string"
        },
        "KONY_KEYCHAIN_ITEM_ACCESSIBLE_ALWAYS_THIS_DEVICE_ONLY": {
            "!doc": "The data in the keychain item can always be accessed regardless of whether a specific device is locked.",
            "!type": "string"
        },
        "KONY_KEYCHAIN_ITEM_ACCESSIBLE_WHEN_PASSCODE_SET_THIS_DEVICE_ONLY": {
            "!doc": "The data in the keychain can only be accessed when the device is unlocked. This is only available if a passcode is set on the device.",
            "!type": "string"
        },
        "KONY_KEYCHAIN_ITEM_ACCESSIBLE_WHEN_UNLOCKED": {
            "!doc": "The data in the keychain item can be accessed when a device is unlocked by the user.",
            "!type": "string"
        },
        "KONY_KEYCHAIN_ITEM_ACCESSIBLE_WHEN_UNLOCKED_THIS_DEVICE_ONLY": {
            "!doc": "The data in the keychain item can be accessed only when a specific device is unlocked by the user",
            "!type": "string"
        },
        "LISTBOX_TOGGLE_VIEW_STYLE_BAR": "number",
        "LISTBOX_TOGGLE_VIEW_STYLE_BORDERED": "number",
        "LISTBOX_TOGGLE_VIEW_STYLE_PLAIN": "number",
        "LISTBOX_VIEW_TYPE_LISTVIEW": {
            "!doc": "LISTBOX CONSTANTS",
            "!type": "number"
        },
        "LISTBOX_VIEW_TYPE_ONSCREENWHEEL": "number",
        "LISTBOX_VIEW_TYPE_SPINNER": "number",
        "LISTBOX_VIEW_TYPE_TABLEVIEW": "number",
        "LISTBOX_VIEW_TYPE_TOGGLEVIEW": "number",
        "LOADING_SCREEN_POSITION_FULL_SCREEN": {
            "!doc": "Loading Screen CONSTANTS",
            "!type": "string"
        },
        "LOADING_SCREEN_POSITION_ONLY_CENTER": "string",
        "MAP_PIN_IMG_ANCHOR_BOTTOM_CENTER": "string",
        "MAP_PIN_IMG_ANCHOR_BOTTOM_LEFT": "string",
        "MAP_PIN_IMG_ANCHOR_BOTTOM_RIGHT": "string",
        "MAP_PIN_IMG_ANCHOR_CENTER": "string",
        "MAP_PIN_IMG_ANCHOR_MIDDLE_LEFT": "string",
        "MAP_PIN_IMG_ANCHOR_MIDDLE_RIGHT": "string",
        "MAP_PIN_IMG_ANCHOR_TOP_CENTER": "string",
        "MAP_PIN_IMG_ANCHOR_TOP_LEFT": {
            "!doc": "Constants for anchor alignment",
            "!type": "string"
        },
        "MAP_PIN_IMG_ANCHOR_TOP_RIGHT": "string",
        "MAP_PIN_IMG_SRC_TYPE_FILE_PATH": "string",
        "MAP_PIN_IMG_SRC_TYPE_IMAGE": "string",
        "MAP_PIN_IMG_SRC_TYPE_NONE": {
            "!doc": "Constants for pin Image source",
            "!type": "string"
        },
        "MAP_PIN_IMG_SRC_TYPE_RESOURCES": "string",
        "MAP_PROVIDER_GOOGLE": {
            "!doc": "Map CONSTANTS",
            "!type": "string"
        },
        "MAP_SOURCE_NATIVE": "string",
        "MAP_SOURCE_NON_NATIVE": "string",
        "MAP_SOURCE_STATIC": "string",
        "MAP_VIEW_MODE_HYBRID": "number",
        "MAP_VIEW_MODE_NORMAL": "number",
        "MAP_VIEW_MODE_POLYGON": "number",
        "MAP_VIEW_MODE_SATELLITE": "number",
        "MAP_VIEW_MODE_TERRAIN": "number",
        "MAP_VIEW_MODE_TRAFFIC": "number",
        "MAP_VIEW_SHOW_CURRENT_LOCATION_AS_CIRCLE": "string",
        "MAP_VIEW_SHOW_CURRENT_LOCATION_AS_PIN": "string",
        "MAP_VIEW_SHOW_CURRENT_LOCATION_NONE": "string",
        "MENUCONTAINER_POSITION_AS_HORIZONTAL": "string",
        "MENUCONTAINER_POSITION_AS_VERTICAL": "string",
        "MENU_CONTAINER_VIEW_TYPE_CONTEXTVIEW": "number",
        "MENU_CONTAINER_VIEW_TYPE_DROPDOWNVIEW": {
            "!doc": "MENU CONSTANTS",
            "!type": "number"
        },
        "MENU_CONTAINER_VIEW_TYPE_DROPLINEVIEW": "number",
        "MENU_CONTAINER_VIEW_TYPE_TREEVIEW": "number",
        "PASTE_BOARD_TYPE_APP_LEVEL_NON_PERSISTENT": "number",
        "PASTE_BOARD_TYPE_APP_LEVEL_PERSISTENT": "number",
        "PASTE_BOARD_TYPE_DEFAULT": {
            "!doc": "PASTEBOARD TYPES FOR LABEl",
            "!type": "number"
        },
        "PASTE_BOARD_TYPE_NONE": "number",
        "PASTE_BOARD_TYPE_SYSTEM_LEVEL": "number",
        "PICKER_VIEW_TYPE_FLAT": {
            "!doc": "Background style constants for PickerView",
            "!type": "number"
        },
        "PICKER_VIEW_TYPE_WHEEL": "number",
        "POPUP_ADJUST_PAN": "number",
        "POPUP_ADJUST_RESIZE": "number",
        "POPUP_LAYOUT_TYPE_FLOW_VERTICAL": "number",
        "POPUP_LAYOUT_TYPE_FREE_FORM": "number",
        "POPUP_LAYOUT_TYPE_VBOX": "number",
        "POPUP_TYPE_KONY_STYLE": "string",
        "POPUP_TYPE_NATIVE": {
            "!doc": "Popup CONSTANTS",
            "!type": "number"
        },
        "POPUP_TYPE_NATIVE_STYLE": "string",
        "POPUP_TYPE_SPA": "number",
        "POPUP_TYPE_TC": "number",
        "POPUP_VIEW_TYPE_DEFAULT": "string",
        "POPUP_VIEW_TYPE_FIXEDHEIGHT": "string",
        "PROGRESS_INDICATOR_COLOR_GREY": "string",
        "PROGRESS_INDICATOR_COLOR_WHITE": "string",
        "PX_MASTERS_NODEINDEX": "number",
        "RADIOGROUP_ITEM_ORIENTATION_HORIZONTAL": "string",
        "RADIOGROUP_ITEM_ORIENTATION_VERTICAL": {
            "!doc": "RADIOGROUP CONSTANTS",
            "!type": "string"
        },
        "RADIOGROUP_TOGGLE_VIEW_STYLE_BAR": "number",
        "RADIOGROUP_TOGGLE_VIEW_STYLE_BORDERED": "number",
        "RADIOGROUP_TOGGLE_VIEW_STYLE_PLAIN": "number",
        "RADIOGROUP_VIEW_TYPE_LISTVIEW": "number",
        "RADIOGROUP_VIEW_TYPE_ONSCREENWHEEL": "number",
        "RADIOGROUP_VIEW_TYPE_TABLEVIEW": "number",
        "RADIOGROUP_VIEW_TYPE_TOGGLEVIEW": "number",
        "SCROLLBOX_HEIGHT_BY_FORM_REFERENCE": {
            "!doc": "SCROLLBOX CONSTANT",
            "!type": "number"
        },
        "SCROLLBOX_HEIGHT_BY_PARENT_WIDTH": "number",
        "SCROLLBOX_SCROLL_BOTH": "number",
        "SCROLLBOX_SCROLL_HORIZONTAL": "number",
        "SCROLLBOX_SCROLL_NONE": "number",
        "SCROLLBOX_SCROLL_VERTICAL": "number",
        "SEGUI_DEFAULT_BEHAVIOR": "string",
        "SEGUI_EDITING_STYLE_ICON": "string",
        "SEGUI_EDITING_STYLE_NONE": {
            "!doc": "Segment iOS specific constants",
            "!type": "string"
        },
        "SEGUI_EDITING_STYLE_SWIPE": "string",
        "SEGUI_HEIGHT_BY_FORM_REFERENCE": "number",
        "SEGUI_HEIGHT_BY_PARENT_WIDTH": "number",
        "SEGUI_MULTI_SELECT_BEHAVIOR": "string",
        "SEGUI_NONE": "string",
        "SEGUI_ROW_CLICK": "string",
        "SEGUI_ROW_SELECT": "string",
        "SEGUI_SEARCH_CRITERIA_CONTAINS": "number",
        "SEGUI_SEARCH_CRITERIA_ENDSWITH": "number",
        "SEGUI_SEARCH_CRITERIA_STARTSWITH": "number",
        "SEGUI_SINGLE_SELECT_BEHAVIOR": "string",
        "SEGUI_VIEW_TYPE_COVERFLOW": "string",
        "SEGUI_VIEW_TYPE_COVERFLOW2": "string",
        "SEGUI_VIEW_TYPE_CYLINDER": "string",
        "SEGUI_VIEW_TYPE_INVERTED_CYLINDER": "string",
        "SEGUI_VIEW_TYPE_INVERTED_ROTARY": "string",
        "SEGUI_VIEW_TYPE_LINEAR": "string",
        "SEGUI_VIEW_TYPE_PAGEVIEW": "string",
        "SEGUI_VIEW_TYPE_ROTATORY": "string",
        "SEGUI_VIEW_TYPE_STACK": "string",
        "SEGUI_VIEW_TYPE_TABLEVIEW": {
            "!doc": "SegmentedUI CONSTANTS",
            "!type": "string"
        },
        "SLIDER_HORIZONTAL_ORIENTATION": "string",
        "SLIDER_VERTICAL_ORIENTATION": "string",
        "SLIDER_VIEW_TYPE_DEFAULT": "string",
        "SLIDER_VIEW_TYPE_PROGRESS": "string",
        "STATUS_BAR_STYLE_DEFAULT": "string",
        "STATUS_BAR_STYLE_LIGHT_CONTENT": "string",
        "SYSTEM_ITEM_ACTION": "number",
        "SYSTEM_ITEM_ADD": "number",
        "SYSTEM_ITEM_BOOKMARKS": "number",
        "SYSTEM_ITEM_CAMERA": "number",
        "SYSTEM_ITEM_CANCEL": "number",
        "SYSTEM_ITEM_COMPOSE": "number",
        "SYSTEM_ITEM_DONE": "number",
        "SYSTEM_ITEM_EDIT": "number",
        "SYSTEM_ITEM_FAST_FORWARD": "number",
        "SYSTEM_ITEM_FIXED_SPACE": "number",
        "SYSTEM_ITEM_FLEXIBLE_SPACE": "number",
        "SYSTEM_ITEM_ORGANIZE": "number",
        "SYSTEM_ITEM_PAGE_CURL": "number",
        "SYSTEM_ITEM_PAUSE": "number",
        "SYSTEM_ITEM_PLAY": "number",
        "SYSTEM_ITEM_REDO": "number",
        "SYSTEM_ITEM_REFRESH": "number",
        "SYSTEM_ITEM_REPLY": "number",
        "SYSTEM_ITEM_REWIND": "number",
        "SYSTEM_ITEM_SAVE": "number",
        "SYSTEM_ITEM_SEARCH": "number",
        "SYSTEM_ITEM_STOP": "number",
        "SYSTEM_ITEM_TRASH": "number",
        "SYSTEM_ITEM_UNDO": "number",
        "TABPANE_COLLAPSIBLE_IMAGE_POSITION_LEFT": "string",
        "TABPANE_COLLAPSIBLE_IMAGE_POSITION_RIGHT": "string",
        "TABPANE_COLLAPSIBLE_TABNAME_ALIGNMENT_CENTER": "string",
        "TABPANE_COLLAPSIBLE_TABNAME_ALIGNMENT_LEFT": "string",
        "TABPANE_COLLAPSIBLE_TABNAME_ALIGNMENT_RIGHT": "string",
        "TABPANE_VIEW_TYPE_COLLAPSIBLEVIEW": "string",
        "TABPANE_VIEW_TYPE_PAGEVIEW": "string",
        "TABPANE_VIEW_TYPE_PANORAMAVIEW": "string",
        "TABPANE_VIEW_TYPE_TABVIEW": "string",
        "TAB_HEADER_POSITION_BOTTOM": "string",
        "TAB_HEADER_POSITION_LEFT": "string",
        "TAB_HEADER_POSITION_RIGHT": "string",
        "TAB_HEADER_POSITION_TOP": "string",
        "TAB_LAYOUT_DIRECTION_BOTTOM": "number",
        "TAB_LAYOUT_DIRECTION_CENTER": "number",
        "TAB_LAYOUT_DIRECTION_TOP": "number",
        "TAB_WIDGET_DIRECTION_BOTTOM": "number",
        "TAB_WIDGET_DIRECTION_CENTER": "number",
        "TAB_WIDGET_DIRECTION_TOP": "number",
        "TEXTAREA0_KEY_BOARD_STYLE_ADDRESS": "string",
        "TEXTAREA0_KEY_BOARD_STYLE_CHAT": "string",
        "TEXTAREA0_KEY_BOARD_STYLE_DEFAULT": "string",
        "TEXTAREA0_KEY_BOARD_STYLE_DIGITS": "string",
        "TEXTAREA0_KEY_BOARD_STYLE_EMAIL": "string",
        "TEXTAREA0_KEY_BOARD_STYLE_FORMULA": "string",
        "TEXTAREA0_KEY_BOARD_STYLE_PHONE_PAD": "string",
        "TEXTAREA0_KEY_BOARD_STYLE_SEARCH": "string",
        "TEXTAREA0_KEY_BOARD_STYLE_TELEPHONE": "string",
        "TEXTAREA0_KEY_BOARD_STYLE_URL": "string",
        "TEXTAREA_AUTO_CAPITALIZE_ALL": "string",
        "TEXTAREA_AUTO_CAPITALIZE_NONE": "string",
        "TEXTAREA_AUTO_CAPITALIZE_SENTENCES": "string",
        "TEXTAREA_AUTO_CAPITALIZE_WORDS": "string",
        "TEXTAREA_INPUT_MODE_ANY": {
            "!doc": "TEXTAREA CONSTANTS",
            "!type": "string"
        },
        "TEXTAREA_INPUT_MODE_NUMERIC": "string",
        "TEXTAREA_KEYBOARD_LABEL_CALL": "number",
        "TEXTAREA_KEYBOARD_LABEL_DONE": "number",
        "TEXTAREA_KEYBOARD_LABEL_GO": "number",
        "TEXTAREA_KEYBOARD_LABEL_GOOGLE": "number",
        "TEXTAREA_KEYBOARD_LABEL_JOIN": "number",
        "TEXTAREA_KEYBOARD_LABEL_NEXT": "number",
        "TEXTAREA_KEYBOARD_LABEL_ROUTE": "number",
        "TEXTAREA_KEYBOARD_LABEL_SEARCH": "number",
        "TEXTAREA_KEYBOARD_LABEL_SEND": "number",
        "TEXTAREA_KEYBOARD_LABEL_YAHOO": "number",
        "TEXTAREA_KEY_BOARD_STYLE_CHAT": "string",
        "TEXTAREA_KEY_BOARD_STYLE_DECIMAL": "string",
        "TEXTAREA_KEY_BOARD_STYLE_DEFAULT": "string",
        "TEXTAREA_KEY_BOARD_STYLE_EMAIL": "string",
        "TEXTAREA_KEY_BOARD_STYLE_NUMBER_PAD": "string",
        "TEXTAREA_KEY_BOARD_STYLE_PHONE_PAD": "string",
        "TEXTAREA_KEY_BOARD_STYLE_SIGNED_DECIMAL_NUMBER": "string",
        "TEXTAREA_KEY_BOARD_STYLE_SIGNED_NUMBER": "string",
        "TEXTAREA_KEY_BOARD_STYLE_URL": "string",
        "TEXTAREA_PASTE_BOARD_TYPE_APP_LEVEL_NON_PERSISTENT": "number",
        "TEXTAREA_PASTE_BOARD_TYPE_APP_LEVEL_PERSISTENT": "number",
        "TEXTAREA_PASTE_BOARD_TYPE_DEFAULT": "number",
        "TEXTAREA_PASTE_BOARD_TYPE_NO_PASTE_BOARD": "number",
        "TEXTAREA_PASTE_BOARD_TYPE_SYSTEM_LEVEL": "number",
        "TEXTBOX0_FILTER_MODE_CONTAINS": "number",
        "TEXTBOX0_FILTER_MODE_CONTAINS_CASE_SENSITIVE": "number",
        "TEXTBOX0_FILTER_MODE_CONTAINS_ORDINAL": "number",
        "TEXTBOX0_FILTER_MODE_CONTAINS_ORDINAL_CASE_SENSITIVE": "number",
        "TEXTBOX0_FILTER_MODE_EQUALS": "number",
        "TEXTBOX0_FILTER_MODE_EQUALS_CASE_SENSITIVE": "number",
        "TEXTBOX0_FILTER_MODE_EQUALS_ORDINAL": "number",
        "TEXTBOX0_FILTER_MODE_EQUALS_ORDINAL_CASE_SENSITIVE": "number",
        "TEXTBOX0_FILTER_MODE_NONE": "number",
        "TEXTBOX0_FILTER_MODE_STARTS_WITH": "number",
        "TEXTBOX0_FILTER_MODE_STARTS_WITH_CASE_SENSITIVE": "number",
        "TEXTBOX0_FILTER_MODE_STARTS_WITH_ORDINAL": "number",
        "TEXTBOX0_FILTER_MODE_STARTS_WITH_ORDINAL_CASE_SENSITIVE": "number",
        "TEXTBOX0_KEY_BOARD_STYLE_ALPHABET": "string",
        "TEXTBOX0_KEY_BOARD_STYLE_DEFAULT": "string",
        "TEXTBOX0_KEY_BOARD_STYLE_DIGIT": "string",
        "TEXTBOX0_KEY_BOARD_STYLE_EMAIL": "string",
        "TEXTBOX0_KEY_BOARD_STYLE_NUMBER": "string",
        "TEXTBOX0_KEY_BOARD_STYLE_NUMBER_PUNCTUATION": "string",
        "TEXTBOX0_KEY_BOARD_STYLE_PHONE_PAD": "string",
        "TEXTBOX0_KEY_BOARD_STYLE_SEARCH": "string",
        "TEXTBOX0_KEY_BOARD_STYLE_URL": "string",
        "TEXTBOX0_NEEDSNPION_FORM": "string",
        "TEXTBOX0_NEEDSNPION_NONE": "string",
        "TEXTBOX_AUTO_CAPITALIZE_ALL": "string",
        "TEXTBOX_AUTO_CAPITALIZE_NONE": "string",
        "TEXTBOX_AUTO_CAPITALIZE_SENTENCES": "string",
        "TEXTBOX_AUTO_CAPITALIZE_WORDS": "string",
        "TEXTBOX_CUSTOM_HEIGHT": "number",
        "TEXTBOX_DEFAULT_PLATFORM_HEIGHT": "number",
        "TEXTBOX_FONT_METRICS_DRIVEN_HEIGHT": "number",
        "TEXTBOX_INPUT_MODE_ANY": {
            "!doc": "TEXTBOX CONSTANTS",
            "!type": "string"
        },
        "TEXTBOX_INPUT_MODE_NUMERIC": "string",
        "TEXTBOX_INPUT_MODE_PASSWORD": "string",
        "TEXTBOX_KEYBOARD_LABEL_CALL": "number",
        "TEXTBOX_KEYBOARD_LABEL_DEFAULT": "number",
        "TEXTBOX_KEYBOARD_LABEL_DONE": "number",
        "TEXTBOX_KEYBOARD_LABEL_GO": "number",
        "TEXTBOX_KEYBOARD_LABEL_GOOGLE": "number",
        "TEXTBOX_KEYBOARD_LABEL_JOIN": "number",
        "TEXTBOX_KEYBOARD_LABEL_NEXT": "number",
        "TEXTBOX_KEYBOARD_LABEL_PREVIOUS": "number",
        "TEXTBOX_KEYBOARD_LABEL_RETURN": "number",
        "TEXTBOX_KEYBOARD_LABEL_ROUTE": "number",
        "TEXTBOX_KEYBOARD_LABEL_SEARCH": "number",
        "TEXTBOX_KEYBOARD_LABEL_SEND": "number",
        "TEXTBOX_KEYBOARD_LABEL_YAHOO": "number",
        "TEXTBOX_KEY_BOARD_STYLE_CHAT": "string",
        "TEXTBOX_KEY_BOARD_STYLE_DECIMAL": "string",
        "TEXTBOX_KEY_BOARD_STYLE_DECIMAL_NUMBER": "string",
        "TEXTBOX_KEY_BOARD_STYLE_DEFAULT": "string",
        "TEXTBOX_KEY_BOARD_STYLE_EMAIL": "string",
        "TEXTBOX_KEY_BOARD_STYLE_NUMBER_PAD": "string",
        "TEXTBOX_KEY_BOARD_STYLE_PHONE_PAD": "string",
        "TEXTBOX_KEY_BOARD_STYLE_SIGNED_DECIMAL_NUMBER": "string",
        "TEXTBOX_KEY_BOARD_STYLE_SIGNED_NUMBER": "string",
        "TEXTBOX_KEY_BOARD_STYLE_URL": "string",
        "TEXTBOX_KEY_BOARD_STYLE_VISIBLE_PASSWORD": "string",
        "TEXTBOX_PASTE_BOARD_TYPE_APP_LEVEL_NON_PERSISTENT": "number",
        "TEXTBOX_PASTE_BOARD_TYPE_APP_LEVEL_PERSISTENT": "number",
        "TEXTBOX_PASTE_BOARD_TYPE_DEFAULT": "number",
        "TEXTBOX_PASTE_BOARD_TYPE_NO_PASTE_BOARD": "number",
        "TEXTBOX_PASTE_BOARD_TYPE_SYSTEM_LEVEL": "number",
        "TEXTBOX_VIEW_TYPE_DEFAULT": "string",
        "TEXTBOX_VIEW_TYPE_SEARCH_VIEW": "string",
        "TEXTSTYLE_STRIKETHROUGH_STYLE_BY_WORD": "string",
        "TEXTSTYLE_STRIKETHROUGH_STYLE_DOUBLE": "string",
        "TEXTSTYLE_STRIKETHROUGH_STYLE_PATTERN_DASH": "string",
        "TEXTSTYLE_STRIKETHROUGH_STYLE_PATTERN_DASHDOT": "string",
        "TEXTSTYLE_STRIKETHROUGH_STYLE_PATTERN_DASHDOTDOT": "string",
        "TEXTSTYLE_STRIKETHROUGH_STYLE_PATTERN_DOT": "string",
        "TEXTSTYLE_STRIKETHROUGH_STYLE_THICK": {
            "!doc": "SkrikeThroughStyle constants for label widget",
            "!type": "string"
        },
        "TEXT_ALIGN_CENTER": "string",
        "TEXT_ALIGN_JUSTIFIED": "string",
        "TEXT_ALIGN_LEFT": "string",
        "TEXT_ALIGN_NONE": {
            "!doc": "WATCH TEXT ALIGNMENT",
            "!type": "string"
        },
        "TEXT_ALIGN_RIGHT": "string",
        "TEXT_TRUNCATE_END": "number",
        "TEXT_TRUNCATE_MIDDLE": "number",
        "TEXT_TRUNCATE_NONE": {
            "!doc": "Label Text Truncate Position",
            "!type": "number"
        },
        "TEXT_TRUNCATE_START": "number",
        "TIMER_FORMAT_ABBREVIATED": "string",
        "TIMER_FORMAT_FULL": "string",
        "TIMER_FORMAT_POSITIONAL": {
            "!doc": "Timer Format",
            "!type": "string"
        },
        "TIMER_FORMAT_SHORT": "string",
        "TIMER_FORMAT_SPELLED_OUT": "string",
        "TIMER_UNITS_DAY": "string",
        "TIMER_UNITS_HOUR": "string",
        "TIMER_UNITS_MINUTE": "string",
        "TIMER_UNITS_MONTH": "string",
        "TIMER_UNITS_SECOND": "string",
        "TIMER_UNITS_WEEK": "string",
        "TIMER_UNITS_YEAR": {
            "!doc": "Timer units",
            "!type": "string"
        },
        "WEBWIDGET_RECEIVE_TYPE_HTTP_AUTH": {
            "!doc": "Android Only",
            "!type": "number"
        },
        "WIDGET_ALIGN_BOTTOM_CENTER": "number",
        "WIDGET_ALIGN_BOTTOM_LEFT": "number",
        "WIDGET_ALIGN_BOTTOM_RIGHT": "number",
        "WIDGET_ALIGN_CENTER": "number",
        "WIDGET_ALIGN_MIDDLE_LEFT": "number",
        "WIDGET_ALIGN_MIDDLE_RIGHT": "number",
        "WIDGET_ALIGN_TOP_CENTER": "number",
        "WIDGET_ALIGN_TOP_LEFT": {
            "!doc": "WIDGET ALIGNMENT",
            "!type": "number"
        },
        "WIDGET_ALIGN_TOP_RIGHT": "number",
        "WIDGET_TEXT_CHAR_WRAP": "number",
        "WIDGET_TEXT_WORD_WRAP": "number"
    },
    "importScripts": {
        "!doc": "This API is used to import external scripts and their scope by providing the JavaScript file name to import. This method takes one or more JavaScript file names to import.\nThis API is only available in worker thread scope and not in the main parent thread scope.\n    @param JSFileNames {Object}One or more comma separated list of JavaScript file names.<b>Mandatory</b>\n    @Available Available only on iOS.\n    @access Write\n    @usage  <pre>\nimportScripts(“Utility.js”); // loads Util.js\n\n\nimportScripts(“Utility1.js”, “Utility2.js”, “Utility3.js”); </pre>",
        "!type": "fn(JSFileNames: ?)"
    },
    "java": {
        "!doc": "This API allows you to create a new class in JavaScript. Using this API you can extend or implement any Android native or java class or interface.\n@param native_class_name {String} Specifies the native class name including the package name.<b>Mandatory</b>\n@returns Returns the class that is created.\n@Available Applicable on Android Platform\n@class java\n@returns {java}",
        "import": {
            "!doc": "This API allows you to import any Android native class into JavaScript.\n@param native_class_name {String} Specifies the native class name including the package name.<b>Mandatory</b>\n@returns Returns the class that is created.\n@Available Applicable on Android Platform\n@usage\n    <pre>\n      var Thread = java.import('java.lang.Thread');\n    </pre>",
            "!type": "fn(native_class_name: ?)"
        },
        "newClass": {
            "!doc": "This API allows you to extend or implement any Android native, Java class, or interface.\n@param base_class_name {String} Specifies the new Javascript class name.\n@param native_class_name {String} Specifies the native class name including the package name.<b>Mandatory</b>\n@param Interface_name {Array} Specifies the interface name that is implemented by the new class.\n@param Interface_methods_to_override {Object} Specifies the interface methods that must be overridden or implemented by the new class.\n@returns Returns the class that is created.\n@Available Applicable on Android Platform\n@usage <pre>\n  var c = java.newClass('MyRunnable', 'java.lang.Object', [ 'java.lang.Runnable' ], {\n    run: function () {\n          print('hello from thread');\n    }\n });\n  </pre>",
            "!type": "fn(base_class_name: ?, native_class_name: ?, Interface_name: ?, Interface_methods_to_override: ?)"
        },
        "newInstance": {
            "!doc": "This API java.newInstance can be used to instantiate a Java class by passing the instance name as its first argument and the arguments to the constructor method enclosed in a JavaScript array as the second argument.\n @param native_class_name {String} Specifies the native class name including the package name.<b>Mandatory</b>\n @returns Returns the instance of native class that is created.\n @Available Applicable on Android Platform\n @usage\n    <pre>\n      var alist = java.newInstance('java.util.ArrayList', [10]);\n    </pre>",
            "!type": "fn(native_class_name: ?, args: ?)"
        }
    },
    "kony": {
        "!doc": "kony API's.\n@class kony\n@returns {kony}",
        "SystemColorType": {
            "Accent": "number",
            "AccentDark1": "number",
            "AccentDark2": "number",
            "AccentDark3": "number",
            "AccentLight1": "number",
            "AccentLight2": "number",
            "AccentLight3": "number",
            "Background": "number",
            "Complement": "number",
            "Foreground": "number"
        },
        "accelerometer": {
            "!doc": "Accelerometer API's",
            "registerAccelerationEvents": {
                "!doc": "This API allows you to register for the acceleration events such as 'shake'. This event is triggered only at the end of the shake event indicating that device motion has occurred. The precision with which a shake event can be recognized may vary per platform and depends on the device capability. This is an asynchronous API.\n        @param events{Object} Specifies a table with the type of events. <b>Mandatory</b>\n        @Available iPhone, Android/Android Tablet, BlackBerry, Mango, iPad.\n        @Usage <pre>//Defining shake function\n\nfunction onshake()\n{\n    kony.print(\"Shake called\");\n\n}\n\nfunction registerAccelerationEvents()\n{\n    //register acceleration events\n\n    //Defining the event object\n\n    var events = {shake:onshake};\n\n\n    //Registering Shake event\n\n    kony.accelerometer.registerAccelerationEvents(events);\n\n} </pre>",
                "!type": "fn(events: ?)"
            },
            "retrieveCurrentAcceleration": {
                "!doc": "This API allows you to retrieve the current device acceleration. The specified callback functions are invoked asynchronously and this API returns the value immediately without waiting for actual retrieval of the device acceleration data. This is an asynchronous API.\n        @param onSuccessCallback{Function} Specifies the callback function that must be executed when retrieving the current device acceleration is successful.<b>Mandatory</b>\n        @param onFailureCallback{Function} Specifies the callback function that must be executed when the API call fails in retrieving the current device location. This callback function does not have any input parameters. You can define the logic that must be executed in this function.<b>Mandatory</b>\n        @Available iPhone, Android/Android Tablet, BlackBerry, Mango, iPad.\n        @Usage <pre> //retrieve current acceleration request\n\n// onsuccesscallback\n\n// This method accepts an 'accelerometerdata' object, which contains the current device acceleration values\n\nfunction onsuccesscallback(accelerometerdata)\n{\n\n    kony.print(\"X: \" + accelerometerdata.x +\"Y: \" + accelerometerdata.y +\"Z: \" + accelerometerdata.z +\"Timestamp: \" + accelerometerdata.timestamp );\n\n}\n\n// onfailurecallback\n\nfunction onfailurecallback(error)\n{\n    kony.print(\"code: \" + error.code +\"message: \" + error.message);\n\n}\n\nfunction retrieveCurrentAcceleration()\n{\n    // Current acceleration request.\n\n    kony.accelerometer.retrieveCurrentAcceleration (onsuccesscallback, onfailurecallback);\n\n}</pre>",
                "!type": "fn(onSuccessCallback: ?, onFailureCallback: ?)"
            },
            "startMonitoringAcceleration": {
                "!doc": "This API allows you to start monitoring the device acceleration or motion. When there is a change in the device acceleration values when the device moves, the callback functions are invoked. The callback functions are invoked asynchronously and this API returns immediately without waiting for the device initialization for accelerometer. This is an asynchronous API.\n        @param onSuccessCallback{Function} Specifies the callback function that must be executed when monitoring the device acceleration is successful.<b>Mandatory</b>\n        @param onFailureCallback{Function} Specifies the callback function that must be executed when the API call fails. This callback function does not have any input parameters.<b>Mandatory</b>\n        @param configData{Object} Specifies the configuration parameters for the monitoring operation.<b>Mandatory</b>\n        @Available iPhone, Android/Android Tablet, BlackBerry, Mango, iPad.\n        @Usage <pre>//Start monitoring request\n\n// onsuccesscallback\n\n// This method accepts an 'accelerometerdata' object, which containsthe current device acceleration values\n\n\nfunction onsuccesscallback(accelerometerdata)\n{\n    kony.print(\"X: \" +accelerometerdata.x +\"Y: \" +accelerometerdata.y +\"Z: \" +accelerometerdata.z +\"Timestamp: \" +accelerometerdata.timestamp );\n\n}\n\n\n//onfailure callback\n\nfunction onfailurecallback(error)\n{\n    kony.print(\"code: \" + error.code +\"message: \" + error.message);\n\n}\n\n\n\nfunction startMonitoringAcceleration()\n{\n    // Start monitor acceleration request.\n\n    kony.accelerometer.startMonitoringAcceleration(onsuccesscallback, onfailurecallback,{frequency:10, onchange:false});\n\n}\n\n        </pre>",
                "!type": "fn(onSuccessCallback: ?, onFailureCallback: ?, configData: ?)"
            },
            "stopMonitoringAcceleration": {
                "!doc": "This API allows you to stop the device monitoring activity if it is active. You can start monitoring the device motion using accelerometer.startmonitoringacceleration API.\n        @Available iPhone, Android/Android Tablet, BlackBerry, Mango, iPad\n        @Usage <pre>function stopMonitoringAcceleration()\n{\n    //stop the device monitoring activity if it is active\n    kony.accelerometer.stopMonitoringAcceleration();\n}\n        </pre>",
                "!type": "fn()"
            },
            "unregisterAccelerationEvents": {
                "!doc": "This API allows you to de-register for the specified acceleration event types. This is an asynchronous API.\n        @param eventTypes{Array} Specifies a table that lists the type of events for which you want to unregister.<b>Mandatory</b>\n        @Available iPhone, Android/Android Tablet, BlackBerry, Mango, iPad.\n        @Usage <pre>function unregisteraccelerationevents()\n{\n    //stop acceleration request\n\n    kony.accelerometer.unregisteraccelerationevents({\"shake\"});\n\n}</pre>",
                "!type": "fn(eventTypes: ?)"
            }
        },
        "anim": {
            "ANIMATION_EFFECT_AUTOMATIC": "string",
            "ANIMATION_EFFECT_BOTTOM": "string",
            "ANIMATION_EFFECT_FADE": "string",
            "ANIMATION_EFFECT_LEFT": "string",
            "ANIMATION_EFFECT_MIDDLE": "string",
            "ANIMATION_EFFECT_NONE": "string",
            "ANIMATION_EFFECT_TOP": "string",
            "DIRECTION_ALTERNATE": "string",
            "DIRECTION_ALTERNATE_REVERSE": "string",
            "DIRECTION_NONE": "string",
            "DIRECTION_REVERSE": "string",
            "EASE": "string",
            "EASE_IN": "string",
            "EASE_IN_OUT": "string",
            "EASE_OUT": "string",
            "FILL_MODE_BACKWARDS": "string",
            "FILL_MODE_BOTH": "string",
            "FILL_MODE_FORWARDS": "string",
            "FILL_MODE_NONE": "string",
            "LINEAR": "string"
        },
        "application": {
            "!doc": "Application Event API's",
            "addAppMenuItemAt": {
                "!doc": "This API adds an App Menu item at the given index.\n@param appmenuid{String} Appmenu Identifier<b>Mandatory</b>\n@param index{Number}.The index at which the menu item must be added. The index value lies between 0 and n-1.<b>Mandatory</b>\n@param appmenu{Array}<b>Mandatory</b>\n@Available All Platforms\n@access Write\n@usage <pre>\n//The below function is the callback function for onClickClosure event of app menu item with id \"appmenuitemid3\".</br>\n function onClickClosure3()</br>\n {</br>\n //proceed with the logic</br>\n }</br>\n\n//Defining app menu item</br>\nvar appMenuItem3 = [\"appmenuitemid3\",\"Rewards\",\"reward.png\",onClickClosure3];</br>\n\n//Adding the above app menu item at the index 3.</br>\nkony.application.addAppMenuItemAt(\"accountMenu\", 3,  appMenuItem3);</pre>",
                "!type": "fn(appmenuid: ?, index: ?, appmenu: ?)"
            },
            "addBMState": {
                "!doc": "This API adds a specified key and value to the parameter list of the URL of the form.\n    @param formID {String} Identifier of the form to be bookmarked. <b>Mandatory</b>\n    @param key {String} A JSON object comprising key value pairs. The key value pairs are user defined. You cannot specify this as a nested structure. i.e the value part cannot be another JSON object. <b>Mandatory</b>\n    @param value {String} Value string representing the RHS of the key-value combination. The value cannot be a nested structure.\n    @Available SPA and Desktop Web\n    @usage <pre>kony.application.addBMState (\"form1\", \"About\", \"page2\")\n</pre>",
                "!type": "fn(formID: ?, key: ?, value: ?)"
            },
            "addGestureRecognizer": {
                "!doc": "This API allows you to set a gesture recognizer for a specified gesture for a specified widget.\n    @param gestureType {Number}Indicates the type of gesture  to be detected on the widget. The following are possible values:\n1 – conatants.GESTURE_TYPE_TAP\n2 -  conatants.GESTURE_TYPE_SWIPE\n3 – conatants.GESTURE_TYPE_LONGPRESS\n4 – conatants.GESTURE_TYPE_PAN\n5 – conatants.GESTURE_TYPE_ROTATION\n6 - conatants.GESTURE_TYPE_PINCH\n7 - conatants.GESTURE_TYPE_RIGHTTAP\n\n\nNote: RIGHTTAP is applicable only to Windows 8.1 and Windows Desktop/Kiosk platforms.\nROTATION is not supported on Android. <b>Mandatory</b>\n    @param gestureConfigParams {object}Specifies a table that has the configuration parameters needed to setup a gesture recognizer. The configuration parameters vary based on the type of the gesture.\n\n\nThis parameter has the following key-value pairs:\nGesture Type:TAP\n\nfingers [Number] - specifies the maximum number of fingers that must be respected for a gesture. Possible values are: 1. Default value is 1.\ntaps [Number] - specifies the maximum number of taps that must be respected for a gesture. Possible values are: 1 or 2. Default value is 1.\n\n\n\n\nFor example,{fingers:1,taps:1}\n\n\nGesture Type:SWIPE\n\nfingers [Number] - specifies the maximum number of fingers that must be respected for a gesture. Possible values are: 1. Default value is 1.\n\nFor example, {fingers: 1}.\n\n\nGesture Type :LONGPRESS\n\npressDuration [Number] - specifies the minimum time interval (in seconds) after which the gesture is recognized as a LONGPRESS. This is not applicable to Windows. For example, if the pressDuration is 2 seconds, any continued press is recognized as LONGPRESS only if it lasts for at least 2 seconds. Default value is 1.\nFor example, {pressDuration=1}.\nLONGPRESS event is not supported in SPA (Windows Phone) platform.\n\n\n\nGesture Type :PAN\nfingers [number]  specifies the minimum number of fingers needed to recognize this gesture. Default value is 1.\ncontinuousEvents [Boolean]  indicates if callback should be called continuously for every change beginning from the time the gesture is recognized to the time it ends.\n\nGesture Type :ROTATION\nRotation gesture involves only two fingers.\ncontinuousEvents [Boolean]  indicates if callback must be called continuously for every change beginning from the time the gesture is recognized to the time it ends.\n\nGesture Type :PINCH\nPinch gesture invloves two fingures.\ncontinuousEvents [Boolean]  indicates if callback should be called continuously every change beginning from the time the gesture is recognized to the time it ends. <b>Mandatory</b>\n    @param onGestureClosure {function}Specifies the function that needs to be executed when a gesture is recognized. This function will be raised asynchronously and has the following signature:\nonGestureClosure(widgetRef, gestureInfo, context)\nwidgetRef - specifies the handle to the widget on which the gesture was recognized.\ngestureInfo - Table with  information about the gesture. The contents of this table vary based on the gesture type.\ncontext - Table with SegmentedUI row details.\n\ngestureInfo table has the following key-value pairs:\ngestureType [number] – indicates the gesture type; 1 for TAP, 2 for SWIPE, and 3 for LONGPRESS,4 for PAN, 5 for ROTATION, 6 for PINCH and 7 for RIGHTTAP\ngesturesetUpParams [object] – specifies the set up parameters passed while adding the gesture recognizer\ngesturePosition [number] – indicates the position where the gesture was recognized. Possible values are: 1 for TOPLEFT, 2 for TOPCENTER, 3 for TOPRIGHT, 4 for MIDDLELEFT, 5 for MIDDLECENTER, 6 for MIDDLERIGHT, 7 for BOTTOMLEFT, 8 for BOTTOMCENTER, 9 for BOTTOMRIGHT, 10 for CENTER\nswipeDirection [number] –indicates the direction of swipe. This parameter is applicable only if the gesture type is SWIPE. Possible values are: 1 for LEFT, 2 for RIGHT, 3 for TOP, 4 for BOTTOM. Direction is w.r.t the view and not device orientation.\ngestureX [number] – specifies the X coordinate of the point (in pixels) where the gesture has occurred. The coordinate is relative to the widget coordinate system.\ngestureY [number] – specifies the Y coordinate of the point (in pixels) where the gesture has occurred. The coordinate is relative to the widget coordinate system.\nwidgetWidth [number] – specifies the width of the widget (in pixels)\nwidgetHeight [number] – specifies the height of the widget (in pixels)\ngestureState[number] – indicates the gesture state as below\n1 – gesture state begin\n2 -  gesture state changed\n3 – gesture state ended.\ngestureState is applicable only for continuous gestures like PAN, ROTATION and PINCH.\n  rotation   [number] rotation of the gesture in degrees since its last change.( Applicable only when gesture type is ROTATION\nvelocityX and velocityY : horizontal  and vertical component of velocity expressed in points per second. (Applicable only for PAN gesture type)\nvelocity [number]: velocity of pinch in scale per second (Applicable for Pinch gesture)\nscale [number]:scale factor relative to the points of the two touches in screen coordinates\ntouchType[number]:(windows only)\n0 - constants.TOUCHTYPE_FINGER\n1 - constants.TOUCHTYPE_PEN\n2 - constants.TOUCHTYPE_MOUSE\ntranslationX and translationY [number] : cumulative distance as number. (Applicable only for PAN gesture type)\n\ncontext table has the following key-value pairs:\nrowIndex [number] : row index of the segui where gesture was recognised. (Applicable to gestures added to segUI rows)\nsectionIndex [number] : section index of the segui where gesture was recognised. (Applicable to gestures added to segUI rows)<b>Mandatory</b>\n    @Available Available on all platforms except Server Side Mobile Web, BlackBerry 10, Windows 7/Kiosk, and Desktop Web.\n    @access Write\n    @usage  <pre>It is not recommend to define gestures for widgets that have a default behaviour associated with it.\nScenario 1\nIf you click (tap) a button (any clickable widget), the default behaviour is to trigger an onClick event.\nIf you define a Tap gesture on such widgets, the gesture closure is executed in addition to the onClick event.\nScenario 2\nIf you swipe a larger form, the default behaviour is to scroll up and down depending on the direction in which you swipe.\nIf you define a SWIPE gesture on such forms, the gesture closure gets executed in addition to scrolling the form.\n\nScenario 3\nIf you swipe a Segmented UI with huge number of rows, the default behaviour is to scroll the Segmented UI.\nIf you define a SWIPE gesture on such segments, the gesture closure gets executed in addition to scrolling the form.\n\nRules and Restrictions\nGestures can be added only for the following widgets:\nForm\nHBox\nVBox\nScrollable Box\nFlex Container\nFlex Scroll Container. </pre>",
                "!type": "fn(gestureType: ?, gestureConfigParams: ?, onGestureClosure: ?)"
            },
            "addGestureRecognizerForAllForms": {
                "!doc": "This API allows the developers to set a gesture recognizer for the specified gesture of the specified widget.\n    @param gestureType{Number}Indicates the type of gesture that needs to be detected on the widget. The following are possible values:\n1 – conatants.GESTURE_TYPE_TAP\n2 -  conatants.GESTURE_TYPE_SWIPE\n3 – conatants.GESTURE_TYPE_LONGPRESS\n4 – conatants.GESTURE_TYPE_PAN\n5 – conatants.GESTURE_TYPE_ROTATION\n6 - conatants.GESTURE_TYPE_PINCH\n7 - conatants.GESTURE_TYPE_RIGHTTAP\n\n\nNote: RIGHTTAP is applicable only to Windows 8.1 and Windows Desktop/Kiosk platforms.\nROTATION is not supported on Android. <b>Mandatory</b>\n    @param gestureConfigParams{Object}Specifies a table that has the configuration parameters needed to setup a gesture recognizer. The configuration parameters vary based on the type of the gesture.\n\n\nThis parameter has the following key-value pairs:\nGesture Type:TAP\n\nfingers [Number] - specifies the maximum number of fingers that must be respected for a gesture. Possible values are: 1. Default value is 1.\ntaps [Number] - specifies the maximum number of taps that must be respected for a gesture. Possible values are: 1 or 2. Default value is 1.\n\n\n\n\nFor example,{fingers:1,taps:1}\n\n\nGesture Type:SWIPE\n\nfingers [Number] - specifies the maximum number of fingers that must be respected for a gesture. Possible values are: 1. Default value is 1.\n\nFor example, {fingers: 1}.\n\n\nGesture Type :LONGPRESS\n\npressDuration [Number] - specifies the minimum time interval (in seconds) after which the gesture is recognized as a LONGPRESS. This is not applicable to Windows. For example, if the pressDuration is 2 seconds, any continued press is recognized as LONGPRESS only if it lasts for at least 2 seconds. Default value is 1.\nFor example, {pressDuration=1}.\n\n\n\nGesture Type :PAN\nfingers [number]  specifies the minimum number of fingers needed to recognize this gesture. Default value is 1.\ncontinuousEvents [Boolean]  indicates if callback should be called continuously for every change beginning from the time the gesture is recognized to the time it ends.\n\nGesture Type :ROTATION\nRotation gesture involves only two fingers.\ncontinuousEvents [Boolean]  indicates if callback must be called continuously for every change beginning from the time the gesture is recognized to the time it ends.\n\nGesture Type :PINCH\nPinch gesture invloves two fingures.\ncontinuousEvents [Boolean]  indicates if callback should be called continuously every change beginning from the time the gesture is recognized to the time it ends. <b>Mandatory</b>\n    @param onGestureClosure{function }Specifies the function that needs to be executed when a gesture is recognized. This function will be raised asynchronously and has the following signature:\nonGestureClosure(widgetRef, gestureInfo, context)\nwidgetRef - specifies the handle to the widget on which the gesture was recognized.gestureInfo - Table with  information about the gesture. The contents of this table vary based on the gesture type.context - Table with SegmentedUI row details.\ngestureInfo table has the following key-value pairs:\ngestureType [number] – indicates the gesture type; 1 for TAP, 2 for SWIPE, and 3 for LONGPRESS,4 for PAN, 5 for ROTATION, 6 for PINCH and 7 for RIGHTTAPgesturesetUpParams [object] – specifies the set up parameters passed while adding the gesture recognizergesturePosition [number] – indicates the position where the gesture was recognized. Possible values are: 1 for TOPLEFT, 2 for TOPCENTER, 3 for TOPRIGHT, 4 for MIDDLELEFT, 5 for MIDDLECENTER, 6 for MIDDLERIGHT, 7 for BOTTOMLEFT, 8 for BOTTOMCENTER, 9 for BOTTOMRIGHT, 10 for CENTERswipeDirection [number] –indicates the direction of swipe. This parameter is applicable only if the gesture type is SWIPE. Possible values are: 1 for LEFT, 2 for RIGHT, 3 for TOP, 4 for BOTTOM. Direction is w.r.t the view and not device orientation.gestureX [number] – specifies the X coordinate of the point (in pixels) where the gesture has occurred. The coordinate is relative to the widget coordinate system.gestureY [number] – specifies the Y coordinate of the point (in pixels) where the gesture has occurred. The coordinate is relative to the widget coordinate system.widgetWidth [number] – specifies the width of the widget (in pixels)widgetHeight [number] – specifies the height of the widget (in pixels)gestureState[number] – indicates the gesture state as below1 – gesture state begin2 -  gesture state changed3 – gesture state ended.gestureState is applicable only for continuous gestures like PAN, ROTATION and PINCH.  rotation   [number] rotation of the gesture in degrees since its last change.( Applicable only when gesture type is ROTATIONvelocityX and velocityY : horizontal  and vertical component of velocity expressed in points per second. (Applicable only for PAN gesture type)velocity [number]: velocity of pinch in scale per second (Applicable for Pinch gesture)scale [number]:scale factor relative to the points of the two touches in screen coordinatestouchType[number]:(windows only)0 - constants.TOUCHTYPE_FINGER1 - constants.TOUCHTYPE_PEN2 - constants.TOUCHTYPE_MOUSEtranslationX and translationY [number] : cumulative distance as number. (Applicable only for PAN gesture type)\ncontext table has the following key-value pairs:\nrowIndex [number] : row index of the segui where gesture was recognised. (Applicable to gestures added to segUI rows)sectionIndex [number] : section index of the segui where gesture was recognised. (Applicable to gestures added to segUI rows)<b>Mandatory</b>\n    @Available Available on all platforms except Server Side Mobile Web, BlackBerry 10, Windows 7/Kiosk, and Desktop Web.\n    @access Write\n    @usage  <pre>//Defining a function\nfunction formGesture(widgetID,gestureInfo)\n{\n    var y = kony.type(gestureInfo); //expected value of y = table\n    var z = kony.type(gestureInfo.gesturesetUpParams); //expected values\n    of z = table\n    var a = gestureInfo.gestureType;\n    var b = gestureInfo.gesturesetUpParams;\n    var c = gestureInfo.gesturePosition;\n    var d = gestureInfo.gestureX;\n    var e = gestureInfo.gestureY;\n    var f = gestureInfo.widgetWidth;\n    var g = gestureInfo.widgetHeight;\n    kony.print(\"**********************\");\n    if(kony.os.toNumber(gestureInfo.gestureType) == 2)\n    {\n        h = gestureInfo.swipeDirection;\n        kony.print(\"swipe direction is: \"+h);\n    }\n    else{\n        h = \"\"\n    }\n    if(kony.os.toNumber(a) == 1)\n    {\n        b1 = \"fingers: \"+gestureInfo.gesturesetUpParams.fingers;\n        b2 = \"taps: \"+gestureInfo.gesturesetUpParams.taps;\n        kony.print(\"\"+b1+\"\"+b2);\n    }\n    else if(kony.os.toNumber(a) == 2)\n    {\n        b1 = \"fingers :\"+gestureInfo.gesturesetUpParams.fingers;\n        b2 = \"\";\n        kony.print(\"\"+b1+\"\"+b2);\n    }\n    else if(kony.os.toNumber(a) == 3)\n    {\n        b1 = \"pressduration:\"+gestureInfo.gesturesetUpParams\n        pressDuration;\n        b2 = \"\";\n        kony.print(\"\"+b1+\"\"+b2);\n    }\n\n    kony.print(\"widget id is: \"+widgetID[id]); //will print the widgetID.\n    To print widgetID use widgetID.id\n    kony.print(\"type of gestureInfo is: \"+y);\n    kony.print(\"type of gesturesetUpParams is: \"+z);\n    kony.print(\"gestureType is: \"+a); //gestureType=1 or 2 or 3\n    kony.print(\"gesturesetUpParams is: \"+b.fingers); //gesturesetUpParams\n= {fingers =1, taps =1} or {fingers =1, taps =2} or {fingers =1} or {pressDuration = 1}\n    kony.print(\"gesturePosition is: \"+c); //gesturePosition=1 or 2 or 3 or .....9\n    kony.print(\"gestureX is: \"+d); //ex: gestureX=30\n    kony.print(\"gestureY is: \"+e); //ex: gestureY=100\n    kony.print(\"widgetWidth is: \"+f); //ex: widgetWidth=320\n    kony.print(\"widgetHeight is: \"+g); //ex: widgetHeight=28\n    //gesturePosition, gestureX, gestureY, widgetWidth, widgetHeight\n    params are not applicable in android\n    kony.print(\"**********************\");\n}\nfunction callbackSingleTapGesture()\n{\n    var x ={fingers:1,taps:1};\n    try{\n        kony.application.setGestureRecognizerForAllForms(1, x,\n        formGesture);\n    }\n    catch(err){\n        alert(typeof err);\n        alert(\"error in function callbackSingleTapGesture:\n        \"+err.message);\n    }\n}</pre>",
                "!type": "fn(gestureType: ?, gestureConfigParams: ?, onGestureClosure: ?)"
            },
            "addSettingsMenuItemAt": {
                "!doc": "This API enables you to add a menu item at a given index in the Charm settings menu.\n    @param id {String} Identifier of the Charm setting menu created.<b>Mandatory</b>\n    @param index {Number} The index at which the menu item must be added. The index value lies between 0 and n-1. If the index is beyond the current length of the Charm menu items then the item is added to the end.\n    @param menuSettings {Object} The menuSettings hash table comprises the following key-value pairs:id: ID of the Charm menu item.text: Name of the menu item.onClick: onclick event to be executed for the menu item.<b>Mandatory</b>\n    @Available Windows 8\n    @usage <pre>//The below function is the callback function for onClickClosure event of app menu item with id \"appmenuitemid3\".\nfunction onClickClosure3()\n{\n    //proceed with the logic\n}\n\nvar settingsMenuItem1 = {id : \"about\", text : \"About\", onClick : onClickClosure3};\n\n//Adding the above app menu item at the index 3.\nkony.application.addSettingsMenuItemAt(\"accountMenu\", 3,  settingsMenuItem1);\n</pre>",
                "!type": "fn(id: ?, index: ?, menuSettings: ?)"
            },
            "beginBackgroundTask": {
                "!doc": "This API is used when you want to run a long running or the asynchronous task in the background of the phone app.\n    @param taskID {String} Specifies the unique identifier for the task. <b>Mandatory</b>\n    @param callback {function} Specifies the callback that gets executed in the background before iOS suspends the app. You can use this callback to save information or clean up resources before your app gets suspended.<b>Optional</b>\n    @Available iPhone and iPad\n    @usage <pre>function ExpirationHandlercallback(){\n//your logic to clear resources or save data.\n}\nfunction jsfunction(userInfo, replyObj)\n{\n    var taskID = kony.application.beginBackgroundTask(\"TaskName\", ExpirationHandlercallback);\n    //Long running task.\n    kony.application.endbackgroundTask(taskID);\n}</pre>",
                "!type": "fn(taskID: ?, callback: ?)"
            },
            "checkPermission": {
                "!doc": "Checks and returns the permission status of one or more resources.\n    @param resourceId {Constant} Specify the resource ID of the resource of which you want to check the status. <b>Mandatory</b>\n    @param options {JSObject} Specify the additional option to identify the exact resource of which you want to know the status. This is a platform-specific key. <b>Optional</b>\n    @returns status {Constant} Resource status constant which indicates the overall status of the resource authorization.\n\t@returns canRequestPermission {Boolean} Indicates whether you can request for the permissions or not in case the value of the status is PERMISSION_DENIED.\n\t@Available Android, iOS, Windows 10, SPA\n    @usage <pre>var options : {isAccessModeAlways:true};\nvar result = kony.application.checkPermission(kony.os.RESOURCE_LOCATION,options);\nif(result.status = kony.application.PERMISSION_DENIED) {\n    Kony.application.requestPermission();\n   }\nelse if(result.status = kony.application.PERMISSION_GRANTED ){\nkony.location.getCurrentPosition();\n   }</pre>",
                "!type": "fn(resourceId: ?, options: ?)"
            },
            "createAppMenu": {
                "!doc": "This API allows you to create App Menu dynamically through code.\n@param appmenuid{String}.Id of the menu item <b>Mandatory</b>\n@param appmenu{Array}<b>Mandatory</b>\n@param skinid{String}The normal skin to be set for the menu.<b>optional</b>\n@param onFocusSkinId{String}The focus skin to be set for the menu.<b>optional</b>\n@Available All Platforms\n@access Write\n@usage <pre>\n//The below two functions are callback functions for onClickClosure events for menu items.</br>\nfunction onClickClosure1()</br>\n{</br>\n//proceed with the logic</br>\n}</br>\nfunction onClickClosure2()</br>\n{</br>\n    //proceed with the logic</br>\n}</br>\n//Defining appmenu items (Atleast one item should be defined)</br>\nvar appMenuItem1 = [\"appmenuitemid1\",\"Accounts\", \"icon1.png\", onClickClosure1];</br>\nvar appMenuItem2 = [\"appmenuitemid2\", \"Payments\", \"icon2.png\", onClickClosure2];</br>\n\n//defining appMenu parameter with the above menu items</br>\nvar appMenu = [appMenuItem1, appMenuItem2];</br>\n\n//Creating App menu </br>\nkony.application.createAppMenu(\"myappmenu\", appMenu, \"skn1\", \"fcskn1\");</pre>",
                "!type": "fn(appmenuid: ?, appmenu: ?, skinid: ?, onFocusSkinId: ?)"
            },
            "createSettingsMenu": {
                "!doc": "This API enables you to create a Charm settings menu for an application.\n    @param id {String} Identifier of the Charm setting menu created.<b>Mandatory</b>\n    @param menuSettings {Object} The menuSettings hash table comprises the following key-value pairs:id: ID of the Charm menu item.text: Name of the menu item.<b>Mandatory</b>\n    @Available Windows 8\n    @usage <pre>function callbackMenuItem1(id, text, sitemcallback)\n{\n     //typically popup.show() should be called here\n     kony.print(id)\n     alert(id);\n}\n\nvar settingsMenuItem1 = {id : \"about\", text : \"About\", onClick : callbackMenuItem1};\nvar settingsMenuItem2 = {id : \"help\", text : \"Help\", onClick : callbackMenuItem1];\nvar settingsMenu = [settingsMenuItem1, settingsMenuItem2];\nkony.application.createSettingsMenu(\"mysettingsmenu\", settingsMenu);</pre>",
                "!type": "fn(id: ?, menuSettings: ?)"
            },
            "destroyForm": {
                "!doc": "This API allows the developer to destroy the form.\n@param friendlyName {String} <b>Mandatory</b>\n@returns {null}\n@Available iOS, Android, Windows, SPA\n@Usage <pre>\n kony.application.destroyForm (\"friendlyName\");\n</pre>",
                "!type": "fn(friendlyName: ?)"
            },
            "disableZoomedOutView": {
                "!doc": "This API enables you to disable a zoomed out view set for an application using the previous API.\n    @Available Windows 8\n    @usage <pre>//Disabling zoomout on an application\n\nfunction zoomout()\n{\n    kony.application.disableZoomedOutView();\n}\n</pre>",
                "!type": "fn()"
            },
            "dismissLoadingScreen": {
                "!doc": "This API provides you the ability to dismiss the loading screen displayed earlier. If there is no loading screen, this API has no affect.\n\n@Available iPad/iPhone, Android, BlackBerry, Windows Phone.\n@usage <pre>kony.application.dismissLoadingScreen();</pre>",
                "!type": "fn()"
            },
            "exit": {
                "!doc": "This API terminates the application.\n        @Available All Platforms\n        @usage <pre>function exit()\n{\n   try{\n         kony.application.exit();\n      }\n   catch(Error)\n      {\n         alert(\"Exception While getting exiting the application  : \"+Error);\n      }\n}</pre>",
                "!type": "fn()"
            },
            "getAppMenuBadgeValue": {
                "!doc": "This API enables you to read the badge value (if any) attached to the specified app menu item. If the specified app menu item does not have any badge value attached to it, the API returns an empty String.\n        @param appmenuID{String} If you are setting the badge for an app menu item that was created dynamically, use the same ID that was used to create the app menu item. If you are setting the badge for an app menu item that was created from the IDE, use the ID available in the generated script file.<b>Mandatory</b>\n        @param menuItemID{String} Identifier of the app menu item from which the badge value is to be read.<b>Mandatory</b>\n        @returns badgeValue{String} Returns the badge value applied to the specified app menu. If the specified app menu has no badge value attached to it, it returns an empty String.\n        @Available iPhone, iPad\n        @Usage <pre>function getAppMenuBadgeValue()\n{\n    //Get the AppMenuBadgeValue for the menu item with id ::\"appmenuitemid3\"\n    kony.application.getAppMenuBadgeValue(\"accountMenu\",\"appmenuitemid3\");\n}</pre>",
                "!type": "fn(appmenuID: ?, menuItemId: ?, badgeValue: ?)"
            },
            "getApplicationBadgeValue": {
                "!doc": "This API allows you to read the badge value (if any) attached to the given application icon. If the applications icon does not have any badge value attached to it, this API returns an empty String.\n        @returns badgeValue{String} Returns the badge value applied to the application icon If the application icon has no badge value attached to it, it returns null.\n        @Available iPhone, iPad\n        @Usage <pre>function getApplicationBadgeValue()\n{\n    //Get the ApplicationBadgeValue from the  application icon on the mobile desktop at the top-right corner of the application icon.\n    kony.application.getApplicationBadgeValue();\n}</pre>",
                "!type": "fn()"
            },
            "getApplicationBehavior": {
                "!doc": "This API enables you to get application behavior value by giving a key.\n@param key {String} This is a key which is set in application behaviors.\n@returns value {object} Current value of requested application behavior.\n@Available Available on all platforms except BlackBerry 10.\n@access Read\n@usage <pre>\nkony.application.getApplicationBehavior(key);\nvar returnVal = kony.application.getApplicationBehavior(\"retainSpaceonHide\");\n//returnVal outputs 'true'\n</pre>",
                "!type": "fn(Key: ?)"
            },
            "getApplicationMode": {
                "!doc": "This API allows you to get the application mode.\n@returns {Number} Application Mode set for an application<b>Mandatory</b>\n@Available All RichClient platforms\n@Usage  <pre>kony.application.getApplicationMode();</pre>",
                "!type": "fn() -> number"
            },
            "getBMState": {
                "!doc": "This API retrieves the list of parameters attached to a URL using the above add, set APIs.\n    @param formID {String} Identifier of the form for which the parameters of the URL have to be fetched. <b>Mandatory</b>\n    @Available SPA and Desktop Web\n    @usage <pre>kony.application.getBMState(\"form1\")\n</pre>",
                "!type": "fn(formID: ?)"
            },
            "getCurrentAppMenu": {
                "!doc": "This API returns the unique identifier of the current app menu that is set through setCurrentAppMenu.\n@Available All Platforms\n@access Write\n@usage <pre>\n//Get the Current app menu</br>\nvar currAppMenuId = kony.application.getCurrentAppMenu();</br>\n\n//Alert the Current app menu</br>\nalert(\"Current app menu id is:: \"+currAppMenuId);</pre>",
                "!type": "fn()"
            },
            "getCurrentBreakpoint": {
                "!doc": " This API returns the current breakpoint value.\n @returns {Number} Current breakpoint value.\n @Available DesktopWeb\n @access Read\n @usage <pre>\n  var breakpoint= kony.application.getCurrentBreakpoint();\n</pre>",
                "!type": "fn() -> number"
            },
            "getCurrentForm": {
                "!doc": "This API returns a handle to the current form. The form handle is useful when you are sending analytics to the analytic engine.\n        @returns currentForm{Object}\n        @Available Available on all platforms.\n        @Usage <pre>function getCurrentForm()\n{\n    //Get the current form\n    var currentForm = kony.application.getCurrentForm();\n    //Alert the current form\n    alert(\"currentForm is::\"+currentForm);\n}</pre>",
                "!type": "fn()"
            },
            "getCurrentSettingsMenu": {
                "!doc": "This method returns the unique identifier of the current  menu that is set through getCurrentSettingsMenu.\n    @Available Windows 8\n    @usage <pre>kony.application.getCurrentSettingsMenu ();\n\n//Alert the Current Charm Settings menu\nalert(\"Current charm menu id is:: \"+currCharmMenuId);</pre>",
                "!type": "fn()"
            },
            "getPreviousForm": {
                "!doc": "This API returns a handle to the previous form.\n        @returns previousForm{Object} API returns the previous form handle.\n        @Available Available on all platforms.\n        @Usage <pre>function getPreviousForm()\n{\n    //Get the Previous form\n    var previousForm = kony.application.getPreviousForm();\n    //Alert the Previous form\n    alert(\"previousForm is::\"+previousForm);\n}</pre>",
                "!type": "fn(previousForm: ?)"
            },
            "getSettingValue": {
                "!doc": "This API is used to retrieve current device setting.\n@param setting {String} Setting to be queried has to be passed.<b>Mandatory</b>\n@param args {Array} Array of constants to get setting attributes.<b>Optional</b>\n@returns {Object} Info of queried setting.\n@Available Android, Windows\n@usage <pre>\n    //Settings that can be retrieved for android: \"location\", \"device_locale\", \"time_zone\", \"time\", wifi\"\n    //Settings that can be retrieves for windows: \"font\", \"color\", \"advancedEffectsEnabled\", \"inputLanguage\"\n\n    //Android\n    var locationInfo = kony.application.getSettingValue('location');\n    //Windows\n    var args= [kony.SystemColorType.Background];\n    var colorInfo = kony.application.getSettingValue(\"color\", args);\n</pre>",
                "!type": "fn(setting: ?) -> ?"
            },
            "hideAppMenuItems": {
                "!doc": "@deprecated This method hides the App Menu items that you specify and shows the rest.\n@param Listofmenuids{Object}  Specifies the index number 0<= index <=n-1; where n is the number of App Menu items. <b>Mandatory</b>\n@Available All Platforms",
                "!type": "fn(Listofmenuids: ?)"
            },
            "openApplicationSettings": {
                "!doc": "Opens the application-specific settings or device-level application settings.\n@param resourceId {Constant} Specify the resource ID of the resource that you want open its settings. The parameter works only for Windows 10. <b>Optional</b>\n@Available Android, iOS, Windows 10\n@usage <pre>Kony.application.openApplicationSettings(kony.os.RESOURCE_CONTACTS);</pre>",
                "!type": "fn(resourceId: ?)"
            },
            "openMediaURL": {
                "!doc": "This API launches the native media player and starts playing the media (audio or video) at the specified URL. The media server provides the appropriate media content depending upon the device (for example, Blackberry, iPhone, etc).\n        @param URL {String} Specifies the URL that points to the external web page.<b>Mandatory</b>\n        @Usage <pre>function openMediaURL()\n{\n    //Launching the native media player and starts playing the media (audio or video) at the URL:\"http://www.youtube.com/watch?v=_kKJ_Dmpa7o\"\n    kony.application.openMediaURL(\"http://www.youtube.com/watch?v=_kKJ_Dmpa7o\");\n} </pre>",
                "!type": "fn(URL: ?)"
            },
            "openURL": "fn(URL: ?)",
            "registerForIdleTimeout": {
                "!doc": "This API specifies if the application must timeout after a defined period of inactivity (time difference between the current device time and the last time you clicked on any user interface component) and also specifies the action after the timeout interval.\n@param timeoutValue {number} The timeout value in minutes. <b>Mandatory</b>\n@param callback {Function} The function that must be executed after the timeout has occurred. The callback function has the logic to display the current form.<b>Mandatory</b>\n@Available All Platforms\n@usage <pre>function registerForIdleTimeout()\n    {\n    kony.application.registerForIdleTimeout(1, test);\n    }</pre>",
                "!type": "fn(timeoutValue: ?, callback: ?)"
            },
            "registerMaster": {
                "!doc": "This API enables the developer to register new Master.\n@param masterConfig {JSObject} An object that contains namespace{String}, classname{String} and name{String}.<b>Mandatory</b>\n@returns status {Number} A status code is returned indicating the result of the API call.\n@Available iOS, Android, Windows, SPA\n@Usage <pre>\n kony.application.registerMaster (({ \"namespace\": \"kony.ui\", \"classname\": \"IPAddress\", \"name\": \"kony.ui.IPAddress\" });\n</pre>",
                "!type": "fn(masterConfig: ?)"
            },
            "registerOnSettingsChangeCallback": {
                "!doc": "This API is used to listen to the changes in settings. If user wants to stop listening to setting changes after he successfully registered, he has to pass null in second parameter and the list of settings which he want to stop listening has to be passed in first parameter.\n@param settingsList {Array} List of settings to listen for has to be provided.<b>Mandatory</b>\n@param callback {Function} Callback to invoke when any setting passed in the 'settingsList' is changed.<b>Mandatory</b>\n@Available Android, Windows\n@usage <pre>\n    function callback(params) {\n        //params object has info about the changed setting\n    }\n\n    //settingsList supported for android: \"location\", \"device_locale\", \"time_zone\", \"time\", wifi\"\n    //settingsList supported for windows: \"font\", \"color\", \"advancedEffectsEnabled\", \"inputLanguage\"\n    kony.application.registerOnSettingsChangeCallback([\"location\", \"device_locale\", \"time_zone\"], callback);\n</pre>",
                "!type": "fn(settingsList: ?, callback: ?)"
            },
            "removeAppMenuItemAt": {
                "!doc": "This API removes the specified App Menu item.\n@param appmenuid{String} Appmenu Identifier<b>Mandatory</b>\n@param index{Number}The index at which the menu item must be removed.<b>Mandatory</b>\n@Available All Platforms\n@access Write\n@usage <pre>\n var appMenuId = \"accountMenu\";</br>\n //Removing the app menu item at index 2.kony.application.removeAppMenuItemAt(appMenuId,2);</pre>",
                "!type": "fn(appmenuid: ?, index: ?)"
            },
            "removeBMState": {
                "!doc": "This API removes a specified key from the parameter list of the URL of the form.\n    @param formID {String} Identifier of the form for which the parameters of the URL have to be removed. <b>Mandatory</b>\n    @param key {String} A JSON object comprising key value pairs. The key value pairs are user defined. You cannot specify this as a nested structure. i.e the value part cannot be another JSON object. <b>Mandatory</b>\n    @Available SPA and Desktop Web\n    @usage <pre>kony.application.removeBMState (\"form1\", \"About\")\n</pre>",
                "!type": "fn(formID: ?, key: ?)"
            },
            "removeGestureRecognizer": {
                "!doc": "This API allows you to remove the specified gesture recognizer for the specified widget\n    @param gestureHandle {}Specifies the handle to the gesture returned by addGestureRecognizer call.<b>Mandatory</b>\n    @Available Available on all platforms except Server Side Mobile Web, BlackBerry 10, Windows 7/Kiosk, and Desktop Web.\n    @access Write\n    @usage  <pre>Example 1\nTo remove the TAP gesture recognizer on a hbox with ID hbx1 placed on a form frm1, use the following snippet:\nfrm1.hbx1.removeGestureRecognizer( 1 )\n\nExample 2\nTo remove the SWIPE gesture recognizer on a hbox with ID hbx1 placed on a form frm1, use the following snippet:\nfrm1.hbx1.removeGestureRecognizer( 2 )\n\nExample 3\nTo remove the LONGPRESS gesture recognizer on a hbox with ID hbx1 placed on a form frm1, use the following snippet:\nfrm1.hbx1.removeGestureRecognizer( 3 )</pre>",
                "!type": "fn(gestureHandle: ?)"
            },
            "removeGestureRecognizerForAllForms": {
                "!doc": "    @deprecated The \"removeGestureRecognizerForAllForms\" API is deprecated from 6.0 release. This method allows you to remove a specified gesture recognizer for all Forms. You can remove the gesture recognizer from a Form, an HBox, a VBox, and a Scroll Box.\n    @param uniqueIdentifier{Number} Reference to the gesture. The reference to the gesture is returned by the setGestureRecognizerForAllForms.<b>Mandatory</b>\n    @Available Available on all platforms except Server Side Mobile Web, BlackBerry 10, Windows 7/Kiosk,  and Desktop Web.\n    @access Write\n    @usage  <pre>function callbackClearLongPressGesture()\n{\n    try{\n        kony.application.removeGestureRecognizerForAllForms(uniqueidentifier);\n    }\n    catch(err){\n        alert(typeof err);\n        alert(\"error in function callbackClearLongPressGesture: \" + err.message);\n    }\n}</pre>",
                "!type": "fn(uniqueIdentifier: ?)"
            },
            "removeSecondaryTile": {
                "!doc": "This API enables you to remove and unpin a specified secondary tile which was created earlier.\n        @param id{string} Unique identifier of the secondary tile.<b>Mandatory</b\n        @Available Available on Mango\n        @Usage <pre>\n        frontTileData:{\"Front Tile Title\", \"..../test.png\", 20}\nbackTileData:{\"Front Tile Title\", \"..../test.png\", \"This is the back tile content\"}\nkony.application.setAppTile( frontTileData, backTileData );</pre>",
                "!type": "fn(id: ?)"
            },
            "removeSettingsMenuItemAt": {
                "!doc": "This API enables you to removes the specified App Menu item based on the index.\n    @param id {String} Identifier of the Charm setting menu created.<b>Mandatory</b>\n    @param index {Number} The index at which the menu item must be added. The index value lies between 0 and n-1. If the index is beyond the current length of the Charm menu items then the item is added to the end.\n    @Available Windows 8\n    @usage <pre>//Removing a menu item from the index 3.\nkony.application.removeSettingsMenuItemAt(\"charmmenu\", 3);\n\n</pre>",
                "!type": "fn(id: ?, index: ?)"
            },
            "requestPermission": {
                "!doc": "Requests for the end-user consent to access a particular resource.\n    @param resourceId {Constant} Specify the resource ID of the resource that you want permission to access. <b>Mandatory</b>\n    @param statusCallback {Function} A callback function receives the end-user's decision. The statusCallback function receives a JS Object, which contains overall status and permission-specific status that end-user responded on the permission dialog box. <b>Mandatory</b>\n\t@param options {JSObject} Specify the additional option to identify the exact resource for which you want permission. <b>Optional</b>\n    @returns status {Constant} Resource status constant which indicates the overall status of the resource authorization.\n\t@Available Android, iOS, Windows 10, SPA\n    @usage <pre>var optionCam = isVideoCapture;\nKony.application.requestPermission(kony.os.RESOURCE_CAMERA, permissionStatusCallback(), optionCam);\n\nfunction permissionStatusCallback(response){\nif(response.status == kony.application.PERMISSION_GRANTED)\nkony.location.getCurrentPosition();\nelse if(response.status == kony.application.PERMISSION_DENIED)\n{\n//Show Application Settings alert using kony.application.openApplicationSettings()\n}\n}</pre>",
                "!type": "fn(resourceId: ?, statusCallback: ?, options: ?)"
            },
            "requestReview": {
                "!doc": "This API requests rating and writing a review for an app.\n   @returns {null} None\n   @Available iOs, Android\n   @usage <pre>kony.application.requestReview();\n</pre>",
                "!type": "fn()"
            },
            "resetBMState": {
                "!doc": "This API resets the state associated with the URL of a form. It removes all the parameters attached to the form URL.\n    @param formID {String} Identifier of the form for which the parameters of the URL have to be removed. <b>Mandatory</b>\n    @Available SPA and Desktop Web\n    @usage <pre>kony.application.resetBMState (\"form1\")\n</pre>",
                "!type": "fn(formID: ?)"
            },
            "setAppFooters": {
                "!doc": "@deprecated This API allows you to set footer at the application level with the given input values.\n@param footerlist{Array}  Specifies the list of attributes for the footer.<b>Mandatory</b>\n@Available All Platforms",
                "!type": "fn(footerlist: ?)"
            },
            "setAppHeaders": {
                "!doc": "@deprecated This API allows you to set header at the application level with the given input values.\n@param headerlist{Array}  Specifies the list of attributes for the header.<b>Mandatory</b>\n@Available All Platforms",
                "!type": "fn(headerlist: ?)"
            },
            "setAppMenuBadgeValue": {
                "!doc": "This API allows you to set a badge value to the specified app menu item on the top-right corner of the app menu item. If you pass an empty String as the parameter, the badge value of the app menu item is cleared.\n        @param appmenuID{String} If you are setting the badge for an app menu item that was created dynamically, use the same ID that was used to create the app menu item. If you are setting the badge for an app menu item that was created from the IDE, use the ID available in the generated script file.<b>Mandatory</b>\n        @param menuItemId{String} Id of the app menu item to which the badge value to be set.<b>Mandatory</b>\n        @param badgeValue{String} Specifies the value of the badge. The value you specify in the badge value appears within the badge. If the length of the badge value is greater than 1 the badge is a rounded rectangle. For example, if you specify the value of the badge as 88, the Number appears in a rounded rectangular badge. If the length of the badge value is 1, the badge is always a circle. The maximum Number of characters that can be specified in a badge value is 9. If the badge value id beyond 9 only the first 9 characters are displayed.<b>Mandatory</b>\n        @Available iPhone, iPad\n        @Usage <pre>function setAppMenuBadgeValue()\n{\n    //Set the AppMenuBadgeValue for the menu item with id ::\"appmenuitemid3\" ,here the badge value is \"3\"\n    kony.application.setAppMenuBadgeValue(\"accountMenu\",\"appmenuitemid3\",\"3\");\n}</pre>",
                "!type": "fn(appmenuID: ?, menuItemId: ?, badgeValue: ?)"
            },
            "setAppMenuFocusByID": {
                "!doc": "This API takes id (which is set using createAppMenu) instead of index and sets the focus on the menu item of the current app menu.\n@param appMenuItemId{String}.Id of the appmenu item <b>Mandatory</b>\n@Available All Platforms\n@access Write\n@usage <pre>\n//Set the menu item with the identifier \"appmenuitemid2\" as the focused menu item.</br>\nkony.application.setAppMenuFocusByID(\"appmenuitemid2\");</pre>",
                "!type": "fn(appMenuItemId: ?)"
            },
            "setAppMenuFocusIndex": {
                "!doc": "@deprecated Specifies the App Menu item on which the focus must be set.\n@param Index{Number}  Specifies the index number 0<= index <=n-1; where n is the number of App Menu items.<b>Mandatory</b>\n@Available All Platforms",
                "!type": "fn(Index: ?)"
            },
            "setAppTile": {
                "!doc": "This API enables you to set the data for an application tile. If the user chooses to pin the application tile, the data set is visible. For more information on pinning a tile, refer http://www.microsoft.com/windowsphone/en-us/howto/wp7/start/move-or-delete-tile-on-start.aspx.\n        @param frontTileData{object} Specifies the data to be displayed at the front of a tile.<b>Mandatory</b>\n        @param backTileData{object} Specifies the data to be displayed at the back of a tile.<b>Optional</b>\n        @Available Available on Mango\n        @Usage <pre>\n        frontTileData:{\"Front Tile Title\", \"..../test.png\", 20}\nbackTileData:{\"Front Tile Title\", \"..../test.png\", \"This is the back tile content\"}\nkony.application.setAppTile( frontTileData, backTileData );</pre>",
                "!type": "fn(frontTileData: ?, backTileData: ?)"
            },
            "setApplicationBadgeValue": {
                "!doc": "This API allows you to set a badge value to an application icon on the mobile desktop at the top-right corner of the application icon. If you pass an empty String as a parameter, the badge applied on the application icon is removed.\n        @param badgeValue{String} Specifies the value of the badge. The value that you specify in the badgeValue parameter appears within the badge. Do not pass any other value except a numerical value. For example, to set a badge value for an appicon, specify the value as \"2\" instead of 2. If the length of the badge value is greater than 1 the badge is a rounded rectangle. For example, if you specify the value of the badge as 88, the Number appears in a rounded rectangular badge. If the length of the badge value is 1, the badge is always a circle.<b>Mandatory</b>\n        @Available iPhone, iPad\n        @Usage <pre> function setApplicationBadgeValue()\n{\n    //Set the ApplicationBadgeValue to the  application icon on the mobile desktop at the top-right corner of the application icon.\n    kony.application.setApplicationBadgeValue(\"234567\");\n}\n        </pre>",
                "!type": "fn(badgeValue: ?)"
            },
            "setApplicationBehaviors": {
                "!doc": "This API enables you to specify whether:\n The pre-show and post show events are invoked when you press Back button on your device.\nThe pop-up is modal (requires interaction before it can return to the parent application).\nThe App menu has to be updated when pre-show and post show events are invoked when you press the Back button on your device.\n\nApp menu has to be configured in pre-show/post show of each  form, if each form has separate app menu buttons/items. But on some Kony  platforms, pre-show and post show events are triggered when user navigates back using Back button and on some other platforms, those  events are not triggered. If pre-show/post show event is not triggered,  form cannot update its app menu. In this scenario, ideally, form should  retain its app menu whatever was set earlier.\nTo ensure consistency while porting application across platforms, the setapplicationbehavior API enables you to set the default behavior of pre-show and post show events, a pop-up, and app menu.\n    @param Objectbehaviors{Object}This an Object with the following key-value pairs:\ninvokePreshowPostShowEventsOnDeviceBack [Boolean]: Specifies if the preshow or postshow events are triggered when the user presses the back button.\nisPopupModel [Boolean]:  Specifies if the Popup is modal (requires interaction before it can  return to the parent application). The value set as the property for a  popup takes precedence over the value set dynamically.\nretainSpaceOnHide [Boolean]: Specifies whether the space allocated for a widget is retained when the widget is made invisible. Applicable on widgets placed in a percentage container.\n\nLimitation in Windows channel: when retainSpaceOnHide is true and widget isVisible property is false, top and bottom margins will not be considered for invisible widget.\nWhen visibility of widget is changed and when retainSpaceOnHide is true, there should not be any change in the width of HBox or % scrollBox.\nHeight will change to the max height of the visible child widget.\n\n\n\n            li {\n            color:#ffffff;\n            }\n\n\nrestoreformstateondeviceback [Boolean]: Specifies whether the default behavior of form app menu state is retained when the user presses the back button.\nhideDefaultLoadingIndicator [Boolean]: If enabled (true), it hides the default loading indicator that appears when background operation is performed. For example,  executing onClick() callback function of Button widget when a button is clicked.\nThe hideDefaultLoadingIndicator property  is available only on Android Platform and it is supported from Kony Android plug-in GA 5.0.32 onwards.\n\n            li {\n            color:#ffffff;\n            }\n\n\nadherPercentageStrictly [Boolean]: By default, this parameter is set to true.\nSPA and Desktop Web supports only adherPercentageStrictly property.\n\ndefaultIndicatorColor [String]: Set color for the progress indicator. An hex code or a word can be used to set the color. The words can only be used for two colors \"white\" and \"grey\" and these words are not case sensitive.\nThe defaultIndicatorColor property is only support for Android and Windows. Default color might vary for each platform as it picks from application theme, form color or pre-defined color.\n\nhideDefaultLoadingIndicator [Boolean]: Set as true to hide the loading indicator, and set as false to show the loading indicator.\n\nmarginsIncludedInWidgetContainerWeight [Boolean]: Set to True to apply margin calculations. Margins are calculated based on width of the parent box.\nThe margin change is applicable only for percentage boxes.\nskinImageScaleMode [Constant]: Available on Windows Phone 8 or 8.1, Windows 8, and Desktop Kiosk\nskinImageScaleMode [Constant] – Optional\n\nskinImageScaleMode accepts the following constants:\n\nconstants.SKIN_IMAGE_SCALE_MODE_DEFAULT\n\nconstants.SKIN_IMAGE_SCALE_MODE_NONE\n\nconstants.SKIN_IMAGE_SCALE_MODE_FILL\n\nconstants.SKIN_IMAGE_SCALE_MODE_UNIFORM\n\nconstants.SKIN_IMAGE_SCALE_MODE_UNIRFORMTOFILL\nSKIN_IMAGE_SCALE_MODE_DEFAULT: This mode renders the Images provided to the skin according to the existing, default behavior.SKIN_IMAGE_SCALE_MODE_NONE: This mode does not scale the Images provided to the skin. In case the image is larger than the control, the widget expands to the size of the image, else, the image occupies it’s actual height within the control.SKIN_IMAGE_SCALE_MODE_FILL: The image is scaled to fill the size of the widget in this mode. It’s aspect ratio is not preserved.SKIN_IMAGE_SCALE_MODE_UNIFORM: The image is scaled to fill the size of the widget while ensuring it’s aspect ratio is preserved.SKIN_IMAGE_SCALE_MODE_UNIFORMTOFILL: The image is resized to fill the widget dimensions while preserving the native aspect ratio. If the aspect ratio of the widget differs from that of the image, the image is clipped to fit in the destination.Example: kony.application.setApplicationBehaviors({skinImageScaleMode:constants.SKIN_IMAGE_SCALE_MODE_DEFAULT});Usage Guidelines or Restrictions or Examples: In Kony Platform, height cannot be fixed for most of the widgets. Hence, for the widgets, for which the height is not fixed, the image skin will expand and the widget’s size will grow for the modes: FILL, UNIFORM and UNIFORMTOFILL. This flag is usually set in Pre-AppInit or Post-Appinit before the widgets are rendered. In the scenario where the flag is modified after any of the widgets are rendered, there will be no change in the widgets which have already been rendered. The change will be reflected by the widgets which have not been rendered yet.<b>Mandatory</b>\n    @Available Available on all platforms except  BlackBerry 10.\n    @access Write\n    @usage  <pre>//The Application must to call kony.application.setApplicationBehaviors(appTable)\n//in post-appinit() methods.\n\n\nfunction setApplicationBehaviors()\n{\n    //Controlling the behaviours by setting invokePreshowPostShow\n  //EventsOnDeviceBack as true,isPopupModel as true,and retainSpaceOnHide as true.\n\n    kony.application.setApplicationBehaviors({invokePreshowPostShowEventsOnDeviceBack:true,\nisPopupModel:true, retainSpaceOnHide:true, \"hideDefaultLoadingIndicator\":true});\n\n}\n\nvar obj =\n{\n       windows7:\n{\n       backOnEsc:true,\n       minWidth:300,\n       maxWidth:1000,\n       minHeight:400,\n       maxHeight:800,\n       popupAsDialog:true,\n       saveState:true,\n       }\n}\n\nkony.application.setApplicationBehaviors(obj);\n</pre>",
                "!type": "fn(Objectbehaviors: ?)"
            },
            "setApplicationCallbacks": {
                "!doc": "This API captures the callback events for various states of the application such as onactive, oninactive, onbackground, onforegorund, onappterminate, onkeyboardchange, onpowersourcechange, and onnetworkchange.\n@param callbacks {Object} Specifies an Object with key as appstate and value as available on all platforms callback function for the corresponding appstate. <b>Mandatory</b>The different appstates are onactive, oninactive, onbackground, onforegorund, onappterminate, onkeyboardchange, onpowersourcechange, and onnetworkchange (Status, Newtork, Date).\n@Available All Platforms except Desktop Web, SPA,Mobile Web, and Symbian.\n@usage <pre>//onactive function\n    function test()\n    {\n    alert(\"===============Test excuted=======\");\n    }\n    //oninactive function\n    function test1()\n    {\n    alert(\"===============Test1 excuted=======\");\n    }\n    //onbackground function\n    function test2()\n    {\n    alert(\"===============Test2 excuted=======\");\n    }\n    //onforeground function\n    function test3()\n    {\n    alert(\"===============Test3 excuted=======\");\n    }\n    //onappterminate function\n    function test4()\n    {\n    alert(\"===============Test4 excuted=======\");\n    }\n    //setcallbackfunction\n    function setCallBacks()\n    {\n    alert(\"===============setApplicationCallbacks excuted=======\");\n    var callbacksObj = {onactive: test, oninactive: test1, onbackground:test2, onforeground:test3, onappterminate:test4};\n    kony.application.setApplicationCallbacks(callbacksObj);</pre>",
                "!type": "fn(callbacks: ?)"
            },
            "setApplicationInitializationEvents": {
                "!doc": "This API is used to invoke all initialization events such as preappinit, postappinit, init, appservice, showstartupform etc.\n@param callbacks{Object} Is an object which comprises of the following parameters such as preappinit, postappinit, init, appservice, and showstartupform.<b>Mandatory</b>\n@Available All Platforms\n@usage <pre>//onactive function\n    function test()\n    {\n    alert(\"===============Test excuted=======\");\n    }\n    //oninactive function\n    function test1()\n    {\n    alert(\"===============Test1 excuted=======\");\n    }\n    //onbackground function\n    function test2()\n    {\n    alert(\"===============Test2 excuted=======\");\n    }\n    //onforeground function\n    function test3()\n    {\n    alert(\"===============Test3 excuted=======\");\n    }\n    //onappterminate function\n    function test4()\n    {\n    alert(\"===============Test4 excuted=======\");\n    }\n    //setAppInitialization function\n    function setAppInitializationEvents()\n    {\n    kony.application.setApplicationInitializationEvents({init:test,\n    preappinit:test1, postappinit:test2, appservice:test3,\n    showstartupform:test4});\n    alert(\"===============setAppInitializationEvents excuted=======\");</pre>",
                "!type": "fn(callbacks: ?)"
            },
            "setApplicationLayout": {
                "!doc": "This API specifies if the application must have a layout from \"left to right\" or \"right to left\".\n    @param layoutDirection {number} Specifies the layout direction for the content and the widgets of an application. <b>Mandatory</b>\n    @Available Available on Windows 8\n    @usage <pre>//If an application supports English and Arabic languages, app developer can invoke below snippet anywhere\nin appservice/preappinit/postappinit.\n\n\nfunction setApplicationLayoutBasedOnLocale()\n{\nIf(kony.i18n.getCurrentLocale() == “en_US”)\n{\nkony.application.setApplicationLayout(constants.APPLICATION_LAYOUT_LEFT2RIGHT);\n}else\n{\nkony.application.setApplicationLayout(constants.APPLICATION_LAYOUT_RIGHT2LEFT);\n}\n}</pre>",
                "!type": "fn(layoutDirection: ?)"
            },
            "setApplicationMode": "fn(IntegerConstant: ?)",
            "setApplicationProperties": {
                "!doc": "The API enables you set properties at the application level.\n        @param statusBarColor {String} Sets the color for a device's status bar.\n\t\t@param statusBarForegroundColor {String} Sets the foreground color of the device's status bar; the color of each item (text, icon, and so on) displayed on the status bar.\n\t\t@param statusBarHidden {Boolean} Hides or reveals the status bar.\n\t\t@param statusBarStyle {Constant} Sets a style for the status bar.\n\t\t@Available All Platforms\n        @Usage <pre>function setApplicationProperties()\n\t\t\t{\n\t\t\t\tkony.application.setApplicationProperties({statusBarColor: \"ffff0000\", statusBarForegroundColor: \"ff0000\", statusBarHidden: true, statusBarStyle: constants.STATUS_BAR_STYLE_LIGHT_CONTENT});\n\t\t}</pre>",
                "!type": "fn(statusBarColor: ?, statusBarForegroundColor: ?, statusBarHidden: ?, statusBarStyle: ?)"
            },
            "setBMState": {
                "!doc": "This API sets the bookmark state to the URL. This API accepts the formID and a json structure of key value pairs which will be added to the URL of the page.\n    @param formID {String} Identifier of the form to be bookmarked. <b>Mandatory</b>\n    @param state {Object} A JSON object comprising key value pairs. The key value pairs are user defined. You cannot specify this as a nested structure. i.e the value part cannot be another JSON object. <b>Mandatory</b>\n    @Available SPA and Desktop Web\n    @usage <pre>var state = {Bookmark : \"about\", text : \"About\"};\nkony.application.setBMState (\"form1\", state)\n</pre>",
                "!type": "fn(formID: ?, state: ?)"
            },
            "setCheckBoxSelectionImageAlignment": {
                "!doc": "Used to set the alignment of the checkBox selection image.\n@param SelectionImageAlignment {Object} Indicates if default padding should be set. Possible values for SelectionImageAlignment: constants.CHECKBOX_SELECTION_IMAGE_ALIGNMENT_LEFT, constants.CHECKBOX_SELECTION_IMAGE_ALIGNMENT_RIGHT<b>Mandatory</b>\n@returns {null}\n@Available iPhone and iPad\n@Usage <pre>\n kony.application. setCheckBoxSelectionImageAlignment(constants.CHECKBOX_SELECTION_IMAGE_ALIGNMENT_RIGHT);\n</pre>",
                "!type": "fn(SelectionImageAlignment: ?)"
            },
            "setCurrentAppMenu": {
                "!doc": "This API allows you to uses the unique identifier which represents the App Menu and sets it as current app menu.\n@param appmenuid{String}.Id of the menu item <b>Mandatory</b>\n@Available All Platforms\n@access Write\n@usage <pre>\n//After creating appMenu with the unique identifier \"myappmenu\", set it as current app menu.</br>\nvar kony.application.setCurrentAppMenu(\"myappmenu\");</pre>",
                "!type": "fn(appmenuid: ?)"
            },
            "setCurrentSettingsMenu": {
                "!doc": "This method uses the unique identifier which represents the Charm settings menu and sets it as current settings menu. There can be only one current settings menu that can be set any time. Calling this method multiple times, replaces the current Charm settings menu.\n@param id {String} Identifier of the Charm setting menu to be set.<b>Mandatory</b>\n@Available Windows 8\n@usage <pre>kony.application.setCurrentSettingsMenu (\"myMenu\")</pre>",
                "!type": "fn(id: ?)"
            },
            "setDefaultTextboxPadding": {
                "!doc": "Used to customize the default paddings applied for Textbox. Generally default padding is appended to padding applied through layout configurations of the widget. Setting the value to 'false' will ensure no default padding is applied to textbox widgets.\n@param bool {Boolean} Indicates if default padding should be set.<b>Mandatory</b>\n@returns {null}\n@Available iPhone and iPad\n@Usage <pre>\n kony.application.setDefaultTextboxPadding(false);\n</pre>",
                "!type": "fn(bool: ?)"
            },
            "setGestureRecognizerForAllForms": {
                "!doc": "@deprecated The \"setGestureRecognizerForAllForms\" API is deprecated from 6.0 release. This method allows you to set a gesture recognizer for a specified gesture for all Forms. You can set a Gesture recognizer only for a Form, a Box, and a Scroll Box.\n        @param gestureType{Number} Indicates the type of gesture that needs to be detected on the widget. <b>Mandatory</b>\n          @param setupParams{Object} Specifies an object that has the configuration parameters needed to setup a gesture recognizer. <b>Mandatory</b>\n          @param gestureHandler{Function} Specifies the function that needs to be executed when a gesture is recognized.    <b>Mandatory</b>\n          @usage <pre>//Defining a function\nfunction formGesture(widgetID,gestureInfo)\n{\n    var y = kony.type(gestureInfo); //expected value of y = table\n    var z = kony.type(gestureInfo.gesturesetUpParams); //expected values of z = table\n    var a = gestureInfo.gestureType;\n    var b = gestureInfo.gesturesetUpParams;\n    var c = gestureInfo.gesturePosition;\n    var d = gestureInfo.gestureX;\n    var e = gestureInfo.gestureY;\n    var f = gestureInfo.widgetWidth;\n    var g = gestureInfo.widgetHeight;\n    kony.print(\"**********************\");\n    if(kony.os.toNumber(gestureInfo.gestureType) == 2)\n    {\n        h = gestureInfo.swipeDirection;\n        kony.print(\"swipe direction is: \"+h);\n    }\n    else{\n        h = \"\"\n    }\n    if(kony.os.toNumber(a) == 1)\n    {\n        b1 = \"fingers: \"+gestureInfo.gesturesetUpParams.fingers;\n        b2 = \"taps: \"+gestureInfo.gesturesetUpParams.taps;\n        kony.print(\"\"+b1+\"\"+b2);\n    }\n    else if(kony.os.toNumber(a) == 2)\n    {\n        b1 = \"fingers :\"+gestureInfo.gesturesetUpParams.fingers;\n        b2 = \"\";\n        kony.print(\"\"+b1+\"\"+b2);\n    }\n    else if(kony.os.toNumber(a) == 3)\n    {\n        b1 = \"pressduration:\"+gestureInfo.gesturesetUpParams.pressDuration;\n        b2 = \"\";\n        kony.print(\"\"+b1+\"\"+b2);\n    }\n\n    kony.print(\"widget id is: \"+widgetID[id]); //will print the widgetID. To print widgetID use widgetID.id\n    kony.print(\"type of gestureInfo is: \"+y);\n    kony.print(\"type of gesturesetUpParams is: \"+z);\n    kony.print(\"gestureType is: \"+a); //gestureType=1 or 2 or 3\n    kony.print(\"gesturesetUpParams is: \"+b.fingers); //gesturesetUpParams = {fingers =1, taps =1} or {fingers =1, taps =2} or {fingers =1} or {pressDuration = 1}\n    kony.print(\"gesturePosition is: \"+c); //gesturePosition=1 or 2 or 3 or .....9\n    kony.print(\"gestureX is: \"+d); //ex: gestureX=30\n    kony.print(\"gestureY is: \"+e); //ex: gestureY=100\n    kony.print(\"widgetWidth is: \"+f); //ex: widgetWidth=320\n    kony.print(\"widgetHeight is: \"+g); //ex: widgetHeight=28\n    //gesturePosition, gestureX, gestureY, widgetWidth, widgetHeight params are not applicable in android\n    kony.print(\"**********************\");\n}\nfunction callbackSingleTapGesture()\n{\n    var x ={fingers:1,taps:1};\n    try{\n        kony.application.setGestureRecognizerForAllForms(1, x, formGesture);\n    }\n    catch(err){\n        alert(typeof err);\n        alert(\"error in function callbackSingleTapGesture: \"+err.message);\n    }\n}</pre>",
                "!type": "fn(gestureType: ?, setupParams: ?, gestureHandler: ?)"
            },
            "setRespectImageSizeForImageWidgetAlignment": {
                "!doc": "Used to set the ImageWidget width to MIN of available width or image width in absence of reference width. If ImageWidget is smaller thant the available width it will be alligned using the widget alignment rules.\n@param bool {Boolean} Indicates if default padding should be set.<b>Mandatory</b>\n@returns {null}\n@Available iPhone and iPad\n@Usage <pre>\n kony.application. setRespectImageSizeForImageWidgetAlignment (true);\n</pre>",
                "!type": "fn(bool: ?)"
            },
            "setSecondaryTile": {
                "!doc": "This API enables you to create or update data for a secondary tile. Unlike the application tiles, secondary tiles are automatically pinned to the Start Screen of the device.\n        @param id{string} Unique identifier of the secondary tile.<b>Mandatory</b\n        @param frontTileData{object} Specifies the data to be displayed at the front of a tile.<b>Mandatory</b>\n        @param backTileData{object} Specifies the data to be displayed at the back of a tile.<b>Optional</b>\n        @Available Available on Mango\n        @Usage <pre>\n        frontTileData:{\"Front Tile Title\", \"..../test.png\", 20}\nbackTileData:{\"Front Tile Title\", \"..../test.png\", \"This is the back tile content\"}\nkony.application.setAppTile( frontTileData, backTileData );</pre>",
                "!type": "fn(id: ?, frontTileData: ?, backTileData: ?)"
            },
            "setZoomedOutView": {
                "!doc": "You can design a user interface to be displayed to the end user when you zoom out of an application. This API enables you to set a form  to be shown to the user when a zoom out\n is performed. This API is introduced to support the Semantic Zoom feature introduced with Windows 8.\n    @param formid {String} Specifies the id of the form to be displayed when the user zooms out of the application.<b>Mandatory</b>\n    @Available Windows 8\n    @usage <pre>//Zooming out of a an application and displaying a form with an id myForm1 on zoomout\n\nfunction zoomout()\n{\n    kony.application.setZoomedOutView(myForm1);\n}\n</pre>",
                "!type": "fn(formid: ?)"
            },
            "settings": {
                "read": {
                    "!doc": "This API allows you to read the configurations associated with a specified key. This is an asynchronous call.\n@param key{String} Specifies the key for which you want to read the settings. The settings are read from the application settings file that is bundled along with the application binary.\n@param onsuccesscallback{Function} Specifies the callback function that must be executed when a key-value is read successfully.<b>Mandatory</b>\n@param onfailurecallback{Function} Specifies the callback function that must be executed when there is an error in fetching the app setting. This callback function receives the error code and the error message.<b>Mandatory</b>\n@returns This API asynchronously returns the settings for a key by invoking onsuccess callback and does not return any values directly.\n@Available iPhone",
                    "!type": "fn(key: ?, onsuccesscallback: ?, onfailureback: ?)"
                },
                "write": {
                    "!doc": "This API allows you to write the values to the specified key with the given value. New keys cannot be introduced with this API. When the value for the specified key is modified using this API, the changes should reflect in the application settings at the device level. This is an asynchronous call.\n@param key{String} Specifies the unique key. The specified key must be existing. You cannot introduce a new key.<b>Mandatory</b>\n@param value{String} Specifies the value to be set for a key. The existing value would be replaced with the new value. Value can be Boolean, String, double, or an object. An object is returned only when \"Display option\" is multi-select.<b>Mandatory</b>\n@param onsuccesscallback{Function} Specifies the callback function that must be executed when the new value is updated against the specified key.<b>Mandatory</b>\n@param onfailurecallback{Function} Specifies the callback function that must be executed when there is an error in updating the configuration. This callback function receives the error code and the error message.<b>Mandatory</b>\n@returns This API asynchronously returns the values by invoking on success and does not return any values directly.<b>Mandatory</b>\n@Available iPhone",
                    "!type": "fn(key: ?, value: ?, onsuccesscallback: ?, onfailureback: ?)"
                }
            },
            "showAppMenuItems": {
                "!doc": "@deprecated This method shows only the App Menu items that you specify and hides the rest.\n@param Listofmenuids{Object}  Specifies the index number 0<= index <=n-1; where n is the number of App Menu items. <b>Mandatory</b>\n@Available All Platforms",
                "!type": "fn(Listofmenuids: ?)"
            },
            "showLoadingScreen": {
                "!doc": "This API allows you to display a loading screen (following a certain color schema) to the user while another action is in progress. The loading screen can be defined in such a way it can either block the UI or does not block the UI. Typically, the loading screen is a semi-transparent screen over-laid on the current form.\n@param skin{String} The skin to be applied to the loading screen. All the skin attributes supported by different platforms are applicable. This is a reference to an existing skin. If it is nil, the native platform skin is applied. <b>Mandatory</b>\n@param text{String} The text to be displayed when displaying the loading screen. For example, \"Searching flights...\". If it is nil, no text is displayed. <b>Mandatory</b>\n@param position{String} Indicates the position of the loading screen, whether it should occupy the entire screen or just the center of the screen. The possible values for position are :constants.LOADING_SCREEN_POSITION_FULL_SCREEN (default),  constants.LOADING_SCREEN_POSITION_ONLY_CENTER. <b>Mandatory</b>\n@param isBlocked{Boolean} Indicates if the UI should be blocked. <b>Mandatory</b>\n@param showProgressIndicator{Boolean} Is an integer constant which can have any one of the following values: APPLICATION_MODE_NATIVE, APPLICATION_MODE_HYBRID, APPLICATION_MODE_WRAPPER <b>Mandatory</b>\n@param properties{Object} Indicates the platform specific properties to be applied to the loading screen. <b>Mandatory</b>\n@Available iPad/iPhone, Android, BlackBerry, Windows Phone,\n@usage <pre>kony.application.showLoadingScreen(\"loadskin\",\"LoadingScreen\",constants.LOADING_SCREEN_POSITION_ONLY_CENTER, false,true,null);</pre>",
                "!type": "fn(skin: ?, text: ?, position: ?, isBlocked: ?, showProgressIndicator: ?, properties: ?)"
            },
            "unregisterForIdleTimeout": {
                "!doc": "This API specifies that the application must not timeout after a defined period of inactivity (time difference between the current device time and the last time you clicked on any user interface component). This API unregisters the application from idletimeout.\n@Available All Platforms\n@usage <pre>function unregisterForIdleTimeout()\n    {\n    kony.application.unregisterForIdleTimeout();\n    alert(\"====unRegister======\");\n    }</pre>",
                "!type": "fn()"
            },
            "zoomIn": {
                "!doc": "This API enables you to zoom in on an application programmatically. If the application is already zoomed in, this API has no effect.\n    @Available Windows 8\n    @usage <pre>//Enabling zoomin on an application\n\nfunction zoomIn()\n{\n    kony.application.zoomIn();\n}\n</pre>",
                "!type": "fn()"
            }
        },
        "backgroundjob": {
            "!doc": "Background Job API's.",
            "registerBackgroundFetch": "fn(backgroundCallBack: ?, fetchInterval: ?)",
            "setBackgroundFetchCompletionStatus": {
                "!doc": "One must call this method in the end of backgroundCallBack passing a result that indicates whether content was available or not. This method intimates the system of the completion status of the background fetch job that has been scheduled.\nExecuting this call tells the system that it can move the app back to the suspended state and evaluate its power usage. Apps that download small amounts of content quickly and accurately display when they have content to download are more likely to receive execution time in the future than apps that take longer to download their content\nFailure to call this method results in undefined behavior and could cause the app to be terminated by the system. If an error arises during invoking this API, default value:  constants.BACKGROUND_TASK_STATUS_FAILED will be set.\n    @param completionStatus{} This is a mandatory parameter. <b>Mandatory</b>\n    @Available iOS Platform\n    @access Write\n    @usage  <pre>\nfunction backgroundFecthCallBack()\n{\n//fetch handler invoked whenever the system invokes the App for a fetch job\n// do something here\n// in the end of the handler setBackgroundFetchCompletionStatus() need\n// to be called mandatorily other wise system might termitane the app.\n// task completion status.\n//1. constants.BACKGROUND_TASK_STATUS_NEW_DATA\n//2. constants.BACKGROUND_TASK_STATUS_FAILED\n//3. constants.BACKGROUND_TASK_STATUS_NO_NEW_DATA\n\nvar completionStatus = constants.BACKGROUND_TASK_STATUS_NEW_DATA;\n        kony.backgroundjob.setBackgroundFetchCompletionStatus(completionStatus);\n\n};\n    //Fetch interval\n    //1. constants.BACKGROUND_TASK_FETCH_INTERVAL_MINIMUM\n    //2. constants.BACKGROUND_TASK_FETCH_INTERVAL_NEVER\n    //3. Time in seconds. (Negative values are not accepted).\n\n    var fetchInterval = constants.BACKGROUND_TASK_FETCH_INTERVAL_MINIMUM;\n\n    //register background fetch job\n    kony.backgroundjob.registerBackgroundFetch(backgroundFecthCallBack, fetchInterval);</pre>",
                "!type": "fn(completionStatus: ?)"
            },
            "setBackgroundFetchInterval": {
                "!doc": "This method sets the fetch interval for the background fetch job scheduled.\n    @param fetchInterval{Number}Indicative minimum time interval in seconds that should elapse before system can invoke the app for next fetch job. This is only indicative and may not have any real effects on the scheduling frequency, as system decides the actual interval.<b>Mandatory</b>\n    @Available iOS Platform\n    @access Write\n    @usage  <pre>//Fetch interval\n    //1. constants.BACKGROUND_TASK_FETCH_INTERVAL_MINIMUM\n    //2. constants.BACKGROUND_TASK_FETCH_INTERVAL_NEVER\n    //3. Time in seconds. (Negative values are not accepted).\n\n    var fetchInterval = constants.BACKGROUND_TASK_FETCH_INTERVAL_MINIMUM;\n\n    kony.backgroundjob.setBackgroundFetchInterval(fetchInterval);\n</pre>",
                "!type": "fn(fetchInterval: ?)"
            }
        },
        "camera": {
            "!doc": "Camera API's",
            "releaseRawBytes": {
                "!doc": "This API enables you to delete rawbytes for the image. If you use this API, the captured image is deleted from the disk or in-memory.\n@param rawBytes {Object} Specifies the rawbytes of the image (captured from the camera) you want to release when the camera widget accessMode property is set as: CAMERA_IMAGE_ACCESS_MODE_PUBLIC or CAMERA_IMAGE_ACCESS_MODE_PRIVATE or CAMERA_IMAGE_ACCESS_MODE_INMEMORY <b>Mandatory</b>\n@returns {null} None\n@Available Available on iPhone, iPad, Android, Android Tablet, and Windows.\n@usage <pre>//To delete the rawbytes captured by the camera widget cam1 in form Frm1, enter the following:\nvar imagetodel = frm1.cam1.rawBytes\nkony.camera.releaseRawBytes(imagetodel)\nor\nkony.camera.releaseRawBytes(frm1.cam1.rawBytes)</pre>",
                "!type": "fn(rawBytes: ?)"
            }
        },
        "contact": {
            "!doc": "Contact API's",
            "add": {
                "!doc": "This API adds a contact to the address book of the mobile device\n@param contactDetails {Object} A table with these key value pairs {firstname: String, lastname: String, phone: [{number: Number, name: String}], email: [{id: String, name: String}], postal: [{country: String, name: String}], company: [{company: String, name: String}], website: [{url: String, type: String}]}\n@returns {Object | null} Returns the information related to the newly created contact or returns null if contact is not created.\n@Available iOS, Andriod, Windows\n@access Write\n@usage <pre>\n   var contactDetails = {\n                     \"firstname\": \"Kony\",\n                     \"lastname\": \"User\",\n                     \"phone\": [{ \"number\": \"+91 8886558889\",  \"name\": \"mobile\"}],\n                     \"email\": [{\"id\": \"kony@gmail.com\",  \"name\": \"work\" }],\n                     \"postal\": [{\"country\": \"INDIA\", \"name\": \"home\" }],\n                     \"company\": [{\"company\": \"kony\", \"name\": \"work\" }],\n                     \"website\" : [ {\"url\" : \"www.google.com\", \"type\" : \"homepage\"},\n                                   {\"url\" : \"www.myblog.com\", \"type \" : \"blog\"},\n                                   {\"url\" : \"www.kony.com\" , \"type\" : \"work\"},\n                                   {\"url\" : \"www.myprofile.com\" , \"type\" : \"profile\"},\n                                   {\"url\" : \"www.facebook.com\" , \"type\" : \"profile\"},\n                                 ]\n                     };\n\n  kony.contact.add(contactDetails); </pre>",
                "!type": "fn(contactDetails: ?) -> ?"
            },
            "details": {
                "!doc": "This API displays the details of a given contact and returns a new instance of the contact structure.\n@param ReferenceTable{Object} Specifies the reference table returned by the contact.find API<b>Mandatory</b>\n@returns {Object|null} Table of the contacts retrieved. The reference table retrieved contains a field photorawbytes. This is a new property in the existing contact structure that should be populated with raw bytes, just like camera or gallery raw bytes.\n@Available Mobile Web, Windows 8, and Win Mobile 6x do not support this API.\n@access Write",
                "!type": "fn(ReferenceTable: ?) -> ?"
            },
            "find": {
                "!doc": "This API parses through the address book of the mobile device and looks for  contacts that match the input string.\n@param firstName{String} A string that represents the firstname of the contact.<b>Mandatory</b>\n@param needDetails{Boolean} When the needdetails parameter is not passed, the default value set is true. When needdetails is set to true, this API returns the complete details of the contact. If needdetails is false, contact.find returns a list of contacts with a new field called displayname in the existing contact structure. All other fields of contact structure are not populated. displayname is a combination of firstname and lastname. displayname is a platform specific Android property. <b>Optional</b>\n@returns {Object|null} Table containing the information related a contact is returned.\n@Available Mobile Web, Windows 8, and Win Mobile 6x do not support this API.\n@access Write",
                "!type": "fn(firstName: ?, needDetails: ?) -> ?"
            },
            "remove": {
                "!doc": "This API deletes the contact (s) that was returned by the contact.find  operation.\n@param ReferenceTable{Object} Specifies the reference table returned by the contact.find API<b>Mandatory</b>\n@returns {Object|null} Table of the contacts that is deleted\n@Available Mobile Web, Windows 8, and Win Mobile 6x do not support this API.\n@access Write",
                "!type": "fn(ReferenceTable: ?) -> ?"
            }
        },
        "convertToBase64": {
            "!doc": "This API provides you the ability to convert rawbytes (returned by the camera or the encryption API) to a base64 encoded string.\n        @param rawbytes{String|Number|Object|Array|Boolean} The rawbytes that you want to convert to an encoded base64 string. These rawbytes can be those that are returned from a camera or the encryption API. <b>Mandatory</b>\n        @returns {String|null}  The encoded base64 string that was converted from the provided rawbytes. This converted encoded base64 string can be displayed on the screen to the user whenever required as this string is readable.null is returned if the rawbytes cannot be converted to base64 string or the provided input is not of type rawbytes.\n        @Available All Platforms\n        @usage <pre>var myVal = 2000;\nkony.convertToBase64(myVal)</pre>",
            "!type": "fn(rawbytes: ?) -> string"
        },
        "convertToRawBytes": {
            "!doc": "This API provides you the ability to read rawbytes from a base 64 encoded string.\n        @param base64String{String} The base64 encoded string from which you want to read the rawbytes.<b>Mandatory</b>\n        @returns {String|Number|Boolean|Array|Object|null} The datatype of the rawbytes varies per platform. In JavaScript, there is no specific type for rawbytes and every platform represent the rawbytes in a unique way.\n        @Available All Platforms\n        @usage <pre>var base64 =\"MIICKTCCAZKgAwIBAgIESrI6bzANBgkqhkiG9w0BAQUFADBZMQswCQYDVQQGEwJp\nbjELMAkGA1UECBMCYXAxDDAKBgNVBAcTA2h5ZDENMAsGA1UEChMEa29ueTENMAsGA1UECxMEa29ue\nTERMA8GA1UEAxMIcGF0dGFiaGkwHhcNMDkwOTE3MTMzMjMxWhcNMDkxMjE2MTMzMjMxWjBZMQswCQ\nYDVQQGEwJpbjELMAkGA1UECBMCYXAxDDAKBgNVBAcTA2h5ZDENMAsGA1UEChMEa29ueTENMAsGA1U\nECxMEa29ueTERMA8GA1UEAxMIcGF0dGFiaGkwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAIGP\ndqCQCtFgsy1sM494o1F07aN+UXgsilTuKsNRExOb03RGrg2WpAI8PqMXD1XzGZAg+qC9iQexpWHUj\nXgCYCbYrETvB3wNAToOrRE6mhZ0iaJij/0tLZACocLiTnvmzZU1B/xowvlioD3zsEs5N5n0U0fIsv\nW/22MZ6WtZuAZTAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAXfOB1Mhx2R9ameeZz0hvCzYYSGcWsWN\nZaM7lMdBHFPzASYcVrmLj7JlLpuMm679A2p2JwXBsfetmhKse1ixqVeWdbe/FUfESU+8Krdvkcknv\nZaDqXYFxQAaVjTwWOn+zcDHf7LjjDohgDsMOJWXHkVQj2jooXqiktrBrpccm864=\";\nkony.convertToBase64(myVal)\nvar rawBytes = kony.convertToRawBytes(base64);</pre>",
            "!type": "fn(base64String: ?) -> ?"
        },
        "crypto": {
            "!doc": "Crypto API's",
            "asymmetricDecrypt": {
                "!doc": "This API decrypts the input encrypted string.\n@param alias {String} - The alias value generated by using generateAsymmetricKeyPair API.\n@param encryptedString {String} - Mandatory The encrypted string that you must input.\n@param propertiesTable {{cipher: String, keysize: String}} - Mandatory The applicable values for this parameter are cipher algorithm. The relevant value is RSA. And keysize - for specifying either public or private keys.\n@return {String} - Returns the decrypted cipher text.\n@Available Android, windows 10, Windows Desktop",
                "!type": "fn(alias: ?, encryptedString: ?, propertiesTable: ?) -> string"
            },
            "asymmetricEncrypt": {
                "!doc": "This API encrypts the input string and returns the encrypted text.\n@param alias {String} - Optional You can generate the value of the alias parameter by using generateAsymmetricKeyPair API.\n@param inputstring {String} - Optional The input text to be decrypted.\n@param propertiesTable {{cipher: String, keysize: String}} - Mandatory The applicable values for this parameter are cipher algorithm. The relevant value is RSA. And keysize - for specifying either public or private keys.\n@return {String} - Returns the encrypted cipher text. RSA can only encrypt data to a maximum amount of your keysize(256bytes) – padding/header data.\n@Available Android, windows 10, Windows Desktop",
                "!type": "fn(alias: ?, inputstring: ?, propertiesTable: ?) -> string"
            },
            "createHMacHash": {
                "!doc": "This function generates a hash-based message authentication code (HMAC) that verifies the data integrity and authenticity of the data.\n@param algo {String} - A string that contain the hashing algorithm. See the Remarks section below for more information.\n@param key {String} - A string that holds the input key for the algorithm.\n@param message {String} - A string that contains the plain text message for which the hash is generated.\n@return {String} - hexadecimal string that holds the hash value created using the specified algorithm for the given input string.\n@throws {Exception}\n@Available iOS and Android.",
                "!type": "fn(algo: ?, key: ?, message: ?) -> string"
            },
            "createHash": {
                "!doc": "Hash value is a unique and compact numerical representation of a chunk of data. This API provides the ability to create a hash value in hexadecimal format for a given input string using the specified algorithm.\n@param algo {String} Algorithm to be used for creating the hash value. Possible values are: sha1, sha224, sha256, sha384, sha512, md2, md4, and md5 <b>Mandatory</b>\n@param inputstring {String} It is Input string for which the hash value needs to be created. <b>Mandatory</b>\n@returns {String} Hash value created using the specified algorithm for the given input string. This string is in hexadecimal format. Length of the hashValue string in bytes is as follows (for each algorithm):1. sha1 2. sha224 3. sha256 4. sha384 5. sha512 6. md2 7. md4 8. md5\n@Available All Platforms\n@usage <pre>var algo=\"sha1\";\n    var inputstr=\"pleasecreatehash\";\n    var myHashValue = kony.crypto.createHash(algo,inputstr);</pre>",
                "!type": "fn(algo: ?, inputstring: ?) -> string"
            },
            "createPBKDF2Key": {
                "!doc": "This function creates a Password-Based Key Derivation Function 2(PBKDF2) key for protecting passwords and other similar tasks.\n@param algo {String} - A string that specifies the hashing algorithm used for creating the key. For a list of supported algorithms by platform, see the Kony API documentation.\n@param password {String} - A string that contains the master password from which a derived key is generated.\n@param salt {String} - A string that holds a random salt input string from a programmer\n@param iteration {Number} - A number that specifies the desired number of iterations. Should be at least 10,000 as per NIST standards.\n@param klen {Number} - An optional numeric parameter that specifies the desired length of the derived key in bits. If the key length is not specified, this value defaults to 256-bits.\n@return {String} - Returns the key created using the PBKDF2 algorithm.\n@throws {Exception}\n@Available iOS, Android and Windows",
                "!type": "fn(algo: ?, password: ?, salt: ?, iteration: ?, klen: ?) -> string"
            },
            "decrypt": {
                "!doc": "This API provides the ability to decrypt the encrypted text with the specified key and algorithm. The API returns the decrypted text.\n@param algo {String} Algorithm using which the encrypted text needs to be decrypted. <b>Mandatory</b> Possible values are: aes and tripledes\n@param generatedkey {userdata} The key to be used for decryption. <b>Mandatory</b>\n@param encryptedRawbytes {userdata} The rawbytes of the encrypted text that need to be decrypted. <b>Mandatory</b>\n@param propertiesTable {Object} - <b>Mandatory</b> This Object contains the following key-value pairs: padding - a string denotes the padding that needs to be applied. Block size for different algorithms is: aes - 128 bits, tripledes - 64 bits, rsa - 1024 or 2048 bits. mode - a string that denotes the encryption mode. initializationvector - a string that denotes the IV to be used.\n@returns {String} The clear text decrypted from the encrypted rawbytes.\n@Available All Platforms\n@usage <pre>var algo=\"aes\";\n    var aeskey=\n    kony.crypto.\n    newKey(\"\n    passphrase\",128,{passphrasetext:\"inputstring1\",subalgo:\"aes\",passphrasehashalgo:\"var inputstr=\"encryptedtextrawbytes\";\n    var prptobj={padding:\"pkcs5\",mode:\"cbc\",initializationvector: \"1234567890123456\"};\n    myClearText = kony.crypto.decrypt(algo,aeskey,inputstr,prptobj);</pre>",
                "!type": "fn(algo: ?, generatedkey: ?, encryptedRawbytes: ?, propertiesTable: ?) -> string"
            },
            "deleteKey": {
                "!doc": "Thid API provides you the ability to delete the key from the device store if you are sure that you do not need that key anymore in the application.\n@param uniqueID {String} Unique ID represents the key on the device store (this is the ID returned by kony.crypto.saveKey API). <b>Mandatory</b>\n@Available All Platforms\n@usage <pre>EncryptDecryptKey = kony.crypto.newKey(\"passphrase\", 128,\n{passphrasetext={\"inputstring1\"}, subalgo=\"aes\",\npassphrasehashalgo=\"md5\"});\nmyUniqueIDKey = kony.crypto.saveKey(\"myKey\",EncryptDecryptKey);\nkony.crypto.deleteKey(myUniqueIDKey);</pre>",
                "!type": "fn(uniqueID: ?)"
            },
            "encrypt": {
                "!doc": "This API provides the ability to encrypt the input text with the specified key and algorithm. The rawbytes of the encrypted text are returned.\n@param algo {String} Algorithm using the input string that needs to be encrypted. <b>Mandatory</b> Possible values are: 1. aes 2. tripledes 3. rsa\n@param generatedkey {userdata Object} The key to be used for encryption. <b>Mandatory</b> Note: This API accepts only the key generated using the kony.crypto.newKey API.\n@param inputstring {String} - Data which needs to be encrypted. <b>Mandatory</b>\n@param propertiesTable {Object} - This Object contains the following key-value pairs: padding - a string that denotes the padding that needs to be applied. mode - a string that denotes the encryption mode. initializationvector - a string that denotes the IV to be used. Mandatory\n@returns {Object} – userdata The rawbytes for the encrypted version of the input text.\n@Available All Platforms\n@usage <pre>var algo=\"aes\";\n    =>var aeskey=\n    kony.crypto.\n    newKey(\"\n    passphrase\",128,{passphrasetext:\"inputstring1\",subalgo:\"aes\",passphrasehashalgo:\"=>var inputstr=\"pleaseencryptme\";\n    =>var\n    prptobj={padding:\"\n    pkcs5\",mode:\"cbc\",initializationvector:\"1234567890123456\"};\n    =>var myEncryptedText =\n    kony.crypto.encrypt(algo,aeskey,inputstr,prptobj);</pre>",
                "!type": "fn(algo: ?, generatedkey: ?, inputstring: ?, propertiesTable: ?) -> ?"
            },
            "generateAsymmetricKeyPair": {
                "!doc": "This API is used to generate public and private keys for encryption and decryption processes. Typically, you can use the Public key to verify the digital signature and plain text data, whereas you can use the Private key to create a digital signature and to decrypt the text.\n@param propertiesTable {Object} - (Mandatory) A key-value pair that you can use to generate asymmetric key pairs.\n@param propertiesTable.alias {String} -(Mandatory) UTF-8 string.\n@param propertiesTable.keysize {Number} - Size of the key that is generated by using this API.\n@param propertiesTable.cipher {String} - Use cipher algorithm. The applicable value is RSA.\n@param propertiesTable.Publicexponent {Number} - An odd integer. The recommended value is 65337.\n@param propertiesTable.Padding {bytes} - For RSA algorithm, the possible padding modes are PKCS1, OAEP and None. The recommended value is OAEP. The maximum byte lengths for the padding input value are: PKCS1: < b-11, OAEP: < b-41, None: < b\n@param propertiesTable.Mode {String} - Block mode. The possible values are ECB and None.\n@param propertiesTable.Digest {String} - The hash algorithm to be used. The possible values are SHA-1, SHA-256, SHA-224, SHA-384 and SHA-512.\n@return {Boolean} - Status of the key value generation.\n@Available Android, Windows10, WindowsDesktop",
                "!type": "fn(propertiesTable: ?) -> bool"
            },
            "generateSecureRandom": {
                "!doc": "This API is used to generate cryptographically secure random numbers.\n@param propertiesTable {Object} - (Mandatory) A key-value pair that you can use to send the type and size of the key, in order to generate secure random cryptographic numbers\n@param propertiesTable.type {String} - The possible values for the type key are 'bytes' and 'Base64'.\n@param propertiesTable.size {Number} - The length of the generated randomkey.\n@return {Object} - Secure random key of the bytes array or Base64 string of the specified length.\n@Available Android, iOS, Windows10, WindowsDesktop",
                "!type": "fn(propertiesTable: ?) -> ?"
            },
            "newKey": {
                "!doc": "This API allows you to create a key for cryptography using the specified algorithm. The key created using this API is used for encrypting clear text and decrypting the encrypted data.\n@param algo {String} Scheme using which the key is to be created. Possible values are: securerandom - uses a secure random number as the scheme to generate an unique key. random - uses a random number as the scheme to generate an unique key. passphrase - for this scheme, you need to pass the exact passphrase using which the key needs to be generated. The passphrase scheme always produces the same key for the same passphrase text. <b>Mandatory</b>\n@param keystrength {Number} Is number of bits that indicate the key strength. For the aes subalgo - possible values are 128, 192, 256. For the tripledes subalgo - possible values are 192. <b>Mandatory</b>\n@param propertiesTable {Object} passphrasetext {Array of Strings}- the exact passphrase using which the key needs to be generated if the scheme is passphrase. passphrasetext is a string of array that contains strings(//repeated text with same meaning). For subalgo aes, it contains a single string (passphrasetext = {\"inputstring1\"}), whereas for tripledes subalgo, it contains three strings (passphrasetext = {\"inputstring1\",\"inputstring2\",\"inputstring3\"}). passphrasehashlogo - hashing algorithm to be applied for the passphrase text. (applicable only on iPhone).Possible values for the hash algorithm are: o md2,md4, and md5 for key strength of 128 and sha2 for key strength of 256 <b>Mandatory</b>\n@returns userdata {Object} The key that is created using the specified algorithm.\n@Available All Platforms\n@usage <pre>var myEncryptionKey = kony.crypto.newKey(\"random\",128,{subalgo=\"aes\"});</pre>",
                "!type": "fn(algo: ?, keystrength: ?, propertiesTable: ?)"
            },
            "readKey": {
                "!doc": "This API provides you the ability to read the key from the device store.\n@param uniqueID {String} Unique ID represents the key on the device store (this is the ID returned by kony.crypto.saveKey API). <b>Mandatory</b>\n@returns {rawbytes} – Object This key is generated using aes, tripledes, or RSA algorithms and saved on the device store.\n@Available All Platforms\n@usage <pre>var EncryptDecryptKey = kony.crypto.newKey(\"passphrase\", 128,\n    {passphrasetext={\"inputstring1\"}, subalgo=\"aes\",\n    passphrasehashalgo=\"md5\"});\n    myUniqueIDKey = kony.crypto.saveKey(\"myKey\",EncryptDecryptKey);\n    var myCryptoKey = kony.crypto.readKey(myUniqueIDKey);\n    myCryptoKey will hold the same key as EncryptDecryptKey</pre>",
                "!type": "fn(uniqueID: ?) -> ?"
            },
            "retrieveAsymmetricPublicKey": {
                "!doc": "This API returns the Public key for the alias that you provide.\n@param alias {String} - The alias value generated by using generateAsymmetricKeyPair API.\n@return {String} - Public part of the asymmetric key-pair for the provided alias.\n@Available Android, Windows10, WindowsDesktop",
                "!type": "fn(alias: ?) -> string"
            },
            "retrievePublicKey": {
                "!doc": "This API provides the ability to extract the public key from a base64 string of encoded X509 certificate or a locally packaged X509 certificate.\n@param algo {String} The algorithm used for the public key. Possible value is: RSA <b>Mandatory</b>\n@param inputsource {String} This parameter indicates the name of the Input source certificate from which the key needs to retrieved. <b>Mandatory</b>\n@param islocalresource {boolean} This flag defines how the inputsource string needs to be interpreted. <b>Mandatory</b> a. islocalresource is false - represents that the input source is base64 string of X509 certificate. b. islocalresource is true - represents that the input source is name of the local resource for the certificate. For example, public.cer.\n@returns userdata {Object} The public key extracted from the certificate.\n@Available All Platforms\n@usage <pre>var myKey = kony.crypto.retrievePublicKey(\"rsa\",\"public.cer\",true);</pre>",
                "!type": "fn(algo: ?, inputsource: ?, islocalresource: ?)"
            },
            "saveKey": {
                "!doc": "This API allows you to save the generated key on the device store. If a key does not exist with the given name, the API creates a key; if a key exists with the given name, the API updates the same. The key is saved and a unique identifier is returned.\n@param name {String} Unique name with which you want to save the key on the device store. <b>Mandatory</b>\n@param key {Object} The key that you want to save on the device. <b>Mandatory</b>\n@returns {String} The unique ID represents the saved key on the device store. we can access the key from the device store using this unique ID.\n@Available All Platforms\n@usage <pre>myuniqueID = kony.crypto.saveKey(\"myKey\",EncryptDecryptKey);</pre>",
                "!type": "fn(name: ?, key: ?) -> string"
            }
        },
        "db": {
            "!doc": "DB API's",
            "changeVersion": "fn(oldVersion: ?, newVersion: ?, SQLTransactionCallback: ?, SQLTransactionErrorCallback: ?, SQLTransactionVoidCallback: ?)",
            "executeSql": {
                "!doc": "This API allows you to execute a specified SQL statement on the given database. This is an asynchronous API.\n        @param transactionId {String}   Specifies the unique ID of the transaction. <b>Mandatory</b>\n        @param SQLStatement {String}    Specifies the SQL statement that must be executed. <b>Mandatory</b>\n        @param arg  {Object}    Specifies the arguments for executing the SQL statement. If this parameter is not specified or is nil, then the statement is executed without any arguments.\n        @param SQLStatementSuccessCallback {Function}   Specifies the callback function that must be executed when the execution of the SQL statement is a success. <b>Optional</b>\n        @param SQLStatementErrorCallback{Function}  Specifies the callback function that must be executed when the execution of the SQL statement is a failure. <b>Optional</b>\n        @Available iPhone,Android, BB,SPA,iPad\n        @usage <pre>var dbName=\"konytestDB\";<br/>\nvar version=\"1.0\";<br/>\nvar displayName=\"demo web SQL Database\";<br/>\nvar estimatedSize=5*1024*1024;<br/>\n//5*1024*1024 indicates 5 MB<br/>\nvar databaseObjectId = kony.db.openDatabase(dbName,version, displayname, estimatedSize);<br/>\n//databaseObjectId contains the unique ID of the database<br/>\n function sql_success(transactionId, resultset)<br/>\n{\n    //logic to process the resultset<br/>\n}\n function sql_errorcallback(err)<br/>\n{\n    print(\"Error processing sql statement error code=\" + err[\"code\"]);<br/>\n}\n function myTransactionCallback(dbId)<br/>\n{\n    //SQLTransaction contains implementation of executeSql method<br/>\n    // invoke kony.db.executesql method for sql trasaction<br/>\n    var sqlStatement = \"SELECT FROM employee\";<br/>\n    kony.db.executeSql(dbId, sqlStatement, null, sql_success, sql_errorcallback);<br/>\n}\n\nfunction myTransactionErrorCallback(SQLError)<br/>\n{\n    // proceed with the logic<br/>\n}\n\nfunction mySuccessCallback()<br/>\n{\n    // proceed with the logic<br/>\n}\nkony.db.transaction(databaseObjectId, myTransactionCallback, myTransactionErrorCallback, mySuccessCallback);</pre>",
                "!type": "fn(transactionId: ?, SQLStatement: ?, arg: ?, SQLStatementSuccessCallback: ?, SQLStatementErrorCallback: ?)"
            },
            "openDatabase": {
                "!doc": "This API allows you to open the specified version of a particular database. This is an asynchronous APIs.\n        @param name {String}    Specifies the actual name of the database that you want to open. <b>Mandatory</b>\n        @param version {String} Specifies the version of the database that you want to open. <b>Mandatory</b>\n        @param displayName{String}  Specifies the display name of the database that you want to open. <b>Mandatory</b>\n        @param estimatedsize{Number}    Specifies the approximate size of the database in bytes. Applicable on SPA. <b>Optional</b>\n        @returns    {String}    Returns the unique ID of the database\n        @Available iPhone,Android, BB, MobileWeb advanced, SPA,iPad\n        @usage <pre>var dbName=\"konytestDB\";<br/>\nvar version=\"1.0\";<br/>\nvar displayName=\"demo web SQL Database\";<br/>\nvar estimatedSize=5*1024*1024;<br/>\n//5*1024*1024 indicates 5 MB<br/>\nvar databaseObjectId = kony.db.openDatabase(dbName,version, displayname, estimatedSize);<br/>\ndatabaseObjectId contains the unique ID of the database</pre>",
                "!type": "fn(name: ?, version: ?, displayName: ?, estimatedsize: ?) -> string"
            },
            "readTransaction": {
                "!doc": "This API allows you to read a specified transaction. This API creates a SQLTransaction object for read-only transactions.\n        @param dbaseObjectId {String}   Specifies the unique ID of the database <b>Mandatory</b>\n        @param TransactionCallback {Function}   Specifies the callback function that contains the transactions. <b>Mandatory</b>\n        @param TransactionErrorCallback{Function}   Specifies the callback that must be executed if there is an error in executing the transaction. This callback function is used to roll back the updates to the database. <b>Optional</b>\n        @param SuccessCallback {Function}   Specifies the callback that must be executed if the transaction is successful. <b>Optional</b>\n        @Available iPhone,Android, BB,SPA,iPad\n        @usage <pre>var dbName=\"konytestDB\";<br/>\nvar version=\"1.0\";<br/>\nvar displayName=\"demo web SQL Database\";<br/>\nvar estimatedSize=5*1024*1024;<br/>\n//5*1024*1024 indicates 5 MB<br/>\nvar databaseObjectId = kony.db.openDatabase(dbName,version, displayname, estimatedSize);<br/>\n//databaseObjectId contains the unique ID of the database<br/>\nfunction myTransactionCallback(dbId)<br/>\n{\n    //SQLTransaction contains implementation of executeSql method   <br/>\n    // invoke kony.db.executesql method for sql trasaction<br/>\n}\nfunction myTransactionErrorCallback(SQLError) <br/>\n{\n    // proceed with the logic<br/>\n}\nfunction mySuccessCallback()<br/>\n{\n    // proceed with the logic <br/>\n}\nkony.db.readTransaction(databaseObjectId, myTransactionCallback, myTransactionErrorCallback, mySuccessCallback);</pre>",
                "!type": "fn(dbaseObjectId: ?, TransactionCallback: ?, TransactionErrorCallback: ?, SuccessCallback: ?)"
            },
            "sqlResultsetRowItem": {
                "!doc": "This API returns the row available at the specified index. If there is no such row, then the API returns nil.\n        @param  transactionID{String}   Specifies the unique ID of the transaction. <b> Mandatory</b>\n        @param  SQLResultSet{Array} Specifies the name of the SQL result set. <b> Mandatory</b>\n        @param  index{Number}   Specifies the index from which the row is to be retrieved. <b> Mandatory</b>\n        @returns    {String|Null}   <ul><li>Returns the row item at the specified index</li><li>Returns null if there is no row available at the specified index.</li></ul>\n        @usage <pre>function sql_success(transactionId, resultset)<br/>\n{\n//logic to process the resultset<br/>\nfor (var i=0; i<resultset.length;i++)<br/>\n{\n    var rowItem = Kony.db.sqlResultsetRowItem(transactionId,resultset,i);<br/>\n    print(\"empID:\" + rowItem[\"empID\"] + \" empName:\" + rowItem[\"empName\"] + \" depID:\" + rowItem[\"depName\"]);<br/>\n}\n}</pre>",
                "!type": "fn(transactionID: ?, SQLResultSet: ?, index: ?) -> string"
            },
            "transaction": {
                "!doc": "This API allows you to execute the specified transaction on the given database. When you invoke this API, it returns immediately and asynchronously executes the transaction.\n        @param dbaseObjectId {String}   Specifies the unique ID of the database <b>Mandatory</b>\n        @param TransactionCallback {Function}   Specifies the callback function that contains the transactions. <b>Mandatory</b>\n        @param TransactionErrorCallback{Function}   Specifies the callback that must be executed if there is an error in executing the transaction. This callback function is used to roll back the updates to the database. <b>Optional</b>\n        @param SuccessCallback {Function}   Specifies the callback that must be executed if the transaction is successful. <b>Optional</b>\n        @Available iPhone,Android, BB,SPA,iPad\n        @usage <pre>var dbName=\"konytestDB\";<br/>\nvar version=\"1.0\";<br/>\nvar displayName=\"demo web SQL Database\";<br/>\nvar estimatedSize=5*1024*1024;<br/>\n//5*1024*1024 indicates 5 MB<br/>\nvar databaseObjectId = kony.db.openDatabase(dbName,version, displayname, estimatedSize);<br/>\n//databaseObjectId contains the unique ID of the database<br/>\nfunction myTransactionCallback(dbId)<br/>\n{\n    //SQLTransaction contains implementation of executeSql method<br/>\n    // invoke kony.db.executesql method for sql trasaction  <br/>\n}\nfunction myTransactionErrorCallback(SQLError)   <br/>\n{\n    // proceed with the logic<br/>\n}\nfunction mySuccessCallback() <br/>\n{\n// proceed with the logic<br/>\n}\nkony.db.transaction(databaseObjectId, myTransactionCallback, myTransactionErrorCallback, mySuccessCallback);</pre>",
                "!type": "fn(dbaseObjectId: ?, TransactionCallback: ?, TransactionErrorCallback: ?, SuccessCallback: ?)"
            }
        },
        "flex": {
            "ALIGN_CHILD_BOTTOM_TO_TOP": "number",
            "ALIGN_CHILD_LEFT_TO_RIGHT": "number",
            "ALIGN_CHILD_RIGHT_TO_LEFT": "number",
            "ALIGN_CHILD_TOP_TO_BOTTOM": "number",
            "AUTOGROW_CHILD_PERCENT_HEIGHT_DEFAULT_VALUE": "string",
            "AUTOGROW_HEIGHT": "number",
            "AUTOGROW_NONE": "number",
            "DEFAULT_UNIT": "string",
            "DP": "string",
            "FLOW_HORIZONTAL": "number",
            "FLOW_VERTICAL": "number",
            "FREE_FORM": "number",
            "PERCENTAGE": "string",
            "PX": "string",
            "SCROLL_BOTH": "number",
            "SCROLL_HORIZONTAL": "number",
            "SCROLL_NONE": "number",
            "SCROLL_VERTICAL": "number",
            "USE_AVAILABLE_SPACE": "string",
            "USE_PREFERRED_SIZE": "string",
            "VBOX_LAYOUT": "number"
        },
        "forcetouch": {
            "!doc": "@class kony.forcetouch",
            "PREVIEW_ACTION_STYLE_DEFAULT": {
                "!doc": "Value of preview action style",
                "!type": "string"
            },
            "PREVIEW_ACTION_STYLE_DESTRUCTIVE": "string",
            "PREVIEW_ACTION_STYLE_SELECTED": "string",
            "PREVIEW_ACTION_TYPE_GROUP": "string",
            "PREVIEW_ACTION_TYPE_INDIVIDUAL": {
                "!doc": "Value of preview action type",
                "!type": "string"
            },
            "QUICK_ACTION_ICON_TYPE_ADD": "string",
            "QUICK_ACTION_ICON_TYPE_ALARM": "string",
            "QUICK_ACTION_ICON_TYPE_AUDIO": "string",
            "QUICK_ACTION_ICON_TYPE_BOOKMARK": "string",
            "QUICK_ACTION_ICON_TYPE_CAPTUREPHOTO": "string",
            "QUICK_ACTION_ICON_TYPE_CAPTUREVIDEO": "string",
            "QUICK_ACTION_ICON_TYPE_CLOUD": "string",
            "QUICK_ACTION_ICON_TYPE_COMPOSE": {
                "!doc": "@since 9.0",
                "!type": "string"
            },
            "QUICK_ACTION_ICON_TYPE_CONFIRMATION": "string",
            "QUICK_ACTION_ICON_TYPE_CONTACT": "string",
            "QUICK_ACTION_ICON_TYPE_DATE": "string",
            "QUICK_ACTION_ICON_TYPE_FAVORITE": "string",
            "QUICK_ACTION_ICON_TYPE_HOME": "string",
            "QUICK_ACTION_ICON_TYPE_INVITATION": "string",
            "QUICK_ACTION_ICON_TYPE_LOCATION": "string",
            "QUICK_ACTION_ICON_TYPE_LOVE": "string",
            "QUICK_ACTION_ICON_TYPE_MAIL": "string",
            "QUICK_ACTION_ICON_TYPE_MARKLOCATION": "string",
            "QUICK_ACTION_ICON_TYPE_MESSAGE": "string",
            "QUICK_ACTION_ICON_TYPE_PAUSE": "string",
            "QUICK_ACTION_ICON_TYPE_PLAY": "string",
            "QUICK_ACTION_ICON_TYPE_PROHIBIT": {
                "!doc": "@since 9.1",
                "!type": "string"
            },
            "QUICK_ACTION_ICON_TYPE_SEARCH": "string",
            "QUICK_ACTION_ICON_TYPE_SHARE": "string",
            "QUICK_ACTION_ICON_TYPE_SHUFFLE": "string",
            "QUICK_ACTION_ICON_TYPE_TASK": "string",
            "QUICK_ACTION_ICON_TYPE_TASKCOMPLETED": "string",
            "QUICK_ACTION_ICON_TYPE_TIME": "string",
            "QUICK_ACTION_ICON_TYPE_UPDATE": "string",
            "disableQuickActionItems": {
                "!doc": "This API disables pinned shortcuts that were previously enabled. If the target shortcuts are already disabled, this method does nothing.\nIt sets mentioned disabled message to all action items . On trying to launch disabled shortcut actionItem toast message  is shown to user. This method should strictly used for dynamic shortcut Action Items .\nPlease take care not to call the method with static quickAction Ids\n@param quickActionList {Object} An object of quickAction id\n@param disableMessage {String} Specifies the disableMessage\n@returns Void",
                "!type": "fn(quickActionList: ?, disableMessage: ?)"
            },
            "enableQuickActionItems": {
                "!doc": "This API helps to re-enable pinned shortcuts that were previously disabled. If the target shortcuts are already enabled, this method does nothing.\n@param quickActionId {Array} An array of quickAction id\n@returns Void",
                "!type": "fn(quickActionId: ?)"
            },
            "getPinnedQuickActionItems": {
                "!doc": "This API returns ID list of pinned Quick Action Items\n@returns {Array} An array of id strings",
                "!type": "fn() -> [?]"
            },
            "getQuickActionItems": {
                "!doc": "This API provides a way to get an array dynamic Quick Action Items that are already set to the app if any.\nNote: The returned dynamic quick action items wouldn't have icon key-value pair.\n@returns {Array} Returns an array of dynamic Quick Action items if any are set to the app. Otherwise, it returns an empty array.\n@usage <pre>\n    try {\n\n      var quickActionItems = kony.forcetouch.getQuickActionItems();\n      alert(JSON.stringify(quickActionItems));\n\n    } catch (args) {\n      alert(args.toString());\n    }\n</pre>",
                "!type": "fn() -> [?]"
            },
            "getStaticQuickActionItems": {
                "!doc": "This API returns ID list of immutable or static Quick Action items\n@returns {Array} An array of id strings",
                "!type": "fn() -> [?]"
            },
            "removeQuickActionItems": {
                "!doc": "This API removes specified  dynamic quick action items created, expected array as string id values\n@param id {Array} An array or list  of quickNotification Id <b>Optional</b>",
                "!type": "fn(id: ?)"
            },
            "setQuickActionItems": {
                "!doc": "This API allows to set dynamic Quick Action Items to the app.\nNote : To localize the title, sub title for a Home screen dynamic quick action, employ the kony internalization API’s.\n@param {Array} quickActionItems - Mandatory, Array of Quick Action items\n@return {Boolean} true if atleast one action is added successfully. Otherwise, it returns false\n@usage <pre>\n    [{\n      \"id\": \"com.kony.first\",\n      \"title\": \"firstPage\",\n      \"subtitle\": \"takes to first page\",\n      \"icon\": kony.forcetouch.QUICK_ACTION_ICON_TYPE_COMPOSE,\n      \"info\": {\n          \"feed\": \"feed to first form\"\n      }\n   },\n      {\n      \"id\": \"com.kony.second\",\n      \"title\": \"secondPage\",\n      \"subtitle\": \"takes to second page\",\n      \"icon\": kony.forcetouch.QUICK_ACTION_ICON_TYPE_HOME,\n      \"info\": {\n          \"feed\": \"feed to second form\"\n      }\n   }]\n</pre>",
                "!type": "fn(quickActionItems: [?]) -> bool"
            }
        },
        "getError": {
            "!doc": "This API uses the handle to the error object and returns the actual error object.\n        @param error{Object|Handle} The input parameters of this API is either the Original Error object or a handle received in try/catch block.<b>Mandatory</b>\n        @returns {Object}   Returns the JS error object.\n        @Available All Platforms\n        @usage <pre>try\n\n{\n\n….\n\n}\n\ncatch ( e )\n\n{\n\nvar err = kony.getError(e);\n\nif (err instanceof KonyError)\n\nalert(“A Kony error”);\n\nelse (err instanceof EvalError)\n\nalert(“A JS Eval Eror”);\n\n}</pre>",
            "!type": "fn(error: ?) -> ?"
        },
        "hybrid": {
            "!doc": "Hybrid API's",
            "executeFunctionInNativeContext": {
                "!doc": "This API provides the ability to send data from the browser widget execution context to native context.\n   @param Function{String} Specifies the function that needs to be executed<b>Mandatory</b>\n   @param paramsTable{Object} Specifies the list of parameters that the user defined function expects as input parameters.\n   @Available iPhone and Android\n   @access Write\n   @usage <pre>\n    //Defining executeFunctionInNativeContext\nfunction executeFunctionInNativeContext()\n{\n    kony.hybrid.executeFunctionInNativeContext(\"JSFunThree\",\n{\"KonySolutions\",false,{\"abc\",\"xyz\"}});\n\n}</pre>",
                "!type": "fn(Function: ?, paramsTable: ?)"
            },
            "executeFunctionInSPAContext": {
                "!doc": "This API provides the ability to send data from the native execution context to browser widget context.\n   @param Function{String} Specifies the function that needs to be executed<b>Mandatory</b>\n   @param paramsTable{Object} Specifies the list of parameters that the user defined function expects as input parameters.\n   @Available iPhone and Android\n   @access Write\n   @usage <pre>\n    function executeFunctionInSPAContext()\n{\n\n    kony.hybrid.executeFunctionInSPAContext(\"JSFunThree\",[\"KonyLabs\",2012,false]);</pre>\n}",
                "!type": "fn(Function: ?, paramsTable: ?)"
            },
            "executeFunctionInTCContext": {
                "!doc": "This API is used to exchange data with the server-side context.\n   @param Function{String} Specifies the function that needs to be executed<b>Mandatory</b>\n   @param paramsTable{Object} Specifies the list of parameters that the user defined function expects as input parameters.\n   @Available iPhone and Android\n   @access Write\n   @usage <pre>\n    function executeFunctionInTCContext()\n{\n\n    kony.hybrid.executeFunctionInTCContext(\"JSFunThree\",{\"KonySolutions\",\nfalse,{\"abc\",\"xyz\"}});\n}   </pre>",
                "!type": "fn(Function: ?, paramsTable: ?)"
            }
        },
        "i18n": {
            "!doc": "i18n API's",
            "deleteResourceBundle": {
                "!doc": "This API allows you to delete an existing resource bundle. If a resource bundle does not exist, the API will return without performing any operation.\n        @param  locale{String}  Specifies the locale for which the resource bundle needs to be deleted. <b>Mandatory</b>\n        @Available All Platforms\n        @usage <pre>// Method for delete the resource bundle --><br/>\nfunction deleteResourceBundle()<br/>\n{\n    try{<br/>\n    kony.i18n.deleteResourceBundle(\"en_US\");<br/>\n    alert(\" Resources bundle has been deleted.\");<br/>\n    }\n    catch(i18nError)<br/>\n    {\n    alert(\"Exception While getting deleteResourceBundle  : \"+i18nError );<br/>\n    }\n}</pre>",
                "!type": "fn(locale: ?)"
            },
            "getCurrentDeviceLocale": {
                "!doc": "This API provides you the ability to fetch the current locale of the device.\n        @returns {Object}  A table with the following key-value pairs is returned:language,country,name\n        @Available Android, Windows/Mango\n        @usage <pre>function getCurrentDeviceLocale()<br/>\n{\n    try<br/>\n    {\n        var locale =kony.i18n.getCurrentDeviceLocale();<br/>\n        alert(\"current device locale is \"+locale[0]);<br/>\n    }\n    catch(err)<br/>\n    {\n        alert(\"Exception in getCurrentDeviceLocale  : \"+err );<br/>\n    }\n}</pre>",
                "!type": "fn() -> ?"
            },
            "getCurrentLocale": {
                "!doc": "This API returns the locale (string) that is currently being used by the application to populate the localized data. This locale might be different than the system locale. The locale follows the format language_Country.For example, en_US. Country is not mandatory.\n        @returns {String}  The current locale that is being used by the application is returned.\n        @Available All Platforms\n        @usage <pre>// Method for getting current locale -->\nfunction getCurrentLocale()\n{\n    try{<br/>\n    var currentLocales = kony.i18n.getCurrentLocale();<br/>\n    alert(\"CurrentLocale :\"+currentLocales); <br/>\n    }\n    catch(i18nError)<br/>\n    {\n    alert(\"Exception While getting currentLocale  : \"+i18nError );<br/>\n    }\n}</pre>",
                "!type": "fn() -> string"
            },
            "getLocalizedString": {
                "!doc": "This API returns the localized string that corresponds to the specified i18n Key.\n        @param  i18nkey{String} Specifies the internationalization key for which the localized string needs to be returned. <b>Mandatory</b>\n        @returns    {String}    Returns the localized string that corresponds to the specified i18n Key.\n        @Available All Platforms\n        @usage <pre>// Method for getLocalizedString --><br/>\nfunction getLocalizedString()<br/>\n{\n    try{<br/>\n    var currentLocales = kony.i18n.getLocalizedString(\"1\");<br/>\n    var currentLocales1 = kony.i18n.getLocalizedString(\"2\");<br/>\n    alert(\" LocalizedString Method called :\"+currentLocales+\" \"+currentLocales1); <br/>\n    }\n    catch(i18nError)<br/>\n    {\n    alert(\"Exception While getting localizedString  : \"+i18nError );<br/>\n    }\n}</pre>",
                "!type": "fn(locale: ?) -> string"
            },
            "getSupportedLocales": {
                "!doc": "This API provides you the ability to retrieve a list of all the supported locales of the device.\n       @returns {Object}  A table with the following key-value pairs is returned:language,country,name\n       @Available All Platforms\n       @usage <pre>function getSupportedLocales()<br/>\n{\n   try<br/>\n   {\n       var locales =kony.i18n.getSupportedLocales();<br/>\n       for(var i=1;i<locales.length;i++)<br/>\n       {\n          alert(\"locale is \"+locales[i].name);<br/>\n       }\n\n        }\n   catch(err)<br/>\n   {\n       alert(\"Exception in getSupportedLocales  : \"+err );<br/>\n   }\n}</pre>",
                "!type": "fn() -> ?"
            },
            "isLocaleSupportedByDevice": {
                "!doc": "This API enables you to verify whether a locale is supported by a device.\n        @param  locale{String}  Specifies the locale that must be verified if it is supported by the device.Locale must be in one of the following formats:language_countryCode, language. <b>Mandatory</b>\n        @returns    {Boolean}   Specifies whether a resource bundle exists for a given locale.\n        @Available All Platforms\n        @usage <pre>// Method for checking the resources bundle present or not--><br/>\nfunction isResourceBundlePresent()<br/>\n{\n    try{<br/>\n    var exists = kony.i18n.isResourceBundlePresent(\"en_US\");<br/>\n    alert(\"isResourceBundlePresent :\"+exists);<br/>\n    }\n    catch(i18nError)<br/>\n    {\n    alert(\"Exception While getting isResourceBundlePresent  : \"+i18nError );<br/>\n    }\n}</pre>",
                "!type": "fn(locale: ?) -> bool"
            },
            "isResourceBundlePresent": {
                "!doc": "This API allows you to append new key value pairs to the given resource bundle for a specified locale. The key-value pairs you provide will be appended at the end of the resource bundle.If no resource bundle exists for the specified locale, a new resource bundle is created.\n        @param  locale{String}  Specifies the locale for which the resource bundle is checked. <b>Mandatory</b>\n        @returns    {Boolean}   Specifies whether a resource bundle exists for a given locale.\n        @Available All Platforms\n        @usage <pre>// Method for checking the resources bundle present or not--><br/>\nfunction isResourceBundlePresent()<br/>\n{\n    try{<br/>\n    var exists = kony.i18n.isResourceBundlePresent(\"en_US\");<br/>\n    alert(\"isResourceBundlePresent :\"+exists);<br/>\n    }\n    catch(i18nError)<br/>\n    {\n    alert(\"Exception While getting isResourceBundlePresent  : \"+i18nError );<br/>\n    }\n}</pre>",
                "!type": "fn(locale: ?) -> bool"
            },
            "setCurrentLocaleAsync": {
                "!doc": "This API allows you to set the specified locale as the default locale for the application. You can also set the default locale from the IDE. However, this API allows you to perform that task programmatically.\n        @param  localename{String}  Specifies the locale that must be set as the current locale of the application. <b>Mandatory</b>\n        @param  onsuccesscallback{Function} onsuccess callback will be called by the platform after a locale is set successfully as the current locale. <b>Mandatory</b>\n        @param  onfailurecallback{Function} onfailure callback will be called by the platform if the locale is not set successfully. <b>Mandatory</b>\n        @param  info{Object}    A JavaScript object consisting of key value pairs. If info parameter is specified, it is is passed to the callback function as a last parameter. If the info parameter is not specified, the callback function receives the info as null. \"Info\" is basically a user data where in the application developers will pass it to the async API's and the platform returns this info object to the corresponding async callback. <b>Optional</b>\n        @Available All Platforms\n        @usage <pre>function setCurrentLocaleAsync()<br/>\n{\n    try<br/>\n    {\n        kony.i18n.setCurrentLocaleAsync(\"en_GB\", onsuccesscallback, onfailurecallback);<br/>\n        alert(\"current locale is set to \"+kony.i18n.getCurrentLocale());<br/>\n    }\n    catch(err)<br/>\n    {\n        alert(\"Exception in setCurrentLocaleAsync  : \"+err );<br/>\n    }\n}</pre>",
                "!type": "fn(localename: ?, onsuccesscallback: ?, onfailurecallback: ?, info: ?)"
            },
            "setDefaultLocaleAsync": {
                "!doc": "This API allows you to set the specified locale as the default locale for the application. You can also set the default locale from the IDE. However, this API allows you to perform that task programmatically.\n        @param  localename{String}  Specifies the locale that must be set as the default locale of the application. <b>Mandatory</b>\n        @param  onsuccesscallback{Function} onsuccess callback will be called by the platform after successfully setting the specified locale as default. <b>Mandatory</b>\n        @param  onfailurecallback{Function} onfailure callback will be called by the platform if the locale is not set successfully. <b>Mandatory</b>\n        @param  info{Object}    A JavaScript object consisting of key value pairs. If info parameter is specified, it is is passed to the callback function as a last parameter. If the info parameter is not specified, the callback function receives the info as null. \"Info\" is basically a user data where in the application developers will pass it to the async API's and the platform returns this info object to the corresponding async callback. <b>Optional</b>\n        @Available All Platforms\n        @usage <pre>function setDefaultLocaleAsync()<br/>\n{\n    try<br/>\n    {\n        kony.i18n.setDefaultLocaleAsync(\"en_US\", onsuccesscallback, onfailurecallback);<br/>\n        alert(\"current locale is set to \"+kony.i18n.getCurrentLocale());<br/>\n\n    }\n    catch(err)<br/>\n    {\n        alert(\"Exception in setDefaultLocaleAsync  : \"+err );<br/>\n    }\n }</pre>",
                "!type": "fn(localename: ?, onsuccesscallback: ?, onfailurecallback: ?, info: ?)"
            },
            "setResourceBundle": {
                "!doc": "This API provides you the ability to retrieve a list of all the supported locales of the device.\n        @param  inputtable{Object}  Specifies the resource bundle that needs to be set for the given locale. <b>Mandatory</b>\n        @param  locale{String}  Specifies the locale for which the resource bundle needs to be set. <b>Mandatory</b>\n        @Available All Platforms\n        @usage <pre>function setResourceBundle()<br/>\n{\n   try{<br/>\n         kony.i18n.setResourceBundle({btn1:\"First Name\",btn2:\"Last Name\"}, \"en_US\")<br/>\n             alert(\" Set \");<br/>\n                 }\n                 catch(i18nError)<br/>\n                 {\n                    alert(\"Exception While getting setResourceBundle  : \"+i18nError );<br/>\n                 }\n}</pre>",
                "!type": "fn(inputtable: ?, locale: ?)"
            },
            "updateResourceBundle": {
                "!doc": "This API allows you to append new key value pairs to the given resource bundle for a specified locale. The key-value pairs you provide will be appended at the end of the resource bundle.If no resource bundle exists for the specified locale, a new resource bundle is created.\n        @param  inputtable{Object}  Specifies the resource bundle that needs to be set for the given locale. <b>Mandatory</b>\n        @param  locale{String}  Specifies the locale for which the resource bundle needs to be updated with the given values. <b>Mandatory</b>\n        @Available All Platforms\n        @usage <pre>function updateResourceBundle()<br/>\n{\n    try{<br/>\n    kony.i18n.updateResourceBundle({1:\"John\",2:\"Jack\",3:\"Tom\"}, \"en_US\")<br/>\n    alert(\" Updated \");<br/>\n    }\n    catch(i18nError)<br/>\n    {\n    alert(\"Exception While getting updateResourceBundle  : \"+i18nError );<br/>\n    }<br/>\n}</pre>",
                "!type": "fn(inputtable: ?, locale: ?)"
            }
        },
        "image": {
            "!doc": "Image API's.",
            "ENCODE_JPEG": {
                "!doc": "The bitmap is in JPEG format.",
                "!type": "string"
            },
            "ENCODE_PNG": {
                "!doc": "The bitmap is in PNG format.",
                "!type": "string"
            },
            "createImage": {
                "!doc": "Creates an Image. This function has three overloads.\n The param could be image as RawBytes or a bundledImageFileName or an Image widget.\n@param rawBytes A RawBytes object containing the image's bitmap.<b>Mandatory</b>\n@returns This function returns an image object with its associated bitmap.\n@Available Available on all platforms.\n@access Write",
                "!type": "fn(rawBytes: ?) -> kony.image.createImage.!ret"
            },
            "createImageFromSnapShot": {
                "!doc": "Creates an Image by taking a snapshot of a widget.\n@param widget The widget that this function takes a snapshot of. The snapshot is used for the bitmap of the Image created by the function.<b>Mandatory</b>\n@returns This function returns an Image that contains a snapshot of the widget passed in through the widget parameter.\n@Available Available on all platforms.\n@access Write",
                "!type": "fn(widget: ?) -> kony.image.createImage.!ret"
            },
            "cropImageInTiles": {
                "!doc": "Crops the bitmap in an Image object and returns it as an array of tiles.\n@param image The Image widget containing the bitmap to be cropped.<b>Mandatory</b>\n@param xTiles The number of equally-sized tiles that can be created in the x direction.<b>Mandatory</b>\n@param yTiles The number of equally-sized tiles that can be created in the y direction.<b>Mandatory</b>\n@returns This function returns an array of Image widgets that were created from tiles of the bitmap in the Image widget in the image parameter.\n@Available Available on all platforms.\n@access Write",
                "!type": "fn(image: ?, xTiles: ?, yTiles: ?)"
            },
            "cropImageInTilesForRects": {
                "!doc": "Crops portions of an Image widget's bitmap to a set of rectangles and returns an array of Image widgets containing the cropped bitmaps.\n@param image An Image widget containing the bitmap to be cropped.<b>Mandatory</b>\n@param rects An array of rectangles specified as the (x,y) coordinates of the upper left corner and the height and width of the rectangle. Format: [ [x,y,w,h],[x1,y1,w1,h1],... ]<b>Mandatory</b>\n@returns This function returns an array of Image widgets that contain the bitmap information from the bitmap in the Image widget passed through the image parameter.\n@Available Available on all platforms.\n@access Write",
                "!type": "fn(image: ?, rects: ?)"
            },
            "findImageInGallery": {
                "!doc": " Finds image within a gallery. Note1: In case of IOS,  this api searches the image in the Gallery with the imageName is a unique identifier. Note2: In case of Android & Windows If album name is provided it will search for the given file in the specific album, if not it will search in Pictures gallery. Hence album name is not mandatory.\n@param {Object} config - Mandatory, config is a mandatory argument which is a dictionary with configurable properties.\n@param {String} config.albumName - optional, A String containing the album name to search for the specified image exist or not. Note:  In case of IOS, image names are uniqueidentifiers to identify the image, this argument will be ignored.\n@throws Error if the value of the albumName key is not of the string type, throw the exception with errorcode as 100 with the message \"Invalid argument\".\n@param {String} config.imageName - Mandatory, A string containing the file name with the extension of the bitmap to use for the image.\n@throws Error: if the value of the imageName key is not of the string type, throw the exception with errorcode as 100 with the message \"Invalid argument\".\n@returns {kony.types.RawBytes} - This api return RawBytes of image if exist or null, doesn't exist.",
                "!type": "fn(config: ?) -> kony.types.RawBytes"
            }
        },
        "io": {
            "!doc": "IO API's",
            "File": {
                "copyTo": {
                    "!doc": "Copies a file to the given destination path.\n@param Path{String}  path to the destination directory.<b>Mandatory</b>\n@param newName{String}  New name of the file/directory.<b>Optional</b>\n@returns {Null}\n@Available  iOS, Android, and Windows platforms",
                    "!type": "fn(Path: ?, newName: ?)"
                },
                "createDirectory": {
                    "!doc": "Creates a directory on the file system represented by this file object.\n@returns {Boolean}\n@Available  iOS, Android, and Windows platforms",
                    "!type": "fn() -> bool"
                },
                "createFile": {
                    "!doc": "Creates a file on the file system represented by this file object.\n@returns {Boolean}\n@Available  iOS, Android, and Windows platforms",
                    "!type": "fn() -> bool"
                },
                "exists": {
                    "!doc": "The exist API checks, if the file or directory exists on the file system represented by this file object.\n@returns {Boolean}\n@Available  iOS, Android, and Windows platforms",
                    "!type": "fn() -> bool"
                },
                "getFilesList": {
                    "!doc": "The getFilesList API returns kony.io.FileList object representing the files and directories available under this file object directory.\n@returns kony.io.FileList{Object} FileList object or null if this File is not identified as a directory.\n@Available  iOS, Android, and Windows platforms",
                    "!type": "fn()"
                },
                "isDirectory": {
                    "!doc": "The isDirectory API checks, if this object represents a directory file on the file system.\n@returns {Boolean}\n@Available  iOS, Android, and Windows platforms",
                    "!type": "fn() -> bool"
                },
                "isFile": {
                    "!doc": "The isFile API checks, if this object represents a typical file on the file system but not a directory.\n@returns {Boolean}\n@Available  iOS, Android, and Windows platforms",
                    "!type": "fn() -> bool"
                },
                "moveTo": {
                    "!doc": "Moves a file to the given destination path.\n@param Path{String}  path to the destination directory.<b>Mandatory</b>\n@param newName{String}  New name of the file/directory.<b>Optional</b>\n@returns {Null}\n@Available  iOS, Android, and Windows platforms",
                    "!type": "fn(Path: ?, newName: ?)"
                },
                "read": {
                    "!doc": "The read API returns the kony.types.RawBytes of this file.\n@returns kony.types.RawBytes{RawBytes} Rawbytes representing the content of the file. Returns null in case of non existent file.\n@Available  iOS, Android, and Windows platforms",
                    "!type": "fn()"
                },
                "readAsText": {
                    "!doc": "The readAsText API returns the data as text represented by this rawBytes . Returns null if this represents a binary.\n@param Index  Index in the FileList.<b>Mandatory</b>\n@returns {String} Text available in this rawbytes.\n@Available  iOS, Android, and Windows platforms",
                    "!type": "fn() -> string"
                },
                "remove": {
                    "!doc": "Deletes a file or a directory.\n@param Boolean\n@param deleteRecursive Ignored in case of a file.<b>Optional</b>\n@Available  iOS, Android, and Windows platforms",
                    "!type": "fn(boolean: ?, deleteRecursive: ?)"
                },
                "rename": {
                    "!doc": "Renames a file or a directory\n@param newname{String}  New name for the file/directory.<b>Mandatory</b>\n@returns {Boolean}\n@Available  iOS, Android, and Windows platforms",
                    "!type": "fn(newname: ?) -> bool"
                },
                "write": {
                    "!doc": "The write API writes the given content into the file.\n@param Rawbytes/string  Data to write of type text string or kony.types.RawBytes.<b>Mandatory</b>\n@param Append {Boolean} True to append the data. Default is false, that means overrides the content.\n@returns {Boolean}\n@Available  iOS, Android, and Windows platforms",
                    "!type": "fn() -> bool"
                }
            },
            "FileList": {
                "item": {
                    "!doc": "The item API returns the File object at the specified index in the FileList.\n@param Index  Index in the FileList.<b>Mandatory</b>\n@returns File{Object} File object at specified index. Null if there is no File at specified index or if index is not in FileList range.\n@Available  iOS, Android, and Windows platforms",
                    "!type": "fn()"
                }
            },
            "FileSystem": {
                "browse": {
                    "!doc": "This API provides the ability to browse and select files from your local system.\n    @param browseConfig{String}  Configuration params which is a simple JSON object of key value pairs, that drive the possible options during the browse. <b>Mandatory</b>\n    @param browseCallBack{Object}  The callback is executed once the user closes the browse dialog. As part of call back, the platform provides the list of files that have been selected as an array of kony.io.FileSystem objects. The call back signature is as follows: browseCallBack (event, FileList[]). <b>Mandatory</b>\n    @returns {Null}\n    @Available Desktop Web\n    @usage <pre>\n    var config = {\n        selectMultipleFiles: true,\n        filter: [\"image/png\", \"image/jpeg\"]\n    };\n    var selectedFileCallback = function(event, filelist) {\n      //logic to iterate filelist\n    };\n   kony.io.FileSystem.browse(config, selectedFileCallback);\n</pre>",
                    "!type": "fn(browseConfig: ?, browseCallBack: ?)"
                },
                "copyBundledRawFileTo": {
                    "!doc": "Copies a bundled file from the application binary to the specified destination path on the device.\n    @param rawFileName{String}  specify the file name with the extension of a pre-bundled raw file that you want to copy. <b>Mandatory</b>\n    @param destFilePath{String}  specify the absolute file path along with the file name and extension (if any) where you want to copy the pre-bundled file. <b>Mandatory</b>\n    @Available Android, iOS, Windows\n    @usage <pre>//The destination file name can be different from the source.\ntry {\n    var destFilePath = kony.io.FileSystem.getDataDirectoryPath()+\"/Destinationfile.pdf\";\n    var destFile = new kony.io.File(destFilePath);\n    //copyBundledRawFileTo API overrides the destination file with new one.\n    //Hence check before copying\n    if(!destFile.exists()) {\n      var fileObj = kony.io.FileSystem.copyBundledRawFileTo(“Sourcefile.pdf”, destFilePath);\n    } else {\n      kony.print(\"File is already available\");\n    }\n} catch(e) {\n    kony.print(“Exception “+e);\n}</pre>",
                    "!type": "fn(rawFileName: ?, destFilePath: ?)"
                },
                "getDatabaseDirectoryPath": {
                    "!doc": "Returns the application's database directory path (from application's private file system) where kony.db APIs access the database files.\n    @returns Application's database directory path in the form of String.\n    @Available Android, iOS, Windows\n    @usage <pre>//Example for opening the pre-bundled database\nvar fileObj = null;\ntry {\n    var destFilePath = kony.io.FileSystem.getDatabaseDirectoryPath()+”test.db”;\n    var destFile = new kony.io.File(destFilePath);\n    //copyBundledRawFileTo API overrides the destination file with new one.\n    //Hence check before copying\n    if(!destFile.exists()) {\n      fileObj = kony.io.FileSystem.copyBundledRawFileTo(dbName, destFilePath);\n    } else {\n      fileObj = destFile;\n      kony.print(\"File is already available\");\n    }\n} catch(e) {\n    kony.print(“Exception “+e);\n  }\n  if(fileObj == null) {\n    kony.print(“Copy failed”);\n  } else {\n    kony.print(“Copy Success”);\n  }\nvar dbObject = kony.db.openDatabase(\"test.db\", \"1.0\", \"Prebundled SQL Database\", 5 * 1024 * 1024);\n</pre>",
                    "!type": "fn()"
                },
                "uploadFiles": {
                    "!doc": "When the developer invokes this API with the list of files, the  internally iterates through the fileList and makes the network call to the URL mentioned and uploads the files. The  assumes that the application using this API has the necessary server side infrastructure to handle the upload.\n    @param URL{String} Provide target location to upload the file. <b>Mandatory</b>\n    @param fileList{Object} Specifies the list of files to be uploaded. This is as an array of kony.io.FileSystem.file objects. <b>Mandatory</b>\n    @param uploadConfig{Object} Configuration parameters, which is a simple JSON object of key value pairs, that provides the possible options during the upload. Currently there are no keys. <b>Mandatory</b>\n    @param uploadCallBack{Function} The callback is invoked each time when the file is getting uploaded. The signature of the callback is as follows: uploadCallBack(URL, uploadStates). <b>Mandatory</b>\n    @returns {Null}\n    @Available Desktop Web\n    @usage <pre>function UploadBtn_onClick_seq0() { // Event on upload button click\n    var uploadURL = “http://10.10.4.17:8080/fileupload/upload”;\n    var filesQueue = [fileObject1, fileObject2]; //Array of File objects got in browse callback.\n    var uploadCallback = function(url, uploadState) {\n        //logic to process upload state\n    };\n   kony.io.FileSystem.uploadFiles(uploadURL, filesQueue, uploadCallBack);\n };\n</pre>",
                    "!type": "fn(URL: ?, fileList: ?, uploadCallBack: ?, uploadConfig: ?)"
                }
            }
        },
        "keychain": {
            "!doc": "iOs Keychain Api's",
            "remove": {
                "!doc": "Delete secure data from the keychain with the provided identifier.\n@param dictionary{Object} A Dictionary containing the identifier(identifier) (string). Identifier is required to uniquely identify the secure data.\n@returns {Array} Array containing the status code.\n@Available iOs\n@usage <pre>var cred = {\"identifier\":\"Apple\"};<br/>\nkony.keychain.remove(cred);\n</pre>",
                "!type": "fn() -> [?]"
            },
            "retrieve": {
                "!doc": "Retrieve secure data from the keychain with the provided identifier.\n@param dictionary{Object} A Dictionary containing the identifier(identifier) (string). Identifier is required to uniquely identify the secure data.\n@returns dictionary{Object} Dictionary containing the resulting secure data, account name, and the identifier (both string).\n@Available iOs\n@usage <pre>var cred = {\"identifier\":\"Apple\"};<br/>\nkony.keychain.retrieve(cred);\n</pre>",
                "!type": "fn()"
            },
            "save": {
                "!doc": "Save provided secure data to the keychain.\n@param dictionary{Object} A Dictionary of identifier(identifier), account name(secureaccount), and secure data(securedata) (all strings). Identifier and account name is required to uniquely identify the data.\n@returns {Number|Object} Error numbers, Error dictionary with errors identifying with account or password.\n@Available iOs\n@usage <pre>var cred = {\"securedata\":\"Appleseed\", \"secureaccount\":\"John\",\"identifier\":\"Apple\"};<br/>\nkony.keychain.save(cred);\n</pre>",
                "!type": "fn() -> number|?"
            }
        },
        "localAuthentication": {
            "!doc": "Local Authentication Event APIs",
            "authenticate": {
                "!doc": "The API is used to authenticate the user.\n    @param authenticationMode {Constant} Specifies the authentication mode for which the status is requested. <b>Mandatory</b>\n    @param statusCallBack {Function} A callback conveys the status of the authentication with appropriate status and message. <b>Mandatory</b>\n\t@param configMap {JSObject} Specifies the configuration dictionary for the specified authentication mode. <b>Mandatory</b>\n    @Available Android and iOS\n    @usage <pre>function statusCB(status,message)\n{\n  If(status == 5000)\n   {\n     kony.ui.Alert({message: \"AUTHENTICATION SUCCESSFULL\", alertType: constants.ALERT_TYPE_INFO, yesLabel:\"Close\"}, {});\n   }\n  else\n   {\n     var messg = status+message;\n     kony.ui.Alert({message: messg, alertType: constants.ALERT_TYPE_INFO, yesLabel:\"Close\"}, {});\n   }\n}\nfunction authUsingTouchID()\n{\n  var config = {\"promptMessage\" : \"PLEASE AUTHENTICATE USING YOUR TOUCH ID\"};\n  kony.localAuthentication.authenticate(constants.LOCAL_AUTHENTICATION_MODE_TOUCH_ID,statusCB,config);\n}</pre>",
                "!type": "fn(authenticationMode: ?, statusCallback: ?, configMap: ?)"
            },
            "cancelAuthentication": {
                "!doc": "The API cancels the current authentication process.\n    @returns status {Number} The 5002 status code is returned indicating the authentication is cancelled.\n    @Available Android\n    @usage <pre>var cancelButton = kony.ui.Button({onClick: btnOnClick});\nfuntction btnOnClick () {\nkony.localAuthentication.cancelAuthentication()\n}</pre>",
                "!type": "fn()"
            },
            "getStatusForAuthenticationMode": {
                "!doc": "The API returns the status of the authentication mode.\n    @param authenticationMode {Constant} Specifies the authentication mode for which the status is requested. <b>Mandatory</b>\n\t@returns status {Number} A status code is returned indicating the support for local authentication using Touch ID.\n\t@Available Android and iOS\n    @usage <pre>function isAuthUsingTouchSupported()\n{\n  var status = kony.localAuthentication.getStatusForAuthenticationMode(constants.LOCAL_AUTHENTICATION_ODE_TOUCH_ID);\n  if(status == 5000)\n   {\n     kony.ui.Alert({message: \"AUTHENTICATION BY TOUCHID SUPPORTED\", alertType: constants.ALERT_TYPE_INFO, yesLabel:\"Close\"}, {});\n   }\n  else\n   {\n     var msg = \"TOUCHID AUTHENTICATION RETURNED THE STATUS ::\"+status;\n     kony.ui.Alert({message: status, alertType: constants.ALERT_TYPE_INFO, yesLabel:\"Close\"}, {});\n   }\n}</pre>",
                "!type": "fn(authenticationMode: ?)"
            }
        },
        "location": {
            "!doc": "Location API's",
            "clearWatch": {
                "!doc": "When invoked, it must first check the value of the given watchID argument.\n@param watchID{Number}    Specifies number that uniquely identifies the watch. <b>Mandatory</b>\n@Available All platforms.\n@usage <pre>kony.location.clearWatch(watchID);</pre>",
                "!type": "fn(watchID: ?)"
            },
            "getCurrentPosition": {
                "!doc": "When invoked it must immediately return and then asynchronously attempt to obtain the current location of the device.\n     @param successcallback{Function}   Specifies the callback function that must be executed when the API call is successful. The signature of the callback function is successcallback(position) where position contains the coordinates of the geolocation that are created and returned by the API. <b>Mandatory</b>\n     @param errorcallback{Function} Specifies the callback function that must be executed when the API call fails. <b>Optional</b>\n     @param positionoptions{Object} Using this parameter, the user can customize the retrieval of the geolocation. <b>Optional</b>\n     @Available Available on all platforms except Windows 7 Kiosk and prior to IE8 releases.\n     @usage\n        <pre>function successcallback(position)<br/>\n{\n    var geoPosition = \"Latitude: \" + position.coords.latitude;\n    geoPosition = geoPosition + \" Longitude: \" + position.coords.longitude;\n    geoPosition = geoPosition + \" Altitude: \" + position.coords.altitude;\n    geoPosition = geoPosition + \" Accuracy: \" + position.coords.accuracy;\n    geoPosition = geoPosition + \" Altitude Accuracy: \"+ position.coords.altitudeAccuracy;\n    geoPosition = geoPosition + \" Heading: \" + position.coords.heading;\n    geoPosition = geoPosition + \" Speeding: \" + position.coords.speeding;\n    geoPosition = geoPosition + \" Timestamp: \" + position.timestamp;\n    alert(geoPosition);\n}\nfunction errorcallback(positionerror)<br/>\n{\n    var errorMesg = \"Error code: \" + positionerror.code;\n    errorMesg = errorMesg  + \" message: \" + positionerror.message;\n    alert(errorMesg);\n\n}\n\nvar positionoptions = {maximumage: 3000};<br/>\n// Options: retrieve the location every 3 seconds<br/>\nkony.location.getCurrentPosition(successcallback, errorcallback, positionoptions);<br/>\n\n</pre>",
                "!type": "fn(successcallback: ?, errorcallback: ?, positionoptions: ?)"
            },
            "watchPosition": {
                "!doc": "When invoked, it must immediately return a number that uniquely identifies a watch operation and then asynchronously start the watch operation.\n     @param successcallback{Function}   Specifies the callback function that must be executed when the API call is successful. The signature of\n                the callback function is successcallback(position) where position contains the coordinates of the\n                geolocation that are created and returned by the API. <b>Mandatory</b>\n     @param errorcallback{Function}     Specifies the callback function that must be executed when the API call fails. <b>Optional</b>\n     @param positionoptions{Object}     Using this parameter, the user can customize the retrieval of the geolocation. <b>Optional</b>\n     @Available All platforms.\n     @usage <pre>function successcallback1(position)<br/>\n{\n    lblTest.text = \"working with watchPosition success full call back\";<br/>\n    var geoPosition = \"Latitude: \" + position.coords.latitude;<br/>\n    geoPosition = geoPosition + \" Longitude: \" + position.coords.longitude;<br/>\n    geoPosition = geoPosition + \" Altitude: \" + position.coords.altitude;<br/>\n    geoPosition = geoPosition + \" Accuracy: \" + position.coords.accuracy;<br/>\n    geoPosition = geoPosition + \" Altitude Accuracy: \" + position.coords.altitudeAccuracy;<br/>\n    geoPosition = geoPosition + \" Heading: \" + position.coords.heading;<br/>\n    geoPosition = geoPosition + \" Speed: \" + position.coords.speed;<br/>\n    geoPosition = geoPosition + \" Timestamp: \" + position.timestamp;<br/>\n    alert(geoPosition);<br/>\n}\nfunction errorcallback1(positionerror)<br/>\n{\n    lblTest.text = \"working with watchPosition err call back\";<br/>\n    var errorMesg = \"Error code: \" + positionerror.code;<br/>\n    errorMesg = errorMesg  + \" message: \" + positionerror.message<br/>\n    alert(errorMesg);<br/>\n}\n\nvar positionoptions = {maximumage: 3000};<br/>\n// Options: retrieve the location every 3 seconds<br/>\nwatchID = kony.location.watchPosition (successcallback1, errorcallback1, positionoptions)</pre>",
                "!type": "fn(successcallback: ?, errorcallback: ?, positionoptions: ?)"
            }
        },
        "map": {
            "MAP_PROVIDER_GOOGLE": "string",
            "MAP_VIEW_MODE_NORMAL": "string",
            "MAP_VIEW_MODE_SATELLITE": "string",
            "MAP_VIEW_MODE_STREET": "string",
            "MAP_VIEW_MODE_TRAFFIC": "string",
            "PIN_IMG_ANCHOR_BOTTOM_CENTER": "string",
            "PIN_IMG_ANCHOR_BOTTOM_LEFT": "string",
            "PIN_IMG_ANCHOR_BOTTOM_RIGHT": "string",
            "PIN_IMG_ANCHOR_CENTER": "string",
            "PIN_IMG_ANCHOR_MIDDLE_LEFT": "string",
            "PIN_IMG_ANCHOR_MIDDLE_RIGHT": "string",
            "PIN_IMG_ANCHOR_TOP_CENTER": "string",
            "PIN_IMG_ANCHOR_TOP_LEFT": "string",
            "PIN_IMG_ANCHOR_TOP_RIGHT": "string",
            "PIN_IMG_SRC_TYPE_BASE64": "string",
            "PIN_IMG_SRC_TYPE_FILE_PATH": "string",
            "PIN_IMG_SRC_TYPE_IMAGE": "string",
            "PIN_IMG_SRC_TYPE_RAWBYTES": "string",
            "PIN_IMG_SRC_TYPE_RESOURCES": {
                "!doc": "constants",
                "!type": "string"
            },
            "PIN_IMG_SRC_TYPE_URL": "string",
            "ROUTE_SEARCH_INVALID_REQUEST": "string",
            "ROUTE_SEARCH_LIMIT_EXCEEDED": "string",
            "ROUTE_SEARCH_NETWORK_FAILURE": "string",
            "ROUTE_SEARCH_PLACE_NOT_FOUND": "string",
            "ROUTE_SEARCH_UNKNOWN_ERROR": "string",
            "SHAPE_TYPE_CIRCLE": "string",
            "SHAPE_TYPE_POLYGON": "string",
            "SHAPE_TYPE_POLYLINE": "string",
            "containsLocation": {
                "!doc": "This function tests to see whether a specified location is within a circle or polygon on a map or whether it lies along a polyline on a map.\n@param shapeType{Constant}Contains a Shape Type Constant that defines which kind of shape the location is being tested against.<b>Mandatory</b>\n@param location{String}Holds a location object which contains lat and lon values.<b>Mandatory</b>\n@param shapeData{Number}A key-value pair object that defines the shape using the following keys:\n   radius [Number]: Radius that is needed to define circle shape. This key is only valid of shapeType is Circle and ignored for other shapes.\n   tolerance [Number] [Android]: Specify tolerance in meters when user is interacting with Polyline or Polygon. Not applicable for other shapes.<b>Mandatory</b>\n@returns {Boolean}\n               * <ul><li>True if the location is within the circle or polygon, or if it lies along the polyline.</li></ul>\n@Available Available on Android and iOS.\n@access Write\n@usage  <pre>var shapeData = {\n   locations : [{lat:“17.451759”, lon:“78.380806”},{lat: “17.473305”, lon:”78.425191”}];\n   tolerance : 200;\n   };\n   var location = {lat: “17.427789”, lon:”78.451751”};\n   kony.map.containsLocation(kony.map.SHAPE_TYPE_POLYLINE,location, shapeData);     </pre>",
                "!type": "fn(shapeType: ?, location: ?, shapeData: ?) -> bool"
            },
            "decode": {
                "!doc": "This function enables apps to to decode the encoded polyline points which are provided in search route results. In Android, each step in the search results contains a key.\n@param encodedPolylinePoints{String}Hold a string containing the encoded polyline points.<b>Optional</b>\n@Available Available on Android only.\n@access Write\n@usage  <pre>boolean kony.map.decode(\n    encodedPolylinePoints);</pre>",
                "!type": "fn(encodedPolylinePoints: ?)"
            },
            "distanceBetween": {
                "!doc": "This function finds the linear distance between two locations on a map.\n@param location1{Object}Contains the first location to use.<b>Mandatory</b>\n@param location2{Object}Contains the second location to use.<b>Optional</b>\n@Available Available on Android and iOS.\n@access Write\n@usage  <pre>location1 = {lat:“17.451759”, lon:“78.380806”};\nlocation2 = {lat: “17.427789”, lon:”78.451751”};\nvar distanceInMeters = kony.map.distanceBetween(location1, location2);</pre>",
                "!type": "fn(location1: ?, location2: ?)"
            },
            "searchRoutes": {
                "!doc": "This function searches for routes between the start and destination locations.\n@param searchCriteria{Object}A JSObject with set of search request configuration parameters that defines the search criteria for routes request.<b>Mandatory</b>\n@param successCallback{Function}A callback function that receives the search results when search request succeeds. The callback function must have the following syntax.\nfunction successCallback( routes );\nThe callback function's routes parameter is an array with one or more routes indicating possible directions between source and destination.<b>Mandatory</b>\n@param errorCallback{Function}An optional callback function that gets called when search request fails. The callback function must have the following syntax.\nfunction errorCallback( errorCode[Number], errorMessage[String] )\nThe errorCode parameter indicates the category of error. This carries the one of the Map Error Codes defined in the kony.map namespace. The errorMessage parameter contains a detailed error message describes the reason for failure. These error messages are platform specific.<b>Mandatory</b>\n@Available Available on Android and iOS.\n@access Write\n@usage  <pre>kony.map.searchRoutes(\n    searchCriteria\n    successCallback,\n    errorCallback)</pre>",
                "!type": "fn(searchCriteria: ?, successCallback: ?, errorCallback: ?)"
            }
        },
        "net": {
            "!doc": "Network API's",
            "FormData": {
                "!doc": "The FormData object represents an ordered collection of entries with name-value pairs.\n@Available All Platforms except Windows and SPA\n@usage <pre>var httpclient1 = new kony.net.FormData()</pre>",
                "!type": "fn()"
            },
            "HttpRequest": {
                "!doc": "The HttpRequest object supports an HTTP or HTTPS request to any resource on the network and fetches the response.\n@Available All Native Platforms except SPA and Windows\n@usage <pre>var httpclient1 = new kony.net.HttpRequest()</pre>",
                "!type": "fn()"
            },
            "cache": {
                "!doc": "Cache Management API's",
                "DISK_AND_MEMORY": "number",
                "MEMORY_ONLY": "number",
                "NOT_ALLOWED": "number",
                "RELOAD_IGNORING_LOCAL_CACHE_DATA": "number",
                "RETURN_CACHE_DATA_DONT_LOAD": "number",
                "RETURN_CACHE_DATA_ELSE_LOAD": "number",
                "USE_PROTOCOL_CACHE_POLICY": "number",
                "getCurrentDiskUsage": {
                    "!doc": "This API return current size of the on-disk cache, in bytes.\n@returns {Number} Current size of cache on disk.\n@Available iOS\n@usage <pre>\n   var onDiskCacheCapacity = kony.net.cache.getCurrentDiskUsage();\n</pre>",
                    "!type": "fn() -> number"
                },
                "getCurrentMemoryUsage": {
                    "!doc": "This API return current size of the in-memory cache, in bytes.\n@returns {Number} Current size of cache in memory.\n@Available iOS\n@usage <pre>\n   var onMemoryCacheCapacity = kony.net.cache.getCurrentMemoryUsage();\n</pre>",
                    "!type": "fn() -> number"
                },
                "getDiskCapacity": {
                    "!doc": "This API return disk capacity of the cache, in bytes.\n@returns {Number} Disk capacity in numbers.\n@Available iOS\n@usage <pre>\n   var diskCapacity = kony.net.cache.getDiskCapacity();\n</pre>",
                    "!type": "fn() -> number"
                },
                "getMemoryCapacity": {
                    "!doc": "This API return memory capacity of the cache, in bytes.\n@returns {Number} Memory capacity in numbers.\n@Available iOS\n@usage <pre>\n   var memoryCapacity = kony.net.cache.getMemoryCapacity();\n</pre>",
                    "!type": "fn() -> number"
                },
                "setCacheConfig": {
                    "!doc": "This API initializes the cacheConfig that is a dictionary which configures the cachePolicy and storagePolicy of the cache responses for the request at the app level.\n@param cacheConfig {Object} Configures the cachePolicy and storagePolicy of the cache responses.\n@returns None.\n@Available iOS\n@usage <pre>\n   var cacheConfig = {\n       cachePolicy: kony.net.cache.USE_PROTOCOL_CACHE_POLICY,\n       cacheStoragePolicy: kony.net.cache.DISK_AND_MEMORY\n   };\n   kony.net.cache.setCacheConfig(cacheConfig);\n</pre>",
                    "!type": "fn(cacheConfig: ?)"
                },
                "setMemoryAndDiskCapacity": {
                    "!doc": "This API Initializes a cache capacity memory and disk with the specified values, which can be invoked as part of the preApp or postApp init of kony application.\n@param memoryCapacity {number} The memory capacity of the cache in bytes.\n@param diskCapacity {number} The disk capacity of the cache in bytes.\n@returns None.\n@Available iOS\n@usage <pre>\n   var memoryCapacity = 1024*1024*5; //Allocationg 5MB memory.\n   var diskCapacity = 1024*1024*5;\n   kony.net.cache.setMemoryAndDiskCapacity(memoryCapacity, diskCapacity);\n </pre>",
                    "!type": "fn(memoryCapacity: ?, diskCapacity: ?)"
                }
            },
            "cancel": {
                "!doc": "This API is used to cancel only async network calls. Synchronous calls will have platform specific cancellation provided by platform (platform to platform - it may vary).\n    @param connHandle{String}  The handle to the asynchronous service.Invalid parameters to this API will be ignored. <b>Mandatory</b>\n    @Available Available on all platforms except Server Side Mobile Web.\n    @usage <pre>function cancelService()<br/>\n{\nkony.net.cancel(connHandle);<br/>\n}</pre>",
                "!type": "fn(connHandle: ?)"
            },
            "clearCookies": {
                "!doc": "This API is used to remove cookies from the client that are associated with the specified domain.\n@param url {String} An optional string that specifies a valid URL of a domain from where the cookies were obtained.\n@param cookieName {Array} An optional array of strings that specifies the cookie names that are to be removed from the current application.\n@Available iOS, Android, Windows, and SPA platforms.\n@usage <pre>\n  kony.net.clearCookies(\"http://www.google.com\");<br/>\n</pre>",
                "!type": "fn(url: ?, cookieName: ?)"
            },
            "getActiveNetworkType": {
                "!doc": "The getActiveNetworkType API returns the currently active network type. If the device is offline, it will return null, else it will return the appropriate connection type.\n    @returns {String} Specifies the network type on the device for data transport.\n    @Available Available on all platforms.\n    @usage <pre>function checkActiveNetwork()\n{\nreturn kony.net.getActiveNetworkType() ;\n}\n\n</pre>",
                "!type": "fn() -> string"
            },
            "getCookies": {
                "!doc": "This API is used to retrieve cookies associated with the specified domain.\n@param URL {String} The URL of the domain for which the cookie is retrieved. If the URL in the URL parameter is not fully formed, this function returns Null.\n@returns {Array} Returns an array of cookies.\n@Available Android, iOS, Windows, and SPA\n@usage <pre>\n var cookies = kony.net.getCookies(\"http://www.google.com\");\n for (var index = 0; index < cookies.length; index++) {\n    var cookie = cookies[index];\n    kony.print(\"Cookie is: \" + cookie);\n }\n</pre>",
                "!type": "fn(URL: ?) -> [?]"
            },
            "invokeServiceAsync": {
                "!doc": "This API allows you to invoke a service asynchronously with the specified parameters.\n    @param URL{String}  The URL containing the remote location from where the content is to be retrieved. <b>Mandatory</b>\n    @param inputParamTable{Object}  It is the list of parameters that need to be passed to the remote service. <b>Mandatory</b>\n    @param callback{Function}  The callback function that is called to handle the return values of the Asynchronous Network Call (in case of success) and error messages (in case of failure). <b>Mandatory</b>\n    @param  info{Object}    A JavaScript object consisting of key value pairs. If info parameter is specified, it is is passed to the callback function as a last parameter. If the info parameter is not specified, the callback function receives the info as null. \"Info\" is basically a user data where in the application developers will pass it to the async API's and the platform returns this info object to the corresponding async callback. <b>Optional</b>\n    @returns {Object|handle|null}\n    <ul><li>This represents the Object returned by the service. This Object contains three values:opstatus,errcode,errmsg.</li>\n    <li>A handle to the service. call</li>\n    <li>If the input parameters are invalid</li></ul>\n    @Available All Platforms\n    @usage <pre>function callbackfunction(status, resulttable)<br/>\n{\n if(status == 400)<br/>\n {\n    if(resulttable[\"opstatus\"] == 0)<br/>\n      {\n        alert(\"opstatus is zero\");<br/>\n      }\n  }\n}\n\nfunction startup()<br/>\n{\n    try<br/>\n    {\n        var myhttpheaders={authkey:\"myauthkey\", authtoken:\"myauthtoken\"};<br/>\n        var inputParamTable={appID:\"SampleApp\", serviceID:\"accountLogin\", httpheaders:myhttpheaders};<br/>\n        connHandle = kony.net.invokeServiceAsync(\"http://www.test.konylabs.com\", inputParamTable, callbackfunction);<br/>\n\n    }\n    catch(err)<br/>\n    {\n      alert(\"Error\"+err);<br/>\n    }\n\n}</pre>",
                "!type": "fn(url: ?, inputParamTable: ?, callback: ?, info: ?) -> ?"
            },
            "isNetworkAvailable": {
                "!doc": "The isNetworkAvailable API enables you to check whether  a network is available for data transport on a device.\n    @param networkType {Integer}  Specifies the network type on the device for data transport. <b>Mandatory</b>\n    @returns {Boolean} True indicates that the specified data network is available.\n    @Available Available on all platforms. Except BlackBerry 6.0.0.141, all other BlackBerry 6.0 versions give Null pointer exception when a wrong parameter is provided.\n    @usage <pre>function checkIfNetworkIsAvailable()\n{\nreturn kony.net.isNetworkAvailable(constants.NETWORK_TYPE_ANY);\n}\n</pre>",
                "!type": "fn() -> bool"
            },
            "loadClientCertificate": {
                "!doc": "This API sets a client certificate to be used for HTTPS client authentication.\n@param certParamsTable {Object} Contains a list of key-value pairs required to load client certificate for client authentication in a mutually authenticated HTTPS connection.(<b>cert</b>: Can be of type RawBytes or base64String. <b>pass</b>: A string containing the password that is protecting the PKCS12 certificate).\n@returns {boolean} This API returns a Boolean value whether the client certificate is loaded successfully or not.\n@Available Android, iOS\n@usage <pre>\n function loadCert() {\n      try {\n         var certFileName = kony.io.FileSystem.getCacheDirectoryPath() + \"/\" + clientCertFileName;\n         var certFile = new kony.io.File(certFileName);\n         var certStream = certFile.read();\n         var certParamTable = {\n         cert: certStream,\n         pass: \"password\"\n      };\n\n      var res = kony.net.loadClientCertificate(certParamTable);\n      kony.print(\"loadClientCertificate status = \" + res)\n    } catch (e) {\n        kony.print(e.toString());\n    }\n }\n</pre>",
                "!type": "fn(certParamsTable: ?) -> bool"
            },
            "mfintegrationsecureinvokerasync": {
                "!doc": "This API is used to invoke Kony Fabric service asynchronously.\n@param inputParams {Object} An object containing the Parameters for the Kony Fabric service.\n@param serviceName {String} A string that holds the name of the service to invoke.\n@param operationName {String} A string that specifies the name of the service's operation.\n@param callbackFunction {Function} A callback function to handle the service's response.\n@usage <pre>\n function callbackFunction(status, response) {\n    //application specific code goes here.\n }\n\n var serviceName = \"ServiceTwo\";\n var operationName = \"HealthOperation\";\n var inputParams = {\n      \"q\": \"value1\",\n      \"httpheaders\": {\n          \"api-key\": \"header-value\"\n     }\n};\nmfintegrationsecureinvokerasync(inputParams, serviceName, operationName, callbackFunction);\n\n</pre>",
                "!type": "fn(inputParams: ?, serviceName: ?, operationName: ?, callbackFunction: ?)"
            },
            "removeAllCachedResponses": {
                "!doc": "This API clears the default cache of an application by removing all responses received from URLs.\n@Available iOS",
                "!type": "fn()"
            },
            "removeClientCertificate": {
                "!doc": "This API removes already loaded client certificate.\n@Available Android",
                "!type": "fn()"
            },
            "removeIntegrityCheck": {
                "!doc": "This API disables intregity checks for HTTP calls between the client and the server.",
                "!type": "fn()"
            },
            "setIntegrityCheck": {
                "!doc": "This API enables the addition of checksums to HTTP calls for HTTP integrity checking.\n@param propertiesTable {Object} Specifies the JSObject to represent propertiesTable as key value pairs.(<b>algo</b>: MD5,SHA1,SHA224,SHA226,SHA384. <b>salt</b>: Maximum sting lenght of 1024 characters. <b>headerName</b>: A non-empty string that specifies the name of the header. <b>validateResp</b>: A Boolean value that indicates whether the response should be validated. <b>hostNameList</b>:An optional array of strings that specify the URLs of servers.)\n@usage <pre>\n var propertiesTable {\n     algo: “SHA256”,\n     salt: “secret_123”,\n     headerName: “X-Custom-Checksum”,\n     validateResp: true,\n     hostNamesList: [“mail.kony.com”, “cloud.kony.com”]\n\n };\n kony.net.setIntegrityCheck(propertiesTable);\n</pre>",
                "!type": "fn(propertiesTable: ?)"
            },
            "setNetworkCallbacks": {
                "!doc": "The setNetworkCallbacks API allows to register for  network status changes. You can then change the user experience according to the network availability.\n    @param callbackconfig {Object} This callback indicates if the device was online or offline when this callback was invoked. <b>Mandatory</b>\n    @Available Available on all platforms.\n    @usage <pre>var config = {};\nconfig.statusChange = function (isOnLine)\n{\n    if(isOnLine)\n        {\n            alert(“Device is online”);\n        }\n    else\n        {\n            alert(“Device is offline”);\n        }\n}\nkony.net.setNetworkCallbacks(config);\n</pre>",
                "!type": "fn()"
            },
            "urlDecode": {
                "!doc": "This API enables the app developer decode the string.\n\nExample #1\n<pre>\n  var result = kony.net.urlDecode(“hello*_%40+world”);\n  kony.print(result);\n</pre>\n\nThe output will be “hello*_@ world”\n\n@param {String} queryParams – Mandatory, The queryParams is the string which needs to be decoded.\n@param {String} ExemptionString - Optional, String containing all the characters that are to be exempted from decoding. This parameter is only specific to iOS Platform. Android & Windows platforms will ignore it. But iOS respect the characters and decode accordingly.\n@Available on Android, iOS, Windows 10",
                "!type": "fn(queryParams: string, exemptionString: ?)"
            },
            "urlEncode": {
                "!doc": "This API enables the app developer encode the string.\nIt translates the given string into application/x-www-form-urlencoded format using a UTF-8 encoding scheme.\n\nWhen encoding a string, the following rules apply:\n  The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\" through \"9\" remain the same.\n  The special characters \".\", \"-\", \"*\", and \"_\" remain the same.\n  The space character \"\" is converted into a plus sign \"+\".\n  All other characters are unsafe and are first converted into one or more bytes using some encoding scheme. Then each byte is represented by the 3-character string \"%xy\", wherexyis the two-digit hexadecimal representation of the byte.\n  All the rules applied in reverse while decoding. After decoding the encoded string original string will be return.\n\nFor example using UTF-8 as the encoding scheme the string \"The string üfoo-bar\" would get converted to \"The+string+%C3%BCfoo-bar\" because in UTF-8 the character ü is encoded as two bytes C3 (hex) and BC (hex).\n\n  Example #1\n  <pre>\n    var result = kony.net.urlEncode(“hello*_ world”);\n    kony.print(result);\n  </pre>\n\n  The output will be “hello*_+world”\n\n  Example #2\n  <pre>\n    var exemptionString =  \"helloworl-*_.\";\n    var result = kony.net.urlEncode(“hello*_ world”, exemptionString);\n    kony.print(result);\n  </pre>\n\n    IOS output: will be “hello*_+worl%64”\n    Android and Windows output: will be “hello*_+world”\n\n@param {String} queryParams – Mandatory, The queryParams is the string which needs to be encoded.\n@param {String} ExemptionString - Optional, String containing all the characters that are to be exempted from encoding This parameter is only specific to iOS Platform. Android & Windows platforms will ignore it. But iOS respect the characters and encode accordingly.\n@Available on Android, iOS, Windows 10",
                "!type": "fn(queryParams: string, exemptionString: ?)"
            }
        },
        "notificationsettings": {
            "!doc": "Notification settings API",
            "setShowBadge": {
                "!doc": "This API helps you enable or disable the notification badges for push/remote or local notifications that are supported by Kony Framework.\n@param notificationChannelName {string} Channel name can be 'localNotification' or 'pushNotification'.<b>Mandatory</b>\n@param showBadgeValue {boolean} By default the notification badge's visibility will be true. Set this value to false to disable the visibilty of app notification badge.<b>Mandatory</b>\n@Available Android (8.0 and above OS versions only)\n\n@usage <pre>\n   var notificationChannelName = \"pushNotification\";\n   var showBadgeValue = false;\n\n   kony.notificationsettings.setShowBadge(notificationChannelName, showBadgeValue); </pre>",
                "!type": "fn(notificationChannelName: ?, showBadgeValue: ?)"
            }
        },
        "os": {
            "!doc": "OS API's",
            "BATTERY_STATE_CHARGING": {
                "!doc": "constants for Battery state",
                "!type": "string"
            },
            "BATTERY_STATE_DISCHARGING": "string",
            "BATTERY_STATE_FULL": "string",
            "BATTERY_STATE_UNKNOWN": "string",
            "addHiddenField": {
                "!doc": "This API helps the developers to pass dynamic values when the form needs to be submitted to external sites.\n@param key{String}  Specifies the key of the hidden field that you would like to add. <b>Mandatory</b>\n@param value{String}    Specifies the value that corresponds to the specified key in the hidden field. <b>Mandatory</b>\n@param pvt{String}  Specifies if the hidden field can be read using the kony.os.readHiddenField API. <b>Optional</b>\n@Available Mobile Web and SPA",
                "!type": "fn(key: ?, value: ?, pvt: ?)"
            },
            "addMetaTag": {
                "!doc": "This API adds a meta tag in html header. This API result will effect only on header reload.\n@param key{String} Adds a meta tag in html header\n@param value{Object} Adds meta tag attributes in the html header as key value pairs.\n@Available  MobileWeb.\n@usage <pre>kony.os.addMetaTag(\"test2\", { \"http-equiv\":\"refresh\",\"content\":\"30\" })</pre>",
                "!type": "fn(key: ?, value: ?)"
            },
            "deviceInfo": {
                "!doc": "This API allows the developers to get information about the device in which the application is launched.\n@returns {Object} Returns a hash table with key-value pairs about device information.\n@since 7.3  return object include “hasforcetouchsupport” key, which holds true if forch touch is available on device.\n@Available All Platforms\n@usage <pre>var deviceInfo=kony.os.deviceInfo();<br/>\n    alert(deviceInfo);<br/>\n\n    for (var key in deviceInfo) <br/>\n    {\n        if (deviceInfo.hasOwnProperty(key))<br/>\n        {\n            alert(key+\":\"+deviceInfo[key]);<br/>\n        }\n    }</pre>\n<pre>\n    function isForceTouchAvailble(){\n        var deviceInfo = kony.os.deviceInfo();\n        return deviceInfo[“hasforcetouchsupport”];\n    }\n</pre>",
                "!type": "fn() -> ?",
                "httpheaders": {
                    "!doc": "This API returns the http headers configured in the HTTP request object.\n@returns {Object} Returns a hash table of the http headers and their corresponding values.\n@Available SPA\n@usage <pre><pre>kony.print(kony.os.deviceInfo().httpheaders());\n//prints the array of http headers\n</pre>",
                    "!type": "fn() -> ?"
                }
            },
            "endSecureTransaction": {
                "!doc": "This API can be invoked on an event of a widget. This API should be invoked on forms of the application where user validation is not required or cross site request forgery is not a concern.\n    @Available Mobile Web\n    @usage <pre>kony.os.endSecureTransaction();\n</pre>",
                "!type": "fn()"
            },
            "freeMemory": {
                "!doc": "This API provides the ability to query and fetch the system-wide memory available on the mobile device for allocation.\n    @returns {Number} The available memory for allocation is returned. The returned memory always indicates the number of bytes available.\n    @Available All platformsexcept Windows 7 / Kiosk. *Dummy implementation on Server Side Mobile Web and returns a dummy value.\n    @usage <pre>var freememory = kony.os.freeMemory();<br/>\nkony.print(freememory);<br/>\n//After the kony.os.freeMemory operation, the memory available for allocation is printed. <br/>\n//For example, 1070404 (indicates that 1046 KB of memory is available for allocation)<br/>\n</pre>",
                "!type": "fn() -> number"
            },
            "getAppContext": {
                "!doc": "This API allows the developers to get information about the mode in which the application is launched.\n@returns {Object} Returns a JS object with key-value pairs:launchmode=0 indicates that the application is launched in normal mode.launchmode=1 indicates that the application is launched in full screen mode.\n@Available ThinClient",
                "!type": "fn() -> ?"
            },
            "getBatteryLevel": {
                "!doc": "This API returns the current Battery percentage of the device.\n@returns {Number} Returns the Battery level.\n@Available iOs, Android, Windows\n@usage <pre>kony.os.getBatteryLevel();  Returns battery percentage in integer.\n</pre>",
                "!type": "fn() -> number"
            },
            "getBatteryState": {
                "!doc": "This API returns the current Battery State.\n@returns {Number} Returns the Battery State Constant.\n@Available iOs, Android, Windows\n@usage <pre>kony.os.getBatteryState();  Returns battery State Constant.\n</pre>",
                "!type": "fn() -> number"
            },
            "getDeviceCurrentOrientation": {
                "!doc": "This API returns the current orientation of the device. The possible values are portrait or landscape.\n@returns {String} Returns the current orientation of the device.\n<ul><li>DEVICE_ORIENTATION_PORTRAIT</li>\n<li>DEVICE_ORIENTATION_LANDSCAPE</li></ul>\n@Available iPhone, iPad, Windows 8, Android, BlackBerry, BlackBerry 10, Windows 7 / Kiosk, and Desktop Web\n@usage <pre>kony.os.getDeviceCurrentOrientation();  Returns the device orientation</pre>",
                "!type": "fn() -> string"
            },
            "hasAccelerometerSupport": {
                "!doc": "This API returns whether accelerometer is supported on a device.\n@returns {Boolean} Returns whether accelerometer is supported on a device.\n@Available iPhone, Android, BlackBerry, Windows.\n@usage <pre>kony.print(kony.os.hasAccelerometerSupport());<br/>\nprints true if device has accelerometer support </pre>",
                "!type": "fn() -> bool"
            },
            "hasCameraSupport": {
                "!doc": "This API returns whether Camera is supported on a device.\n@returns {Boolean} Returns whether the platform supports Camera.\n@Available All platforms except Mobile Web and Windows 7 / Kiosk. *Dummy implementation for SPA  and Desktop Web that always returns False.\n@usage <pre>kony.print(kony.os.hasCameraSupport());<br/>\nprints true if device has  camera support</pre>",
                "!type": "fn() -> bool"
            },
            "hasGPSSupport": {
                "!doc": "This API returns whether GPS is supported on a device.\n@returns {Boolean} Returns whether the platform supports GPS.\n@Available All platforms except Mobile Web and Windows 7 / Kiosk.\n@usage <pre>kony.print(kony.os.hasGPSSupport());<br/>\nprints true if device has GPS support</pre>",
                "!type": "fn() -> bool"
            },
            "hasOrientationSupport": {
                "!doc": "This API returns whether Orientation is supported on a device.\n@returns {Boolean} Returns whether the platform supports Orientation.\n@Available All platforms except Mobile Web.\n@usage <pre>kony.print(kony.os.hasOrientationSupport());<br/>\nprints true if device  has Orientation Support</pre>",
                "!type": "fn() -> bool"
            },
            "hasTouchSupport": {
                "!doc": "This API returns whether Touch is supported on a device.\ns@returns {Boolean} Returns whether the platform supports touch.\n@Available All platforms except MobileWeb.\n@usage <pre>kony.print(kony.os.hasTouchSupport());<br/>\nprints true if device is a touch device </pre>",
                "!type": "fn()"
            },
            "print": {
                "!doc": "This API when invoked without any parameter, it prints the entire form that is currently in view.\n@param containerID {Number} The containerID can be a widget ID of any container widget which can be directly referenced from a form. <b>Optional</b>\n@Available Desktop Web\n@usage <pre><pre>kony.os.print()\n</pre>",
                "!type": "fn()"
            },
            "readHiddenField": {
                "!doc": "This API allows the developers to read the hidden fields added by the os.addHiddenField API.\n@param key{String}  Specifies the key of the hidden field that you would like to read. <b>Mandatory</b>\n@returns {String|Null}\n<ul><li> Returns the value that corresponds to the specified key.</li>\n<li>null is returned if there is no value assigned to the corresponding key.</li></ul>\n@Available Mobile Web and SPA",
                "!type": "fn(key: ?) -> string"
            },
            "registerBatteryService": {
                "!doc": "This API is to be called before using any of the api such as getBatteryLevel(). This will register to OS for battery monitoring service. On complete use of battery service it is recommended to unregisterService. Callback will be driven to most recent registered battery service. In every callback to function can retrieve current batterylevel and batterystate.\n    **Note : either change in batterystate or for change in 1percent batteryLevel callback to the function is triggered.\n    @param callback {Function}  The callback function to be executed when kony.os.registerBatteryService API is invoked successfully. <b>Mandatory</b>\n    @Available iOs, Android, Windows\n    @usage <pre>function callback()<br/> {<br/> } kony.os.registerBatteryService(callback)<br/>\n</pre>",
                "!type": "fn(callback: ?)"
            },
            "removeAllMetaTags": {
                "!doc": "This API removes all the user defined meta tags from a html header. This API result will effect only on header reload.\n@Available  MobileWeb.\n@usage <pre>kony.os.removeAllMetaTags()</pre>",
                "!type": "fn(key: ?)"
            },
            "removeMetaTag": {
                "!doc": "This API removes a specific meta tag from a html header. This API result will effect only on header reload.\n@param key{String} Removes a meta tag in html header\n@Available  MobileWeb.\n@usage <pre>kony.os.removeMetaTag(\"test1\")</pre>",
                "!type": "fn(key: ?)"
            },
            "startSecureTransaction": {
                "!doc": "When this API is invoked it makes all the data and subsequent transactions of the application secure. For example, the login page of an application has the following: user name field, password field, and a button. On the onclick event of the button, the user is verified and navigated to pages with sensitive information. If you want to prevent cross site request forgery or double submissions, you can invoke this API ensuring that all the subsequent transactions are secure.\n    @param callback {Function}  The callback function to be executed when kony.os.startSecureTransaction API is invoked successfully. If there are instances where cross site request forgery is attempted, this parameter should comprise a session/request expiry function. <b>Mandatory</b>\n    @param scope {Number}  Specifies whether this API will be valid per request or per session of the application. <b>Mandatory</b>\n    @Available Mobile Web\n    @usage <pre>function callback()<br/>\n{<br/>\n}\nkony.os.startSecureTransaction(callback, 1)<br/>\n</pre>",
                "!type": "fn(callback: ?, scope: ?)"
            },
            "toCurrency": {
                "!doc": "This API allows you to convert the given number to represent currency. At present, only USA currency is supported.\n    @param number{Number}  Specifies the number that must be converted to represent currency. <b>Mandatory</b>\n    @returns {String} A string with the number formatted as currency.If the input string has decimal points, the return value is truncated till two decimal points.\n    @Available All platforms.\n    @usage <pre>var tocurrency = kony.os.toCurrency(10000);<br/>\nkony.print(tocurrency);<br/>\n//prints $ 10,000<br/>\n</pre>",
                "!type": "fn(number: ?) -> string"
            },
            "toNumber": {
                "!doc": "This API converts the argument to a number. If the argument is already a number or a string convertible to a number, then the API returns this number; otherwise, it returns null.\n    @param argument{String|Number}  The argument that must be converted to a number. <b>Mandatory</b>\n    @returns {Number|Null}\n    <ul><li>The input string or number has been converted to a number and returned.</li>\n    <li> The argument cannot be converted to a number.</li></ul>\n    @Available All platforms.\n    @usage <pre>kony.os.toNumber (ms34rd);<br/>\n//returns null as the string passed cannot be converted to a number<br/>\nkony.os.toNumber (\"58\");<br/>\n//returns 58 as the string could be converted to a number<br/>\n</pre>",
                "!type": "fn(argument: ?) -> number"
            },
            "unregisterBatteryService": {
                "!doc": "This API should be called to stop monitoring of battery, It is recommended to call this api as functioning of battery monitoring is finished.\n@Available iOs, Android, Windows\n@usage <pre>kony.os.unregisterBatteryService()\n</pre>",
                "!type": "fn()"
            },
            "userAgent": {
                "!doc": "This API returns a unique identifier of the mobile device that is extracted from the useragent. This unique ID represents the device model and the manufacturer.\n    @returns {String} The unique string that represents the device model, OS version, Browser version, Java capabilities, and manufacturer.\n    @Available All platforms.\n    @usage <pre>var devID =kony.os.userAgent();<br/>\nalert(\"User Agent return value is::\"+devID);<br/>\n</pre>",
                "!type": "fn() -> string"
            }
        },
        "payment": {
            "!doc": "Payment API's",
            "BILLING_ADDRESS_FORMAT_FULL": {
                "!doc": "Available on Android",
                "!type": "number"
            },
            "BILLING_ADDRESS_FORMAT_MIN": {
                "!doc": "Available on Android",
                "!type": "number"
            },
            "METHODTYPE_3DS": {
                "!doc": "Available on iOs",
                "!type": "number"
            },
            "METHODTYPE_ANDROIDPAY": {
                "!doc": "Available on Android",
                "!type": "number"
            },
            "METHODTYPE_CREDIT": {
                "!doc": "Available on iOs",
                "!type": "number"
            },
            "METHODTYPE_DEBIT": {
                "!doc": "Available on iOs",
                "!type": "number"
            },
            "METHODTYPE_EMV": {
                "!doc": "Available on iOs",
                "!type": "number"
            },
            "METHODTYPE_GOOGLE": {
                "!doc": "Available on Android",
                "!type": "number"
            },
            "METHODTYPE_PREPAID": {
                "!doc": "Available on Android",
                "!type": "number"
            },
            "NETWORK_AMEX": "number",
            "NETWORK_CARTEBANCAIRE": {
                "!doc": "Available on iOs",
                "!type": "number"
            },
            "NETWORK_CARTEBANCAIRES": {
                "!doc": "Available on iOs",
                "!type": "number"
            },
            "NETWORK_CARTESBANCAIRES": {
                "!doc": "Available on iOs",
                "!type": "number"
            },
            "NETWORK_CHINAUNIONPAY": {
                "!doc": "Available on iOs",
                "!type": "number"
            },
            "NETWORK_DISCOVER": "number",
            "NETWORK_IDCREDIT": {
                "!doc": "Available on iOs",
                "!type": "number"
            },
            "NETWORK_INTERAC": "number",
            "NETWORK_JCB": "number",
            "NETWORK_MASTERCARD": "number",
            "NETWORK_PRIVATELABEL": {
                "!doc": "Available on iOs",
                "!type": "number"
            },
            "NETWORK_QUICPAY": {
                "!doc": "Available on iOs",
                "!type": "number"
            },
            "NETWORK_SUICA": {
                "!doc": "Available on iOs",
                "!type": "number"
            },
            "NETWORK_VISA": "number",
            "PRICE_STATUS_ESTIMATED": "number",
            "PRICE_STATUS_FINAL": "number",
            "PRICE_STATUS_UNKNOWN": "number",
            "SHIPPINGTYPE_DELIVERY": {
                "!doc": "Available on iOs",
                "!type": "number"
            },
            "SHIPPINGTYPE_SERVICEPICKUP": {
                "!doc": "Available on iOs",
                "!type": "number"
            },
            "SHIPPINGTYPE_SHIPPING": {
                "!doc": "Available on iOs",
                "!type": "number"
            },
            "SHIPPINGTYPE_STOREPICKUP": {
                "!doc": "Available on iOs",
                "!type": "number"
            },
            "canWeMakePayment": {
                "!doc": " This API determines if user can make payments in his device.If optional parameter is set, then API will return true, only if the user has an existing payment method that matches the criteria specified in “paymentRequirements”.\n @param paymentRequirements{Object} A JSObject with the keys paymentCardNetworks and paymentMethodType, the values can be numbers.<b>Optional</b>\n @returns {Boolean} Returns Boolean value. “true ”, if user can make payment in his device or if \"paymentRequirements\" criteria is met, else false.\n @Available iOs, Android\n @usage <pre> var canPaymentMade = kony.payment.canWeMakePayment();\n</pre>",
                "!type": "fn(paymentRequirements: ?) -> bool"
            },
            "getSupportedPaymentNetworks": {
                "!doc": "This API Returns the list of available payment networks that are supported by Apple Pay.\n@returns {Array} An array of constants representing the available payment networks.\n@Available iOs\n@usage <pre>kony.payment.getSupportedPaymentNetworks();\n</pre>",
                "!type": "fn() -> [?]"
            },
            "loadPaymentData": {
                "!doc": " This asynchronous API returns \"paymentResponseData\" which contains the necessary information to complete a payment transaction. Based on the “paymentRequestData” object values, payment sheet UI input fields and the values in paymentResponseData are framed.\n @param paymentRequestData{Object} A JSON map object with keys paymentCardsInfo, shippingAddressInfo, billingAddressInfo, merchantInfo and paymentSummary.<b>Mandatory</b>\n @param successCallback{Function} A callback function that receives paymentResponseData when loadPaymentData call succeeds. The callback function must have the following syntax.\n function successCallback(paymentResponseData)\n This callback function's paymentResponseData is a JSObject with details of billingAddress, shippingAddress, selected card details and payment token.\n @param errorCallback{Function} An optional callback function that gets called when loadPaymentData request fails. The callback function must have the following syntax.\n function errorCallback(error)\n @Available iOs, Android and Windows\n @usage <pre> var paymentRequestData = {\n   \"paymentCardsInfo\" : {\n       \"paymentCardNetworks\": [],\n       \"paymentMethodType\": [],\n       \"supportedCountries\": []\n   },\n   \"shippingAddressInfo\" : {\"name\" : true, \"postalAddress\" : true ,\"email\" : true, \"phoneNumber\" : false , \"shippingType\" : [], \"shippingMethod\" : [] },\n   \"billingAddressInfo\" : {\"name\" : true, \"postalAddress\" : true ,\"email\" : true, \"phoneNumber\" : false},\n   \"merchantInfo \" : {\n       \"merchantName\" : [],\n       \"merchantID\" : [],\n       \"countryCode\" : [],\n       \"additionalParameters\" : {}\n   },\n   \"paymentSummary\" : {currenyCode : [], priceDetails : {}}\n   };\n kony.payment.loadPaymentData(\n     paymentRequestData,\n     successCallback,\n     errorCallback);\n</pre>",
                "!type": "fn(paymentRequestData: ?, successCallback: ?, errorCallback: ?)"
            }
        },
        "phone": {
            "!doc": "Phone API's",
            "addCalendarEvent": {
                "!doc": "This API adds a new event to the device calendar.\n        @param eventDetails {Object} - A hash Object that contains the following key-value pairs.\n        @param eventDetails.summary {String} - Short description of the event.\n        @param eventDetails.start {String} - The start date and time for the event. The format for date is \"dd/mm/yyyy\", and time is \"hh:mm:ss\".\n        @param eventDetails.finish {String} - The finish date and time for the event. The format for date is \"dd/mm/yyyy\", and time is \"hh:mm:ss\".\n        @param eventDetails.alarm {Number} - Time in seconds before the start time at which the phone must trigger an alarm.\n        @param eventDetails.access {String} - Indicates the privacy setting for the event. <b>Mandatory</b>.\n        @param eventDetails.repeatConfig {Object} - (Optional Parameter) - A dictionary that indicates repeat type and end recurrence for the event.The dictionary contains two values. repeat and endRecurrence.\n        @param eventDetails.repeatConfig.repeat {constant} - A constant which indicates the type of repeat that is to be done. The values are\n        constants.CALENDAREVENT_REPEAT_NONE,\n        constants.CALENDAREVENT_REPEAT_DAILY,\n        constants.CALENDAREVENT_REPEAT_WEEKLY, constants.CALENDAREVENT_REPEAT_MONTHLY,\n        constants.CALENDAREVENT_REPEAT_YEARLY.\n        @param eventDetails.repeatConfig.endRecurrence {String} - (Optional parameter). A string that holds the end recurrence date and time for the event.\n        @Available All Platforms\n        @usage <pre>function addCalendarEvent()<br/>\n{\n    try <br/>\n    {\n        alert(\"calendar event is about to start\");<br/>\n        var evtobj = {<br/>\n        summary:\"Event started\",<br/>\n        start:\"15/04/2012 11:23:45\",<br/>\n        finish:\"21/12/2012 12:59:45\", <br/>\n        alarm: 40,<br/>\n        note: \"Event will ends at 12.59 PM\",<br/>\n        access: \"public\",<br/>\n        repeatConfig: {<br/>\n        repeat: constants.CALENDAREVENT_REPEAT_MONTHLY,<br/>\n        endRecurrence: ”21/12/2013 13:00:00”<br/>\n        }\n        };<br/>\n        //Adds a event to the device calendar<br/>\n        kony.phone.addCalendarEvent(evtobj);<br/>\n    }\n    catch(PhoneError)<br/>\n    {\n        alert(\"error in addCalendarEvent:: \"+PhoneError);<br/>\n    }\n\n}</pre>",
                "!type": "fn(eventDetails: ?)"
            },
            "cancelVibration": {
                "!doc": "This API stops the ongoing vibration pattern\n @Available  Android and Windows.\n @usage <pre>\n Note:  For Android, make sure that the VIBRATE permission is defined under the Manifest Properties.\n        uses-permission android:name=\"android.permission.VIBRATE\"\n\n kony.phone.cancelVibration ()  ;\n</pre>",
                "!type": "fn()"
            },
            "dial": {
                "!doc": "This API provides you with the ability to make a call to the specified telephone number.\n        @param  number{String}  Number to which the call must be made. <b>Mandatory</b>\n        @Available All Platforms\n        @usage <pre>function CallTheNumber()<br/>\n{\n\n    try<br/>\n    {\n        var number=\"123456789\";<br/>\n        kony.phone.dial(number);<br/>\n    }\n    catch(err)<br/>\n    {\n        alert(\"error in dial:: \"+err);<br/>\n    }\n}</pre>",
                "!type": "fn(number: ?)"
            },
            "findCalendarEvents": {
                "!doc": "This API adds a new event to the device calendar.\n        @param  evtobj{Object}  A Hash Object that has the following key-value pairs (details of the event):type [String] - Specifies the criteria for searching the event. The criteria can be starting, ending, or occurring.start [String] - Specifies the start date and time for the event. The format for date is \"dd/mm/yyyy\", and time is \"hh:mm:ss\".finish [String] - Specifies the finish date and time for the event. The format for date is \"dd/mm/yyyy\", and time is \"hh:mm:ss\". <b>Mandatory</b>\n        @returns{Array|Null}    <ul><li>An array of Objects - Handle to the event (s) that match the specified input string in the device calendar.</li>\n        <li>If there is no event found that matches the specified criteria.</li></ul>\n        @Available All Platforms\n        @usage <pre>function findCalendarEvent()<br/>\n{\n    try <br/>\n    {\n        alert(\"Finding the calendar events\");<br/>\n        var evtobj={type:\"starting\",start:\"15/03/2012 12:46:45\",<br/>\n        finish:\"24/12/2012 12:59:45\"};<br/>\n        var events = kony.phone.findCalendarEvents(evtobj);<br/>\n        alert(\"Found calendar event(s)\");<br/>\n    }\n    catch(err)<br/>\n    {\n        alert(\"error in removeCalendarEvent:: \"+err);<br/>\n    }\n\n}</pre>",
                "!type": "fn(evtobj: ?)"
            },
            "getRemoveEventOptions": {
                "!doc": "This api returns array of constants indicating possible actions for removing a particular event depending on the native support on the device. One of the values returned by this API needs to be passed as \"removeOption\" to kony.phone.removeCalendarEvent api.\n        @param  eventHandle{Object} eventHandle is single event handle from array of events returned by kony.phone.findCalendarEvents api\n        @returns {Array}\n        @Available All Platforms except BlackBerry 10, Mobile Web, Windows 8,  Kiosk, Desktop Web, and SPA.\n        @usage <pre>function getRemoveEventOptions()<br/>\n{\n    var removeOptions = kony.phone.getRemoveEventOptions(eventHandle);<br/>\n\n}</pre>",
                "!type": "fn(eventHandle: ?) -> [?]"
            },
            "hasVibratorSupport": {
                "!doc": "This API returns whether vibrator is supported on a device.\n @returns value {Boolean} true: The device supports vibrator. false: The device does not support vibrator.\n @Available  Android and Windows.\n @usage <pre>\n Note:  For Android, make sure that the VIBRATE permission is defined under the Manifest Properties.\n        uses-permission android:name=\"android.permission.VIBRATE\"\n\n kony.phone.hasVibratorSupport();\n</pre>",
                "!type": "fn()"
            },
            "openEmail": {
                "!doc": "This API allows the application to launch the native email client with predefined email addresses, subject, body, and attachments.\n        @param  torecipients{String}    List of email addresses to be included in \"to\" list. For example, \"john@example.com\",\"stephen.joseph@kony.com\" \"test@somecompany.com\" <b>Mandatory</b>\n        @param  ccrecipients{String}    List of email addresses to be included in \"cc\" list. For example, \"john@example.com\",\"stephen.joseph@kony.com\" \"test@somecompany.com\". <b>Optional</b>\n        @param  bccrecipients{String}   List of email addresses to be included in \"bcc\" list. For example, \"john@example.com\",\"stephen.joseph@kony.com\" \"test@somecompany.com\". <b>Optional</b>\n        @param  subject{String} Subject to be part of the email. <b>Optional</b>\n        @param  messagebody{String} Body to be part of the email. <b>Optional</b>\n        @param  ismessagebodyhtml{Boolean}  Specifies whether message body must be treated as HTML content. <b>Optional</b>\n        @param  attachments{Object} Each attachment is a Object with the following key-value pairs: mimetype [String] Standard mime types like image/png or image/jpg or image/etc. attachment [Object] Rawbytes received from the camera, image widget, or openmediagallery api.filename (optional) [String] name of the file (along with the extension) to appear as attachment. The filename must include the complete path to the file that you want to attach. For example, \"C:/Users/user123/example.pdf\".\n        @Available All Platforms\n        @usage <pre>function openEmail()<br/>\n{\n    try<br/>\n    {\n        var to=[\"abc@fgh.com\"];<br/>\n        var cc=[\"abc@abc.com\"];<br/>\n        var bcc = [\"xyz@xyz.com\"];<br/>\n        var sub = \"Hello\";<br/>\n        var msgbody = \"Testing openEmail\";<br/>\n        kony.phone.openEmail(to,cc,bcc,sub,msgbody,false);<br/>\n    }<br/>\n    catch(err)<br/>\n    {\n        alert(\"error in opening Email:: \"+err);<br/>\n    }\n}</pre>",
                "!type": "fn(torecipients: ?, ccrecipients: ?, bccrecipients: ?, subject: ?, messagebody: ?, ismessagebodyhtml: ?, attachments: ?)"
            },
            "openMediaGallery": "fn(onselectioncallback: ?, querycontext: ?)",
            "performHapticFeedback": {
                "!doc": "This api provides haptic feedback to user.\n@param  value {number} hapticFeedbackValue [constant]. Indicates the type of haptic feedback. Possible values are: 0 - kony.hapticFeedback.SUCCESS - This triggers a haptic feedback for a successful event. 1 - kony.hapticFeedback.WARNING - This triggers a haptic feedback representing warning to user. 2 - kony.hapticFeedback.FAILURE - This triggers a haptic feedback for a failure event. 3 - kony.hapticFeedback.LIGHT – This triggers a haptic feedback of light intensity. 4 - kony.hapticFeedback.MEDIUM - This triggers a haptic feedback of medium intensity. 5 - kony.hapticFeedback.HEAVY -  This triggers a haptic feedback of heavy intensity. 6 - kony.hapticFeedback.SELECTION – This triggers a haptic feedback representing selection/state change. <b>Mandatory</b>\n@returns None.\n@Available iOS\n@usage <pre> kony.phone.PerformHapticFeedback (kony.hapticFeedback.SUCCESS);\n</pre>",
                "!type": "fn(hapticFeedbackValue: ?)"
            },
            "removeCalendarEvent": {
                "!doc": "This API deletes an event that matches the specified event handled from the device calendar.\n        In iPhone, this API returns array of events. Events are dictionary item that a user provides while adding an event. This new dictionary will also contain new key named as \"event\" that stores eventId. EventId from dictionary is used in removeCalendarEvent to remove an event.\n        @param  eventHandle{Object} Handle to the event that needs to be removed, which is returned by a find operation. <b>Mandatory</b>\n        @param  removeOption{String} constants.CALENDAREVENT_REMOVE_THIS (or) CALENDAREVENT_REMOVE_THIS_AND_FUTRUE. This is respected only for recurring events. If this option is not specified or invalid value is passed for recurring event, the current event and the future recurrences will be deleted. i.e Default fallback value of removeOption is remove current and all future events. <b>Optional</b>\n        @Available All Platforms except BlackBerry 10, Mobile Web, Windows 8,  Kiosk, Desktop Web, and SPA.\n        @usage <pre>function removeCalendarEvent()<br/>\n{\n    try <br/>\n    {\n         var evtobj = {<br/>\n            type: \"starting\",<br/>\n            start: \"20/03/2014\",<br/>\n            finish: \"21/03/2014\"<br/>\n            };<br/>\n        var events = kony.phone.findCalendarEvents(evtobj);\n        kony.phone.removeCalendarEvent(events[1]);<br/>\n        alert(\"Event deleted successfully\");<br/>\n    // It deletes an event that matches the specified event handle from the device calendar<br/>\n    }\n    catch(err)<br/>\n    {\n        alert(\"error in removeCalendarEvent:: \"+err);<br/>\n    }\n\n}</pre>",
                "!type": "fn(eventHandle: ?, removeOption: ?)"
            },
            "sendSMS": {
                "!doc": "This API provides access to the Messaging service of the underlying platform. You can send a text message to a specified number. This API accesses the messaging application of the underlying platform and uses that application to send text message to the specified number.\n        @param  phonenumber{String} Number to which the SMS must be sent. <b>Mandatory</b>\n        @param  text{String}    Content of the SMS. <b>Mandatory</b>\n        @Available All Platforms\n        @usage <pre>function sendSMS()<br/>\n{\n    try <br/>\n    {<br/>\n\n        var phNo=\"123456789\";<br/>\n        var msg= \"hello world\";<br/>\n        var result = kony.phone.sendSMS(phNo,msg) ;<br/>\n        if(result == 0)<br/>\n        {\n            alert(\"message sent successfully\");<br/>\n        }\n        else<br/>\n        {\n            alert(\"Unable to send sms\");<br/>\n        }\n\n\n    }\n    catch(err)<br/>\n    {\n        alert(\"error in sending sms:: \"+err);<br/>\n    }\n\n}</pre>",
                "!type": "fn(phonenumber: ?, text: ?)"
            },
            "startVibration": {
                "!doc": "This API starts vibration on the device. If the device doesn't support vibration, this method has no effect.\n @param vibrationConfig {Object[]} - Specifies the list of all the vibration patterns as an array. Each vibration pattern object accepts \"delay\", \"duration\" and \"amplitude\" keys.\n @param vibrationConfig[].delay {number} - Specifies the delay in milliseconds. This must be a positive number. The default value of delay must be \"0\" milliseconds. <b>Mandatory</b>\n @param vibrationConfig[].duration {number} - Specifies the number of milliseconds to vibrate. This must be a positive number. The default value of duration must be \"0\" milliseconds. <b>Mandatory</b>\n @param vibrationConfig[].amplitude {number} - Control the strength of the vibration. This must be a value between 0 and 255. <b>Optional</b>\n @param repeat {Boolean} -  true : repeat vibration pattern until kony.phone.cancelVibration() is called. false : don't repeat vibration pattern. Default value is \"false\".\n @Available  Android, iOS and Windows.\n @usage <pre>In the following example the pattern will cause this vibrates the device for 100  ms, then pauses for 200  ms before vibrating the device again for another 300  ms.\n\n var config = [{\"delay\" : 0, \"duration\" : 100, \"amplitude\" : 250}, <br/>\n                 {\"delay\" : 200, \"duration\" : 300, \"amplitude\" : 150}];\n\n kony.phone.startVibration (config, false);\n\n</pre>",
                "!type": "fn(vibrationConfig: ?, repeat: ?)"
            }
        },
        "print": {
            "!doc": "This API receives any number of arguments, and prints their values to stdout, using the tostring function to convert them to strings. print is not intended for formatted output, but only as a quick way to show a value, typically for debugging. For formatted output, use string.format.\n@param myString{string|Object|Number|Array} Specifies the string to be printed <b>Mandatory</b>\n@Available All Platforms\n@usage <pre>kony.print (\"This is a test message.\");</pre>",
            "!type": "fn(myString: ?)"
        },
        "props": {
            "!doc": "Properties API's",
            "getProperty": {
                "!doc": "This API is used to access parameters from an external properties file.\n    @param group{null} Current value is null for JavaScript and nil for Lua, this parameter will be used and enhanced in the future.<b>Mandatory</b>\n    @param key{String} The key for which you want to access the value.\n    @returns The value that matches the given key. null or nil is returned if there is no value matching the given input key in the properties file\n    @Available SPA and Mobile Web\n    @usage <pre>frmhome.label103982946332169.text=kony.props.getProperty(null,\"key1\");\n</pre>",
                "!type": "fn(group: ?, key: ?)"
            }
        },
        "push": {
            "!doc": "Push API's",
            "deRegister": {
                "!doc": "This API allows an application on a device to deregister from Push Notifications. On successful deregistration, the platform invokes the onsuccessfulderegistration function and on deregistration failure, the platform invokes the onfailurederegistration function.\n@param Object Is an empty Object. <b>Mandatory</b>\n@Available iPhone Android BlackBerry Windows\n@usage <pre>var myhash = new Hash();\n    kony.push.deRegister(myhash);</pre>",
                "!type": "fn(emptyJSObject: ?)"
            },
            "getMessageCount": {
                "!doc": "This API fetches the number of unread push notification messages that are stored on the device database.\n@returns {Number} Returns the number of messages.\n@Available Available only on BlackBerry\n@usage <pre>var count = kony.push.getMessageCount();\nkony.print(\"Message Count : \"+count);\nprints the number of unread messages</pre>",
                "!type": "fn() -> number"
            },
            "getMessages": {
                "!doc": "Gets the unread notification messages from the device database. Once this function is called, the device database is cleared and the message count is reset to zero.\n@returns {Object} Returns an object that has all the messages.\n@Available All only on BlackBerry\n@usage <pre>var messages = kony.push.getMessages();\nreturns an object that contains unread messages</pre>",
                "!type": "fn() -> ?"
            },
            "register": {
                "!doc": "This API allows you to register the application and the mobile device for Push Notifications. This API takes a Object as a parameter. The platform invokes onsuccessfulregistration function for successful registration and onfailureregistration function for registration is a failure.\n@param configObject {Object|Array}<ul><li>(iPhone) The Object for iPhone must contain any or all of the following: 0 - Specifies the Notification type as Badge. 1 - Specifies the Notification type as Sound. 2 - Specifies the Notification type as Alert.</li><li> (Android) The Object for Android must contain the following: senderid - Specifies the ID of the account authorized to send messages to the application.</li><li>(BlackBerry)The Object for Blackberry must contain the following:appid - Specifies the unique application ID. port - Specifies the port number on the device where the Push Notifications are received. bpasurl - Specifies an HTTP version of the PPG base URL. appicon - Specifies the icon to be displayed when there are no messages in the queue. starappicon - Specifies the icon to be displayed when there are unread messages in the queue. statusbaricon - Specifies the icon to be displayed in the status bar.</li><li>Windows Phone 7 does not require any input parameters. If needed you can specify the following <b>Optional</b> parameter in the Object: remoteimageurls (<b>Optional</b>) - Specifies an array of remote images to be displayed for a Tile message by including URl. enableraw (<b>Optional</b>) (Boolean) : The default value is true (receive raw messages). If false, raw messages can not be received. enabletile (<b>Optional</b>) (Boolean) : The default value is true (receive tile messages). If false, tile messages cannot be received. enabletoast (<b>Optional</b>) (Boolean) : The default value is true (receive toast messages). If false, toast messages cannot be received.</li>\n@Available iPhone, Android, BlackBerry, Windows\n@usage <pre>//The following code snippet uses the senderid to register for Push Notifications:\nvar config = {senderid:\"konyc2dm@gmail.com\"};\nkony.push.register(config);\n\n//This example is for Android\n//The following code snippet uses the senderid to register for Push Notifications:\nvar config = {senderid:\"konyc2dm@gmail.com\"};\nkony.push.register(config);\n\n//This example is for Blackberry\nvar config = {appid:\"1016-1no1ha3e5111ryMa71\",port:20921,bpasurl:\"http://pushapi.eval.blackberry.com\",appicon:\"icon.png\",starappicon:\"starappicon.png\",statusbaricon:\"statusicon.png\"}\nkony.push.register(config);\n\n\n//This example is for iPhone\n//The following code snippet uses the notification types to register\nfor Push Notifications:\nvar config={0,1,2};\nkony.push.register(config);\n\n//This example is for WindowsPhone\n\nvar config={-remoteimageurls:{\"http://www.thisisfanzoo.com/blog/samples/logo2.png\",\"http://www.yahoo.com/samples/logo3.png\"},enableraw:true,enabletile:false,enabletoast:false};\nkony.push.register(config);\n</pre>",
                "!type": "fn(configObject: ?)"
            },
            "setCallbacks": {
                "!doc": "If the device receives a Notification, the device executes the function of your choice. You can specify the functions to be executed for Push Notification in a Object for this API.\n@param Object {Object} Specifies the functions to be executed for Push Notification.\n@Available BlackBerry, iPhone, Windows, Android\n@usage <pre>\nconfig = {onsuccessfulregistration:onsuccess, onfailureregistration:onfailure, onlinenotification:onlineCallback, onsuccessfulderegistration:onderegsuccess, onfailurederegistration:onderegfailure }; kony.push.setCallbacks(config);\n//This example is for onsuccesregistration\nfunction onsuccess(identifier)\n{\n    kony.print(\"Registered SUCCESSFULLY :\"+identifier);\n//Send the identifier to the Push Notifications Sender.\n}\n//This example is for onfailureregistration\nfunction onfailure(errortable)\n{kony.print(\"Registration Failed\");\nwindow.Alert(\"Message : \" +errortable\n{\"errorcode\"}+errortable{\"errormessage\"},null,\"info\",null,,\"Info\");\n}\n\n//This example is for onlinenotification\nfunction onlineNotification(payload)\n{/\n/payload is a Object contains a set of key value pairs provided by\nthe respective Push Notification Server\n}/\n/Note: This function is not applicable on Blackberry platform. ***********\n\n//This example is for offlinenotification\nfunction offlineNotification(payload)\n{/\n/payload is Object contains a set of key value pairs provided by\nthe respective Push Notification Server\n}\nNote: This function is not applicable on Blackberry platform.***********\n\n\n//This example is for onsuccessfulderegistration\nfunction onderegsuccess()\n{\nprint(\"Deregistered Successfully :\");\n}\n\n\n//This example is for onfailurederegistration\nfunction onderegfailure(errortable)\n{kony.print(\"Deregistration Failed\");\nwindow.Alert(\"Message : \" +errortable\n{\"errorcode\"}+errortable{\"errormessage\"},null,\"info\",null,,\"Info\");\n}\n</pre>",
                "!type": "fn(Object: ?)"
            }
        },
        "settings": {
            "!doc": "Settings constants",
            "WIFI_DISABLED": "number",
            "WIFI_DISABLING": "number",
            "WIFI_ENABLED": "number",
            "WIFI_ENABLING": "number",
            "WIFI_UNKNOWN": "number"
        },
        "store": {
            "!doc": "Store API's",
            "clear": {
                "!doc": "This API allows you to empty the database by clearing all the key-value pairs. If there are no key-value pairs, then the API does not do anything.\n        @Available All Platforms\n        @usage <pre>try<br/>\n{\n    kony.store.clear();<br/>\n    alert(\"store is cleared\");<br/>\n}\ncatch(err)<br/>\n{\n    alert(\"error occured in clear() and the error is :\"+err);<br/>\n\n}</pre>",
                "!type": "fn()"
            },
            "getItem": {
                "!doc": "This API returns a structured clone of the current value associated with the given key. If the given key does not exist in the list associated with the object then this method returns null.\n        @param  keyname{String} Specifies the keyname from which the item needs to be fetched. <b>Mandatory</b>\n        @returns {string}   Returns the item located at the specified index.\n        @Available All Platforms\n        @usage <pre>var myValue = kony.store.getItem(\"name\");<br/>\nalert(\"name is \"+myValue);</pre>",
                "!type": "fn(keyname: ?) -> string"
            },
            "key": {
                "!doc": "This API returns the name of the nth key in the list. If n is greater than the number of key/value pairs in the object, then this method returns null.\n        @param  index{number}   Specifies the index for which the key name is to be returned. <b>Mandatory</b>\n        @returns{String|Null}   <ul><li>Returns the keyname of the specified index.</li>\n        <li>Returns null when the specified index is greater than the number of key/value pairs in the object.</li></ul>\n        @Available All Platforms\n        @usage <pre>var keyName = kony.store.key(0);<br/>\nalert(\"first key name is \"+keyName);</pre>",
                "!type": "fn(index: ?)"
            },
            "length": {
                "!doc": "This API returns the length of the local storage.\n        @returns    {String}    Returns the length of the local storage.\n        @Available All Platforms\n        @usage <pre>mylength = kony.store.length();<br/>\nalert(\"length is \"+mylength);</pre>",
                "!type": "fn() -> string"
            },
            "removeItem": {
                "!doc": "This API removes the item identified by the key, if it exists. If no item with that key exists, the method does not perform any action.\n        @param  keyname{String} Specifies the keyname for which the item needs to be removed. <b>Mandatory</b>\n        @Available All Platforms\n        @usage <pre>kony.store.removeItem(\"name\");<br/>\nalert(\"name removed\");</pre>",
                "!type": "fn(keyname: ?)"
            },
            "setItem": {
                "!doc": "This API creates a structured clone of the given value. If this raises an exception then the list associated with the object is left unchanged.\n        @param  key{String} Specifies the keyname for which the item needs to be set <b>Mandatory</b>\n        @param  Value{Object} Specifies the value that must be set at the given index. This value can be a number, string, Boolean, or a Lua table.<b>Mandatory</b>\n        @Available All Platforms\n        @usage <pre>kony.store.setItem(\"keyValue5\", \"this is a key value\");\nkony.store.setItem(\"keyValue4\", true);</pre>",
                "!type": "fn(key: ?, Value: ?)"
            }
        },
        "stream": {
            "!doc": "Stream API's",
            "deregisterDataStream": {
                "!doc": "This API allows you to deregister the application that was registered earlier with the Streaming Server.\n@param streamingidentifier{String} Streaming identifier returned during registration.\n@Available All Platforms except Desktop Web\n@usage <pre>Example 1\nvar status = kony.stream.deregisterDataStream(\"1309352259757\");\n//deregisters the data stream with the specified identifier on  BlackBerry platform\nprint(status);\nExample 2\nvar status = kony.stream.deregisterDataStream(\"1\");\n//deregisters the data stream with the specified identifier on  Windows Phone\nprint(status);</pre>",
                "!type": "fn(streamingidentifier: ?)"
            },
            "registerDataStream": {
                "!doc": "This API registers the application for streaming with the OS provider of the underlying platform.\n@param protocol {String} Specifies the underlying streaming protocol to be used. Kony currently supports only HTTP1.1 protocol. <b>Mandatory</b>\n@param configparams {Object} Specifies an Object with key-value pairs of configuration parameters required for the underlying protocol. <b>Mandatory</b> The configuration parameters for HTTP1.1 protocol are : 1. url {String} <b>Mandatory</b> 2. cookie {Object} - Optional with key-value pairs: a. streamingid {String} b. jessessionid {String} 3. headers {Object} <b>Optional</b> 4. params {Object} <b>Optional</b>\n@param method {String} Specifies the method. Possible values are: a. get b. post(Default value is post) For example: \"post\"  Mandatory\n@param outputformat{String} Specifies the output format of the stream. <b>Mandatory</b> Currently supported values are: a. String (default) b. JSON\n@param callback{Function}   Specifies callback {Function} Specifies the function that needs to be executed when the streaming data is available. <b>Mandatory</b> The callback function has the following signature: callbackFunction(status, data, context)\n@returns {String} Stream identifier for this registration. This identifier is to be used during deregistration. Null incase there is any input error.\n@Available All Platforms except Desktop Web\n@usage <pre>Example1:\nfunction myCallbackFunction(status, data, context)\n{//execute the logic here}\nvar cookieParams = { streamingid: \"12218181agdgdhjhjd\", jessessionid: \"198181819919agagah1t1g1 };\nvar configParams = { url: \"http//www.mobilestreaming.kony.com\", cookie: cookieParams, headers:{authmode:basic},arams:{quote=\"goog\"}, method=\"post\"};\nvar streamObj = kony.stream.registerDataStream(\"http1.1\", configParams, \"string\", myCallbackFunction);\n//all the parameters are passed (<b>Mandatory</b> and <b>Optional</b>) and the output parameter is 'string' print(streamObj{\"streamID\"});\n\nExample2\nfunction myCallbackFunction(status, data, context)\n{//execute the logic here}\nvar configParams = { url: \"http//www.mobilestreaming.kony.com\", method: \"post\" };\nvar streamObj = kony.stream.registerDataStream(\"http1.1\", configParams, \"json\", myCallbackFunction);\n//only mandatory parameters are passed and the output parameter is  json\nprint(streamObj{\"streamID\"});</pre>",
                "!type": "fn(protocol: ?, configparams: ?, outputformat: ?, callback: ?) -> string"
            },
            "setCallback": {
                "!doc": "This API specifies the callback function that needs to be executed for a registered data stream.\n@param streamingid {String} Specifies the unique ID that identifies the stream. <b>Mandatory</b>\n@param callbackfunction {Function} Specifies the callback function that needs to be executed. <b>Mandatory</b>\n@Available All Platforms except Desktop Web\n@usage <pre>function myCallbackFunction1(status, data, context)\n    {//execute the logic here}\n    var streamTab = kony.stream.setCallback(“1”, myCallbackFunction1);\n    print(streamTab{\"status\"});</pre>",
                "!type": "fn(streamingid: ?, callbackfunction: ?)"
            }
        },
        "string": {
            "!doc": "String API's",
            "containsChars": {
                "!doc": "This API verifies if any one of the specified set of characters is available in the given string and returns a boolean value.\n    @param inputstring{String}  Specifies the input string that needs to be verified. <b>Mandatory</b>\n    @param characterArray{Object}  Specifies the set of characters that need to be searched within the input string. <b>Mandatory</b>\n    @returns {Boolean}  Returns whether the given input string contains any one of the characters in the specified list.\n    @Available All platforms.\n    @usage <pre>var inputstring = \"abdcdADV\";<br/>\n\nvar charsArr = [\"|\",\"-\"];<br/>\n\nkony.print(kony.string.containsChars(inputstring, charsArr));<br/>\n\n// prints false as | and - are NOT contained in the input<br/>\n\ninputstring = \"abdcd|ADV\"<br/>\n\nkony.print(kony.string.containsChars(inputstring, charsArr));<br/>\n\n// prints true as | is contained in the input<br/>\n</pre>",
                "!type": "fn(inputstring: ?, characterArray: ?) -> bool"
            },
            "containsNoGivenchars": {
                "!doc": "This API verifies that the input string does not contain any of the specified characters and returns a boolean value.\n    @param inputstring{String}  Specifies the input string that needs to be verified. <b>Mandatory</b>\n    @param charsArray{Object}  Specifies the set of characters that need to be searched within the input string. <b>Mandatory</b>\n    @returns {Boolean}  Returns whether the given input string contains none of the characters in the specified list.\n    @Available All platforms.\n    @usage <pre>var inputstring = \"abdcdADV\";<br/>\n\nvar charsArr = [\"|\",\"-\"];<br/>\n\nkony.print(kony.string.containsNoGivenChars(inputstring, charsArr));<br/>\n\n//prints true as string does not contain the given characters (| and - are NOT contained in the input)<br/>\n\ninputstring = \"abdcd|ADV\";<br/>\n\ncharsArr = [\"|\",\"-\", \"a\" ];<br/>\n\nkony.print(kony.string.containsNoGivenChars(inputstring, charsArr));<br/>\n\n//prints false as string contains the given character \"a\".<br/>\n</pre>",
                "!type": "fn(inputstring: ?, charsArray: ?) -> bool"
            },
            "containsOnlyGivenChars": {
                "!doc": "This API verifies if only (and only) the specified set of characters is available in the given string and returns a boolean value.\n    @param inputstring{String}  Specifies the input string that needs to be verified. <b>Mandatory</b>\n    @param characterArray{Object}  Specifies the set of characters that need to be searched within the input string. <b>Mandatory</b>\n    @returns {Boolean}  Returns whether the given input string contains only the characters in the specified list.\n    @Available All platforms.\n    @usage <pre>var inputstring = \"abdcdADV\";<br/>\n\nvar charsArr = [\"a\",\"b\", \"d\", \"c\", \"A\", \"D\", \"V\"];<br/>\n\nkony.print(kony.string.containsOnlyGivenChars(inputstring,charsArr));<br/>\n\n// prints true as string contains only given chars<br/>\n\ninputstring = \"abdcdADVH\";<br/>\n\nkony.print(kony.string.containsOnlyGivenChars(inputstring,charsArr));<br/>\n\n// prints false as string contains character 'H' which is not in given chars<br/>\n</pre>",
                "!type": "fn(inputstring: ?, characterArray: ?) -> bool"
            },
            "endsWith": {
                "!doc": "This API returns a boolean value indicating if the source string ends with the specified string.\n    @param sourcestring{String}  Specifies the source string. <b>Mandatory</b>\n    @param comparestring{String}  Specifies the string to be compared with the source string. <b>Mandatory</b>\n    @param ignorecase{Boolean}  If you do not specify the ignorecase parameter, the comparison of the string will be case insensitive (ignorecase parameter value is taken as true).If you want the comparison to be case sensitive, you must specify the value as false. <b>Optional</b>\n    @returns {Boolean} Returns true if the source string ends with the compared string.\n    @Available All platforms.\n    @usage <pre>var endsWith = kony.string.endsWith (\"Hello World\", \"world\");<br/>\n\nkony.print (endsWith);<br/>\n\nIn the above example, true is the value returned.</pre>",
                "!type": "fn(sourcestring: ?, comparestring: ?, ignorecase: ?) -> bool"
            },
            "equalsIgnoreCase": {
                "!doc": "This API compares the contents of two strings without case sensitivity and returns a Boolean indicating if they are a match.\n    @param string1{String}  Specifies the content of the first string. <b>Mandatory</b>\n    @param string2{String}  Specifies the content of the second string. <b>Mandatory</b>\n    @returns {Boolean} Returns true if both the strings match.\n    @Available All platforms.\n    @usage <pre>var ignorecase = kony.string.equalsIgnoreCase(\"Hello\",\"HEllo\");<br/>\n\nkony.print (ignorecase);\n</pre>",
                "!type": "fn(string1: ?, string2: ?) -> bool"
            },
            "isAsciiAlpha": {
                "!doc": "This API verifies if the input string contains only ASCII alphabet characters and returns a boolean value.\n    @param inputstring{String}  Specifies the input string that needs to be verified. <b>Mandatory</b>\n    @returns {Boolean}  Returns whether the input string contains only alphabetic characters.\n    @Available All platforms.\n    @usage <pre>var inputstring = \"abdcdADV\";<br/>\n\nkony.print(kony.string.isAsciiAlpha(inputstring));<br/>\n\n//prints true<br/>\n\ninputstring = \"123ab3dcdADV\";<br/>\n\nkony.print(kony.string.isAsciiAlpha(inputstring));<br/>\n\n//prints false\n</pre>",
                "!type": "fn(inputstring: ?) -> bool"
            },
            "isAsciiAlphaNumeric": {
                "!doc": "This API verifies if the input string contains only ASCII alphabet characters and numbers, and returns a boolean value.\n    @param inputstring{String}  Specifies the input string that needs to be verified. <b>Mandatory</b>\n    @returns {Boolean}  Returns whether the input string contains only alphanumeric characters.\n    @Available All platforms.\n    @usage <pre>var inputstring = \"abdcdADV\";<br/>\n\nkony.print(kony.string.isAsciiAlphaNumeric(inputstring));<br/>\n\n//prints false because the string is not a combination of alphanumeric characters<br/>\n\ninputstring =\"abcd1234\"<br/>\n\nkony.print(kony.string.isAsciiAlphaNumeric (inputstring));<br/>\n\n//prints true because the string is a combination of alphanumeric characters\n</pre>",
                "!type": "fn(inputstring: ?) -> bool"
            },
            "isNumeric": {
                "!doc": "This API verifies if the input string contains only numeric characters, and returns a boolean value.\n    @param inputstring{String}  Specifies the input string that needs to be verified. <b>Mandatory</b>\n    @returns {Boolean}  Returns whether the input string contains only numeric characters.\n    @Available All platforms.\n    @usage <pre>kony.print(kony.string.isNumeric(\"123ab3dcdADV\")) ;<br/>\n\n// prints false<br/>\n\nkony.print(kony.string.isNumeric(\"12344\")) ;<br/>\n\n// prints true\n</pre>",
                "!type": "fn(inputstring: ?) -> bool"
            },
            "isValidEmail": {
                "!doc": "This API verifies that the input string does not contain any of the specified characters and returns a boolean value.\n    @param inputstring{String}  Specifies the input string that needs to be verified. <b>Mandatory</b>\n    @returns {Boolean}  Returns whether the given input string satisfies the email rules and is a valid email address.\n    @Available All platforms.\n    @usage <pre>var inputstring = \"abcd@\";<br/>\n\nkony.print(kony.string.IsValidEmail(inputstring));<br/>\n\n//prints false as there are no chars after @<br/>\n\ninputstring = \"abcd@tccc\";<br/>\n\nkony.print(kony.string.IsValidEmail(inputstring));<br/>\n\n//prints false as the chars after @ does not have . followed by at least 2 chars<br/>\n</pre>",
                "!type": "fn(inputstring: ?) -> bool"
            },
            "rep": {
                "!doc": "This API generates a string which is n copies of the source string concatenated together.\n    @param sourcestring{String}  Specifies the source string. <b>Mandatory</b>\n    @param no{Number}  Specifies the number of times the source string must be repeated. <b>Mandatory</b>\n    @returns {String} A string containing n copies of the source string concatenated together is returned.\n    @Available All platforms.\n    @usage <pre>var rep = kony.string.rep(\"Hello\",3);<br/>\n\nkony.print(rep);<br/>\nIn the above example, \"HelloHelloHello\" is the value returned.</pre>",
                "!type": "fn(sourcestring: ?, no: ?) -> string"
            },
            "reverse": {
                "!doc": "This API reverses the characters in the source string.\n    @param string{String}  Specifies the source string. <b>Mandatory</b>\n    @returns {String} A string containing the characters of the source string in reverse is returned.\n    @Available All platforms.\n    @usage <pre>var reverse = kony.string.reverse(\"Hello\");<br/>\n\nkony.print (reverse);<br/>\n\nIn the above example, \"olleH\" is the value returned</pre>",
                "!type": "fn(string: ?) -> string"
            },
            "startsWith": {
                "!doc": "This API returns a boolean value indicating if the source string begins with the specified string.\n    @param sourcestring{String}  Specifies the source string. <b>Mandatory</b>\n    @param comparestring{String}  Specifies the string to be compared with the source string. <b>Mandatory</b>\n    @param ignorecase{Boolean}  If you do not specify the ignorecase parameter, the comparison of the string will be case insensitive (ignorecase parameter value is taken as true).If you want the comparison to be case sensitive, you must specify the value as false. <b>Optional</b>\n    @returns {Boolean} Returns true if the source string begins with the compared string.\n    @Available All platforms.\n    @usage <pre>var startswith = kony.string.startsWith(\"Hello World\", \"hello\");<br/>\n\nkony.print (startswith);</pre>",
                "!type": "fn(sourcestring: ?, comparestring: ?, ignorecase: ?) -> bool"
            },
            "trim": {
                "!doc": "This API removes the leading and ending spaces from the source string.\n    @param string{String}  Specifies the source string. <b>Mandatory</b>\n    @returns {String}  A string without the leading and ending spaces is returned.\n    @Available All platforms.\n    @usage <pre>var trim = kony.string.trim(\" Hello World \");<br/>\n\nkony.print (trim);\n</pre>",
                "!type": "fn(string: ?) -> string"
            }
        },
        "theme": {
            "!doc": "Theme API's",
            "createTheme": {
                "!doc": "This API enables you to create a theme.\n    @param url{String}  Specifies a string (URL) from which the theme is to be downloaded.<b>Mandatory</b>\n    @param themeIdentifier {Boolean}    Specifies a flag that indicates if the current theme must be replaced with the same identifier or use the       theme only in the current session. <b>Mandatory</b>\n    @param onsuccesscallback {Function} Specifies the callback function that needs to be executed in case of success. This callback function is executed after applying the specified theme. <b>Mandatory</b>\n    @param onerrorcallback {Function}   Specifies the callback function that needs to be executed in case of success. This callback function is executed after the theme is created.\n    @returns {Boolean|Number} <ul><li>Returns the successfully created theme.</li><li>Returns the error code</li></ul>\n    @Available All Platforms\n    @usage <pre>function onsuccesscallback() <br/>\n {\n     alert(\"successfully set the theme to app\")<br/>\n }\n\nfunction onerrorcallback() <br/>\n {\n     alert(\"Theme is not set to the app\")<br/>\n }\nkony.theme.createTheme(\"\", \"Mytheme\",onsuccesscallback,onerrorcallback);</pre>",
                "!type": "fn(url: ?, themeidentifier: ?, onsuccesscallback: ?, onerrorcallback: ?) -> bool|number"
            },
            "deleteTheme": {
                "!doc": "This API allows you to delete a specified theme in the application programmatically.\n@param themeidentifier{String}  Specifies a string that denotes the theme ID. The specified theme will be deleted from the application.<b>Mandatory</b>\n@param onsuccesscallback {Function} Specifies the callback function that needs to be executed in case of success. This callback function is executed after applying the specified theme. <b>Mandatory</b>\n@param onerrorcallback {Function}   Specifies the callback function that needs to be executed in case of success. This callback function is executed after the theme is created.\n@returns {Object} Returns boolean indicating whether the theme is deleted or not. The status can be true or false. true - if the specified theme was deleted successfully. false - if the deletion failed.\n@Available All Platforms\n@usage <pre>kony.theme.deleteTheme (\"green\");</pre>",
                "!type": "fn(themeidentifier: ?, onsuccesscallback: ?, onerrorcallback: ?) -> ?"
            },
            "getAllThemes": {
                "!doc": "This API returns all the themes available in the application.\n    @returns {Array} Represents all theme Identifiers\n    @Available All Platforms\n    @usage <pre>var themes=kony.theme.getAllThemes();\nalert(\"No Of themes are \"+themes.length);</pre>",
                "!type": "fn() -> [?]"
            },
            "getCurrentTheme": {
                "!doc": "This API returns the current theme that is applied to the application.\n@returns {String} Returns the identifier of the current theme that is applied to the application.\n@Available All Platforms\n@usage <pre>var crntThemeData=kony.theme.getCurrentThemeData();\n    alert(\"Current Theme Data is :\"+crntThemeData);</pre>",
                "!type": "fn() -> string"
            },
            "getCurrentThemeData": {
                "!doc": "This API returns the meta data of the current theme in the application.\n@returns {Object} An Object representing the additional data associated with Theme or null.\n@Available All Platforms\n@usage <pre>var crntThemeData=kony.theme.getCurrentThemeData();\n    alert(\"Current Theme Data is :\"+crntThemeData);</pre>",
                "!type": "fn() -> ?"
            },
            "isThemePresent": {
                "!doc": "This API allows you to check the existence of specific theme in the application.\n    @param themeidentifier {string} Specifies a string that represents a theme.<b>Mandatory</b>\n    @returns {Object} The Boolean return value indicates the existence of the intended theme identifier. status - Boolean indicates whether the theme with the theme identifier exists or not. true - if the specified theme exists. false - if the specified theme does not exist.\n    @Available All Platforms\n    @usage <pre>var isThemePresent=kony.theme.isThemePresent(\"green\");\nalert(\"IS theme present ? True/False: \"+isThemePresent);</pre>",
                "!type": "fn(themeidentifier: ?) -> ?"
            },
            "setCurrentTheme": {
                "!doc": "This API allows you to apply a specified theme on the application dynamically.\n    @param themeidentifier{String}  Specifies a string that denotes the theme ID. The specified theme is applied to the application.<b>Mandatory</b>\n    @param onsuccesscallback{Function}  Specifies the callback function that needs to be executed in case of success. This callback function is executed after applying the specified theme. <b>Mandatory</b>\n    @param onerrorcallback {Function}   Specifies the callback function that needs to be executed in case of error.\n    @returns {Object} Returns a table that has the following key-value pairs: status - the status of the execution of this API.true - if the specified theme was applied successfully.false - if there was a problem while applying the specified theme. errorcode - the error code that comes up if there is a failure in the API execution (i.e, status=false).  errormessage - the error message that corresponds to the error code.\n    @Available All Platforms\n    @usage <pre>function onsuccesscallback() <br/>\n {\n     alert(\"successfully set the theme to app\")<br/>\n }\n\nfunction onerrorcallback() <br/>\n {\n     alert(\"Theme is not set to the app\")<br/>\n }\nkony.theme.setCurrentTheme(\"red\",onsuccesscallback,onerrorcallback);</pre>",
                "!type": "fn(themeidentifier: ?, onsuccesscallback: ?, onerrorcallback: ?) -> ?"
            }
        },
        "timer": {
            "!doc": "Timer API's",
            "cancel": {
                "!doc": "This API cancels the timer that has already been scheduled for execution.\n    @param timerid{String}  Specifies the unique ID that identifies the timer that needs to be canceled. <b>Mandatory</b>\n    @usage <pre>function buttoncallback2()<br/>\n{\n\n    try<br/>\n    {\n        kony.timer.cancel(\"mytimer\");<br/>\n    }\n    catch(err)<br/>\n    {\n        alert(\"error in second button onclick and err is:: \"+err);<br/>\n    }\n}</pre>",
                "!type": "fn(timerid: ?)"
            },
            "schedule": {
                "!doc": "This API executes the given function after a specified interval of time.\n  @param timerid{String}    Specifies number that uniquely identifies the watch. <b>Mandatory</b>\n  @param functionobj{Function}  Specifies the function that needs to be executed. <b>Mandatory</b>\n  @param interval{Number}  Specifies the time in seconds after which the function needs to be executed. <b>Mandatory</b>\n  @param repeat{Boolean}  Specifies a flag that indicates if the function needs to executed once or repeated. <b>Mandatory</b>\n  @Available All platforms\n  @usage <pre> function timerFunc() //nested function<br/>\n{\n    i=i+5;<br/>\n    lbl1.text = i+\" secs \";<br/>\n}\nkony.timer.schedule(\"mytimer12\",timerFunc, 5, true);<br/>\nThe function timerFunc will be executed after every 5 seconds.</pre>",
                "!type": "fn(timerid: ?, functionobj: ?, interval: ?, repeat: ?)"
            },
            "setCallback": {
                "!doc": "This API specifies the callback function that needs to be executed for a scheduled timer. The callback function handles the logic that needs to be executed after a scheduled timer was run successfully or the scheduled timer failed to execute.\n    @param timerid{String}  Specifies the unique ID that identifies the timer that needs to be canceled. <b>Mandatory</b>\n    @param callbackfunction{Function}  Specifies the callback function that needs to be executed. <b>Mandatory</b>\n    @Available All platforms.\n    @usage <pre>//nested function<br/>\n\nfunction timerFunc1()<br/>\n{\n    alert(\"Timer invoked\");<br/>\n}\nkony.timer.setCallBack(\"mytimer\",timerFunc1);</pre>",
                "!type": "fn(timerid: ?, callbackfunction: ?)"
            }
        },
        "type": {
            "!doc": "This API retrieves the data type of the specified input.\nThe possible return values are:string,number,boolean,function,userdata,null\n@param variable{String|Number|Boolean|function|userdata|null} Specifies the value for which you want to retrieve the data type. <b>Mandatory</b>\n@returns {String}   Returns a String that determines the data type of the specified input.\n@Available All platforms\n@usage <pre>var myVal = 2000;\nvar varType = kony.type(myVal);//Returns a number\nvar varType1 = type(\"hello\");\nvar varType = kony.type(myVal);//Returns a string</pre>",
            "!type": "fn(variable: ?) -> string"
        },
        "types": {
            "RawBytes": {
                "!doc": "types RawBytes API",
                "getTempPath": {
                    "!doc": "This API returns the path where source files of all Rawbytes are stored.\n@returns {String} Path to the source files of Rawbytes.\n@Available iOS\n@usage <pre>\n   var tempPath = kony.types.RawBytes.getTempPath();\n    </pre>",
                    "!type": "fn() -> string"
                }
            }
        },
        "ui": {
            "!doc": "UI API's",
            "Alert": {
                "!doc": "Creates a new Alert object\n@class kony.ui.Alert\n@returns {kony.ui.Alert}",
                "!type": "fn(basicProperties: ?, platformSpecificProperties: ?) -> +kony.ui.Alert"
            },
            "BarButtonItem": {
                "!doc": " Creates a new BarButtonItem object.\n @param propertyConfig {Object} Specifies properties and their values in new BarButtonItem\n @Available iOS platform\n @class kony.ui.BarButtonItem\n @returns {kony.ui.BarButtonItem}\n @usage <pre>\n var barbutton = new kony.ui.BarButtonItem({\n     type:constants.BAR_BUTTON_IMAGE,\n     tintColor: hex color string,\n     style :constants.BAR_ITEM_STYLE_PLAIN,\n     enabled :true, action : funtionObject,\n     metaData:{image:\"imagename\"}\n });\n</pre>",
                "!type": "fn(propertyConfig: ?) -> +kony.ui.BarButtonItem",
                "prototype": {
                    "setBackgroundImage": {
                        "!doc": " Sets background image for barbutton item.\n @param imageConfig{Object} Specifies image source and barMetrics for the background image to be set\n @Available iPhone and iPad platforms\n @usage <pre>\n item.setBackgroundImage({image:\"background.png\", barMetrics: constants.BAR_METRICS_COMPACT})\n</pre>",
                        "!type": "fn(imageConfig: ?)"
                    },
                    "setHighlightedBackgroundImage": {
                        "!doc": " This method is used to set background image to be applied on barbutton item in highlighted state\n @param imageConfig{Object} Specifies image source and barMetrics for the background image to be set\n @Available iPhone and iPad platforms\n @usage <pre>\n item.setHighlightedBackgroundImage({image:\"background.png\", barMetrics: constants.BAR_METRICS_COMPACT})\n</pre>",
                        "!type": "fn(imageConfig: ?)"
                    }
                }
            },
            "BottomSheet": {
                "!doc": "Creates a new BottomSheet object.\n@class kony.ui.BottomSheet\n@returns {kony.ui.BottomSheet}",
                "!type": "fn(basicConfig: ?) -> +kony.ui.BottomSheet",
                "prototype": {
                    "backgroundTransparency": {
                        "!doc": "Indicates the transparency to be used behind the BottomSheet. This can be used to have background dim effect when BottomSheets is shown.\n@property {Number}\n@Available Android\n@access Read and Write",
                        "!type": "number"
                    },
                    "contentWidget": {
                        "!doc": "This property specifies the configuration of widget container that contains the elements of the BottomSheet.\n@property {Object}\n@Available Android\n@access Read and Write"
                    },
                    "destroy": {
                        "!doc": " This method used to destroy the BottomSheet and allows increasing the application life by reducing the memory usage.\n @Available Android\n @access Write\n @usage <pre>\n var bottomSheetObj = new kony.ui.BottomSheet(basicConfig);\n bottomSheetObj.destroy();\n</pre>",
                        "!type": "fn()"
                    },
                    "dismiss": {
                        "!doc": " This method used to dismiss the BottomSheet.\n @Available Android\n @access Write\n @usage <pre>\n var bottomSheetObj = new kony.ui.BottomSheet(basicConfig);\n bottomSheetObj.dismiss();\n</pre>",
                        "!type": "fn()"
                    },
                    "onCollapsed": {
                        "!doc": "Specifies a callback which is triggered when a BottomSheet state changes to collapsed state.\n@property {Event}\n@Available Android\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onDismiss": {
                        "!doc": "Specifies a callback which is triggered when BottomSheet is dismissed.\n@property {Event}\n@Available Android\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onDraggingStarted": {
                        "!doc": "Specifies a callback which is triggered when BottomSheet is dragged.\n@property {Event}\n@Available Android\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onExpanded": {
                        "!doc": "Specifies a callback which is triggered when a BottomSheet state changes to expanded state.\n@property {Event}\n@Available Android\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onSettled": {
                        "!doc": "Specifies a callback which is triggered when BottomSheet is settling.\n@property {Event}\n@Available Android\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onShow": {
                        "!doc": "Specifies a callback which is triggered when BottomSheet is shown.\n@property {Event}\n@Available Android\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onSliding": {
                        "!doc": "Specifies a callback which is triggered when BottomSheet is sliding.\n@property {Event}\n@param offset {Float} The offset(-1 to 1 float value) value of the BottomSheet. From 0 to 1 sheet is between collapsed and expanded states. From -1 to 0 it is between hidden(at the bottom) and collapsed states.\n@Available Android\n@access Read and Write",
                        "!type": "fn(offset: ?)"
                    },
                    "peekHeight": {
                        "!doc": "Specifies the height of the BottomSheet when it is collapsed. When 'show()' is called BottomSheet height will be set to its peekHeight.\n@property {Number}\n@Available Android\n@access Read and Write",
                        "!type": "number"
                    },
                    "setState": {
                        "!doc": " Sets the state of BottomSheet(Expanded or Collapsed)\n @param state{Number} The state to be set\n @Available Android\n @access Write\n @usage <pre>\n var bottomSheetObj = new kony.ui.BottomSheet(basicConfig);\n //constants for state constants.BOTTOM_SHEET_STATE_EXPANDED and constants.BOTTOM_SHEET_STATE_COLLAPSED\n bottomSheetObj.setState(state);\n</pre>",
                        "!type": "fn(state: ?)"
                    },
                    "show": {
                        "!doc": " This method is used to display the BottomSheet on the screen.\n @Available Android\n @access Write\n @usage <pre>\n var bottomSheetObj = new kony.ui.BottomSheet(basicConfig);\n bottomSheetObj.show();\n</pre>",
                        "!type": "fn()"
                    },
                    "skipCollapsed": {
                        "!doc": "When set to 'true', BottomSheet will skip the collapsed state when it is being hidden (by dragging down) from expanded state.\n@property {Boolean}\n@Available Android\n@access Read and Write",
                        "!type": "bool"
                    }
                }
            },
            "Box": {
                "!doc": "Creates a new Box object.\n@class kony.ui.Box\n@returns {kony.ui.Box}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.Box",
                "prototype": {
                    "accessibilityConfig": {
                        "!doc": "Specifies the accessibility configuration property for the widget.\n@property {Object}\n@Available iPhone, Android, SPA-iPhone, and SPA-Android Platforms\n@access Read and Write\n@usage <pre>\n   var accessibilityConfig = {\n       \"a11yHidden\": false,\n       \"a11yValue\": \"Your text goes here\",\n       \"a11yLabel\": \"Your text goes here\",\n       \"a11yHint\": \"Your text goes here\"\n   }</pre>"
                    },
                    "add": {
                        "!doc": " This method is used to add widgets to the Box container. If a new widget is removed will reflect immediately from the Form hierarchy model perspective, however the changes are displayed when the Form appears. When the widgets are added to the current visible Form, then the changes will reflect immediately.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for a Box properties.<br/>\nvar basicConf = {id : \"boxAddMethodTest\", isVisible:true, orientation:constants.BOX_LAYOUT_VERTICAL, skin:\"gradroundbox\"};<br/>\nvar layoutConf = {containerWeight:100};<br/>\n\n//Creating the Box.<br/>\nvar boxAddMethodTest = new kony.ui.Box(basicConf, layoutConf, {});<br/>\n\n//Adding label ,button widgets to the box Here label and button widgets should be created already and accessible as well.<br/>\nboxAddMethodTest.add(lbl,btn);</pre>",
                        "!type": "fn(widgetref: ?)"
                    },
                    "addAt": {
                        "!doc": " This method is used to add widgets to the Box container at the specified index. Widget is prepended if index<0 and appended at the end of the container if index >size+1.\n @param widgetref{Object} Reference of the name of the widget.<b>Mandatory</b>\n @param index {Number} Index number at which the widget is to be added.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the Box properties.<br/>\nvar basicConf = {id : \"boxAddAtMethodTest\", isVisible:true, orientation:constants.BOX_LAYOUT_VERTICAL, skin:\"gradroundbox\"};<br/>\nvar layoutConf = {containerWeight:100};<br/>\n\n//Creating the Box.<br/>\nvar boxAddAtMethodTest = new kony.ui.Box(basicConf, layoutConf, {});<br/>\n\n//Adding label to the box at 15th index Position.Here label should be created already and accessible as well.<br/>\nboxAddAtMethodTest.addAt(lbl,15);</pre>",
                        "!type": "fn(widgetref: ?, index: ?)"
                    },
                    "blockedUISkin": {
                        "!doc": "Specifies the skin that must be used to block the interface until the action in progress (for example, a service call) is completed.\n@property {String}\n@Available Mobile Web(basic),SPA,Playbook\n@access Read and Write",
                        "!type": "string"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget widget. The parent widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "contextMenu": {
                        "!doc": "Specifies the list of actions (appropriate to the widget in focus) as menu items.\n@property {Array}\n@Available Android,BlackBerry\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "focusSkin": {
                        "!doc": "Specifies a skin property when it is in focus.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "getBadge": {
                        "!doc": " This method enables you to read the badge value (if any) attached to the given widget.\n @returns String - Reference to the gesture is returned.\n @Available iPhone,iPad\n @access Write\n @usage <pre>\n//To get a badge value on a box with ID hbx1 placed on a form frm1, use the following code:<br/>\nvar badgeVal = frm1.hbx1.getBadge();<br/>\nalert(\"badge value is::\"+badgeVal);</pre>",
                        "!type": "fn()"
                    },
                    "hoverSkin": {
                        "!doc": "Specifies the look and feel of a widget when the cursor hovers on the widget.\n@property {String}\n@Available windows 8\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the visibility of the Box widget.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "onClick": {
                        "!doc": "An event callback is invoked by the platform when the user performs a click action on the widget.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onHover": {
                        "!doc": "An event callback is invoked by the platform based on the below actions:\nWhen the mouse enters into the widget region.\nWhen the mouse moves with in the widget region.\nWhen the mouse leaves from the widget region.\n@property {Event}\n@Available Desktop Web Platform\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onRightClick": {
                        "!doc": "An event callback is invoked by the platform when the user performs a right click action on the widget.\n@property {Event}\n@Available Desktop Web Platform\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "orientation": {
                        "!doc": "Specifies the orientation of the Box. You can select the orientation as horizontal or vertical.\n@property {Number}\n@Available All Platforms\n@access Read",
                        "!type": "number"
                    },
                    "padding": {
                        "!doc": "Specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "remove": {
                        "!doc": " This method removes a widget from the Box container. If a new widget is removed will reflect immediately from the Box hierarchy model perspective, however the changes are displayed when the Box appears.\n @param widgetref {Object} Reference of the widget to be removed.<b>Mandatory</b>\n @returns The current Form handle is returned.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the Box properties.\nvar basicConf = {id : \"boxRemoveMethodTest\", isVisible:true, orientation:constants.BOX_LAYOUT_VERTICAL, skin:\"gradroundbox\"};<br/>\nvar layoutConf = {containerWeight:100};<br/>\n\n//Creating the Box.<br/>\nvar boxRemoveMethodTest = new kony.ui.Box(basicConf, layoutConf, {});<br/>\n\n//Removing label widget from the box .Here label should be created already and added inside the box.<br/>\nboxRemoveMethodTest.remove(lbl);</pre>",
                        "!type": "fn(widgetref: ?)"
                    },
                    "removeAt": {
                        "!doc": " This method removes a widget at the given index from the Box container. If a new widget is removed will reflect immediately from the Box hierarchy model perspective, however the changes are displayed when the Box appears.\n @param index {Number}Index number at which the widget is to be removed.<b>Mandatory</b>\n @param animationConfig {Object} Specifies the animation configuration object.<b> Note: This is OPTIONAL parameter and is supported only on iOS and Android platforms.</b></dd>\n    <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animEffect</b> {Object} Specifies the animation effect. Following are the available options of animation effect.<b>Optional </b></pre> </pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_COLLAPSE: Specifies the widget must collapse gradually by decreasing the height of the widget. This option is applicable only when visibility is turned on.</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_FADE: Specifies the widget must disappear gradually by increasing the transparency of the widget.</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_NONE:&#160;This is the default option. Specifies animation should not be applied to the widget, but layout animations are applied on the Form that may be change the current widgets layout. The animation events are not triggered when this option is set.</pre></li></pre></dd>\n\n    <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animDuration - Optional </b> {Number} Specifies the duration of the animation effect in seconds. The default value is 1. <b>Optional </b></pre> </pre></dd>\n\n    <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animDelay - Optional </b> {Number} Specifies the delay of the animation effect. The default value is 0.<b>Optional </b></pre> </pre></dd>\n\n    <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp; <b>- animCurve - Optional </b> Specifies the animation curve to be applied while playing the animation. An animation curve defines the speed of the animations at different intervals of the animation duration. Following are the available options of animation curve: </p></dd> </pre> </pre> </dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEIN:&#160;Specifies the animation to start slowly and then continues with normal speed.</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEOUT: Specifies the animation to start with normal speed and slowdown towards the end.</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEINOUT:&#160;Specifies the animation to start slowly and then continues with normal speed and then again slowdown towards the end.</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_LINEAR:&#160;This is the default value. Specifies the animation to continue with normal speed.</pre></li></pre></dd>\n\n    <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp; <b>- animCallBacks - Optional </b> It is a JS dictionary containing the events invoked by the platform during the animation life cycle. Following are the available events: </p></dd> </pre> </pre> </dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; animStarted:&#160;Invoked at the end of the animation without any parameters. Following is the signature of the event:</pre></li></pre></dd><b>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp;<b>function animStarted() </b></dd> </p></pre> </pre> </pre> </br> </pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; animEnded: Invoked at the end of the animation without any parameters. Following is the signature of the event:</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp;<b>function animEnded() </b></pre> </pre> </pre>\n\n @returns Reference of the name of the widget to be removed.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the Box properties.<br/>\nvar basicConf = {id : \"boxRemoveAtMethodTest\", isVisible:true, orientation:constants.BOX_LAYOUT_VERTICAL, skin:\"gradroundbox\"};<br/>\nvar layoutConf = {containerWeight:100};<br/>\n\n//Creating the Box.<br/>\nvar boxRemoveAtMethodTest = new kony.ui.Box(basicConf, layoutConf, {});<br/>\n\n//Removing label from the box at 15th index Position. Here label should be created and added at 15th index position of the box.<br/>\nboxRemoveAtMethodTest.removeAt(lbl,15,animationConfig);</pre>",
                        "!type": "fn(index: ?, animationConfig: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "removeGestureRecognizer": {
                        "!doc": " This method allows you to remove a specified gesture recognizer for a specified widget.\n @param uniqueIdentifier{Widgetref} Indicates the type of gesture added to the form.<b>Mandatory</b>\n @Available iPhone,iPad,Android,BlackBerry,Windows phone,SPA\n @access Write\n @usage <pre>\n//The below function will get invoked when a gesture is recognized.<br/>\nfunction myTap(myWidget,gestureInfo)<br/>\n{\nalert(\" Tap Gesture detected\");\nalert(\"gestureType :\"+gestureInfo.gestureType);\nalert(\"gesturePosition :\"+gestureInfo.gesturePosition);\n//write any further logic here\n}<br/>\n\n//Setting Gesture configuration.<br/>\nlocal setupTblTap = {fingers:1,taps:2};//double tap gesture<br/>\n\n//To add a TAP gesture recognizer on a hbox with ID hbx1 placed on a form frm1<br/>\nvar tapGesture = frm1.hbx1.setGestureRecognizer(1, setupTblTap, myTap)<br/>\n\n//To remove the TAP gesture recognizer on a hbox with ID hbx1 placed on a form frm1<br/>\nfrm1.hbx1.removeGestureRecognizer(tapGesture);</pre>",
                        "!type": "fn(uniqueIdentifier: ?)"
                    },
                    "replaceAt": {
                        "!doc": " This method removes a widget and replaces with another widget in a HBox or VBox container. If a widget is replaced from the HBox or VBox, will reflect immediately from the HBox or VBox hierarchy model perspective; however the changes are displayed when the HBox or VBox appears.\n @param widgetref{Object} Reference of the name of the widget.<b>Mandatory</b>\n @param index {Number} Index number at which the widget is to be replaced. If the index is lessthan 0, then first widget in the container gets replaced. If the index greater than size -1, then the last widget in the container widget gets replaced. The term size refers to the number of widgets present in the container widget.<b>Mandatory</b>\n @param animationConfig {Object} Specifies the animation configuration object.<b> Optional</b></dd>\n    <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animEffect</b> {Object} Specifies the animation effect. Following are the available options of animation effect. <b>Optional </b></pre> </pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_FLIP_RIGHT: Specifies the widget must flip from right to left.</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_FLIP_LEFT: Specifies the widget must flip from left to right.</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_NONE:&#160;This is the default option. Specifies animation should not be applied to the widget, but layout animations are applied on the Form that may be change the current widgets layout. The animation events are not triggered when this option is set.</pre></li></pre></dd>\n\n    <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animDuration - Optional </b> {Number} Specifies the duration of the animation effect in seconds. The default value is 1. <b>Optional </b></pre> </pre></dd>\n\n    <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animDelay - Optional </b> {Number} Specifies the delay of the animation effect in seconds. The default value is 0. <b>Optional </b></pre> </pre></dd>\n\n    <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp; <b>- animCurve - Optional </b> Specifies the animation curve to be applied while playing the animation. An animation curve defines the speed of the animations at different intervals of the animation duration. Following are the available options of animation curve: </p></dd> </pre> </pre> </dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEIN:&#160;Specifies the animation to start slowly and then continues with normal speed.</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEOUT: Specifies the animation to start with normal speed and slowdown towards the end.</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEINOUT:&#160;Specifies the animation to start slowly and then continues with normal speed and then again slowdown towards the end.</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_LINEAR:&#160;This is the default value. Specifies the animation to continue with normal speed.</pre></li></pre></dd>\n\n    <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp; <b>- animCallBacks - Optional </b> It is a JS dictionary containing the events invoked by the platform during the animation life cycle. Following are the available events: </p></dd> </pre> </pre> </dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; animStarted:&#160;Invoked at the end of the animation without any parameters. Following is the signature of the event:</pre></li></pre></dd><b>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp;<b>function animStarted() </b></dd> </p></pre> </pre> </pre> </br> </pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; animEnded: Invoked at the end of the animation without any parameters. Following is the signature of the event:</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp;<b>function animEnded() </b></pre> </pre> </pre>\n\n\n @Available iOS and Android platforms\n @access Write\n @usage <pre>\n//Procedure to create animation at replaceAt.<br/>\n\nvar basicConf = {id : \"buttonForOk\", text:\"OK\", isVisible:true,onClick:gotofrmNext, setEnabled:true, skin: \"btnskn\", focusSkin: \"btnfocusskn\"};<br/>\nvar layoutConf = {contentAlignment : constants.CONTENT_ALIGN_BOTTOM_RIGHT, containerWeight:100};<br/>\nvar okButton = new kony.ui.Button(basicConf, layoutConf, {});<br/>\n\n//Method to add an OK button at index 1.<br/>\nfrmHome.replaceAt(okButton, 1,animationConfig);</pre>",
                        "!type": "fn(widgetref: ?, index: ?, animationConfig: ?)"
                    },
                    "setBadge": {
                        "!doc": " This method enables you to set the badge value to the given widget at the upper, right corner of the widget.\n @param badgeText{String} Specifies the Text value that appears within the badge.<b>Mandatory</b>\n @param skin{String}Specifies the background color for the badge.\n @Available iPhone,iPad\n @access Write\n @usage <pre>\n//To set a badge value with skin \"badgeSkin\" on a box with ID hbx1 placed on a form frm1, use the following code:<br/>\nfrm1.hbx1.setBadge(\"2\",\"badgeSkin\");</pre>",
                        "!type": "fn(badgeText: ?, skin: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget forSPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setGestureRecognizer": {
                        "!doc": "  This method allows you to set a gesture recognizer for a specified gesture for a specified widget.\n  @param gestureType{Number} Indicates the type of gesture that needs to be detected on the widget.<b>Mandatory</b>\n  @param setupParams {Array}Specifies an object that has the configuration parameters needed to setup a gesture recognizer.<b>Mandatory</b>\n  @param gestureHandler{Function} Specifies the function that needs to be executed when a gesture is recognized.<b>Mandatory</b>\n  @returns String - Reference(uniqueidentifier) to the gesture is returned.\n  @Available ios,Android,BlackBerry,Windows phone/Windows Kiosk,J2ME,SPA\n  @access Write\n  @usage <pre>\n //The below function will get invoked  when a gesture is recognized.\n function myTap(myWidget,gestureInfo)<br/>\n{\n alert(\" Tap Gesture detected\");\n alert(\"gestureType :\"+gestureInfo.gestureType);\n alert(\"gesturePosition :\"+gestureInfo.gesturePosition);\n //write any further logic here\n } <br/>\n\n //Setting Gesture configuration.<br/>\n local setupTblTap = {fingers:1,taps:2};//double tap gesture<br/>\n\n //To add a TAP gesture recognizer on a hbox with ID hbx1 placed on a form frm1<br/>\n var tapGesture = frm1.hbx1.setGestureRecognizer(1, setupTblTap, myTap);</pre>",
                        "!type": "fn(gestureType: ?, setupParams: ?, gestureHandler: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@param animationConfig {Object} Specifies the animation configuration object.<b> Note: This is OPTIONAL parameter and is supported only on iOS and Android platforms.</b></dd>\n   <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animEffect</b> {Object} Specifies the animation effect. Following are the available options of animation effect. <b>Optional </b></pre> </pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_EXPAND:&#160;Specifies the widget must expand gradually by increasing the height of the widget. This option is applicable only when visibility is turned on.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_REVEAL: Specifies the widget must appear gradually by decreasing the transparency of the widget.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_COLLAPSE: This is applicable when the visibility is turned off. Specifies the widget must collapse gradually by decreasing the height of the widget.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_FADE: This is applicable when the visibility is turned off. Specifies the widget must disappear gradually by increasing the transparency of the widget.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_NONE:&#160;This is the default option. Specifies animation should not be applied to the widget, but layout animations are applied on the Form that may be change the current widgets layout. The animation events are not triggered when this option is set.</pre></li></pre></dd>\n\n   <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animDuration - Optional </b> {Number} Specifies the duration of the animation effect in seconds. The default value is 1. <b>Optional </b></pre> </pre></dd>\n\n   <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animDelay - Optional </b> {Number} Specifies the delay of the animation effect in seconds. The default value is 0. <b>Optional </b></pre> </pre></dd>\n\n   <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp; <b>- animCurve - Optional </b> Specifies the animation curve to be applied while playing the animation. An animation curve defines the speed of the animations at different intervals of the animation duration. Following are the available options of animation curve: </p></dd> </pre> </pre> </dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEIN:&#160;Specifies the animation to start slowly and then continues with normal speed.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEOUT: Specifies the animation to start with normal speed and slowdown towards the end.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEINOUT:&#160;Specifies the animation to start slowly and then continues with normal speed and then again slowdown towards the end.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_LINEAR:&#160;This is the default value. Specifies the animation to continue with normal speed.</pre></li></pre></dd>\n\n   <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp; <b>- animCallBacks - Optional </b> It is a JS dictionary containing the events invoked by the platform during the animation life cycle. Following are the available events: </p></dd> </pre> </pre> </dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; animStarted:&#160;Invoked at the end of the animation without any parameters. Following is the signature of the event:</pre></li></pre></dd><b>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp;<b>function animStarted() </b></dd> </p></pre> </pre> </pre> </br> </pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; animEnded: Invoked at the end of the animation without any parameters. Following is the signature of the event:</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp;<b>function animEnded() </b></pre> </pre> </pre>\n\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?, animationConfig: ?)"
                    },
                    "skin": {
                        "!doc": "Specifies the look and feel of the Box widget.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "widgets": {
                        "!doc": " This method returns an array of the widget references which are direct children of box.\n @returns {array} This method returns Read only array of widget references.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the Box properties.<br/>\nvar wigArr = new Array();<br/>\nvar basicConf = {id : \"boxWidgetsMethodTest\", isVisible:true, orientation:constants.BOX_LAYOUT_VERTICAL, skin:\"gradroundbox\"};<br/>\nvar layoutConf = {containerWeight:100};<br/>\n\n//Creating the Box.<br/>\nvar boxWidgetsMethodTest = new kony.ui.Box(basicConf, layoutConf, {});<br/>\n\n//Collecting all the widgets of the box into array and displaying the references.\nwigArr = boxWidgetsMethodTest.widgets();<br/>\nalert(\"Widgets are::\"+wigArr);</pre>",
                        "!type": "fn() -> [?]"
                    }
                }
            },
            "Browser": {
                "!doc": "Creates a new Browser object.\n@class kony.ui.Browser\n@returns {kony.ui.Browser}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.Browser",
                "prototype": {
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "bounces": {
                        "!doc": "This property controls whether the browser bounces past the edge of content and back again.\n@property {Boolean}\n@Available iOS\n@access Read and Write",
                        "!type": "bool"
                    },
                    "browserType": {
                        "!doc": "Specifies the browser type for the Browser widget.\n@property {Number}\n@Available iPhone,iPad\n@access Read",
                        "!type": "number"
                    },
                    "canGoBack": {
                        "!doc": " This method specifies whether the browser can navigate back into history. If the browser cache is empty then this method returns false and the goBack method has no effect.\n @returns {Boolean} status\n @Available All Platforms except SPA\n @access Write\n @usage <pre>\n//Defining the properties for a Browser widget with requestURLConfig:requestUrlConf.</br>\nvar requestUrlConf = {URL: \"https://www.google.co.in/\", requestMethod:constants.BROWSER_REQUEST_METHOD_GET};</br>\nvar webBasic = {id : \"browserID\", isVisible:true, screenLevelWidget: false, requestURLConfig:requestUrlConf};</br>\nvar webLayout = {containerWeight:100};</br>\n\n//Creating the Browser.</br>\nvar browser = new kony.ui.Browser(webBasic, webLayout, {});</br>\n\n//calling canGoBack method</br>\nvar canGoBck = browser.canGoBack();</br>\nalert(\"canGoBack?::\"+canGoBck);</pre>",
                        "!type": "fn() -> bool"
                    },
                    "canGoForward": {
                        "!doc": " This method specifies whether the browser can navigate forward into history. If the browser cache is empty then this method returns false and  goForward method has no effect.\n @returns {Boolean} status\n @Available All Platforms except SPA\n @access Write\n @usage <pre>\n//Defining the properties for a Browser widget with requestURLConfig:requestUrlConf.</br>\nvar requestUrlConf = {URL: \"https://www.google.co.in/\", requestMethod:constants.BROWSER_REQUEST_METHOD_GET};</br>\nvar webBasic = {id : \"browserID\", isVisible:true, screenLevelWidget: false, requestURLConfig:requestUrlConf};</br>\nvar webLayout = {containerWeight:100};</br>\n\n//Creating the Browser.</br>\nvar browser = new kony.ui.Browser(webBasic, webLayout, {});</br>\n\n//calling canGoForward method</br>\nvar canGoForwrd = browser.canGoForward();</br>\nalert(\"canGoBack?::\"+canGoForwrd);</pre>",
                        "!type": "fn() -> bool"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "clearHistory": {
                        "!doc": " This method clears the page history of the specified Browser.\n @Available All Platforms except SPA and iPhone\n @access Write\n @usage <pre>\n//Defining the properties for a Browser widget with requestURLConfig:requestUrlConf.</br>\nvar requestUrlConf = {URL: \"https://www.google.co.in/\", requestMethod:constants.BROWSER_REQUEST_METHOD_GET};</br>\nvar webBasic = {id : \"browserID\", isVisible:true, screenLevelWidget: false, requestURLConfig:requestUrlConf};</br>\nvar webLayout = {containerWeight:100};</br>\n\n//Creating the Browser.</br>\nvar browser = new kony.ui.Browser(webBasic, webLayout, {});</br>\n\n//Calling clearHistory method to clear the browser history of a browser brws1 which is in Form frm1.</br>\nbrowser.clearHistory(frm1.brws1);</pre>",
                        "!type": "fn()"
                    },
                    "containerHeight": {
                        "!doc": "Specifies the available height of the container in terms of percentage. The percentage is with reference to the value of containerHeightReference property.\n@property {Number}\n@Available Available on all platforms except on all Server side Mobile Web and Desktop Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "containerHeightReference": {
                        "!doc": "Specifies the reference for the height of the container based on option that you set for containerHeight. The container height percentage is calculated based on eigher CONTAINER_HEIGHT_BY_FORM_REFERENCE or CONTAINER_HEIGHT_BY_PARENT_WIDTH.\n@property {Number}\n@Available Available on all platforms except on all Server side Mobile Web and Desktop Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget widget. The parent's widget space is distributed to its child widgets based on this weight factor.All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms except Win Mobile 6x.\n@access Read and Write",
                        "!type": "number"
                    },
                    "detectTelNumber": {
                        "!doc": "Specifies if the Browser widget must support the detection of phone numbers in the web page and display the phone numbers as clickable Phone links.\n@property {Boolean}\n@Available All Platforms On BlackBerry platform, the default value is set based on the device constraints.\n@access Read and Write",
                        "!type": "bool"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "enableNativeCommunication": {
                        "!doc": "Enables web apps to access Kony native capabilities from within the web app's JavaScript code.\n@property {Boolean}\n@Available All Platforms\n@access Read only",
                        "!type": "bool"
                    },
                    "enableOverviewMode": {
                        "!doc": "Specifies whether the browser should load pages in overview mode. For example, zoom out the content to fit in the screen width.\n@property {Boolean}\n@Available Android\n@access Write only",
                        "!type": "bool"
                    },
                    "enableZoom": {
                        "!doc": "Specifies if Zoom (ability to change the scale of the view area) must be enabled.\n@property {Boolean}\n@Available All Platforms except BlackBerry.\n@access Read and Write",
                        "!type": "bool"
                    },
                    "goBack": {
                        "!doc": " This method provides you with the ability to navigate one step back in the browser history.\n @Available All Platforms except SPA\n @access Write\n @usage <pre>\n//Defining the properties for a Browser widget with requestURLConfig:requestUrlConf which is JS object defined below.</br>\nvar requestUrlConf = {URL: \"https://www.google.co.in/\", requestMethod:constants.BROWSER_REQUEST_METHOD_GET};</br>\nvar webBasic = {id : \"browserID\", isVisible:true, screenLevelWidget: false, requestURLConfig:requestUrlConf};</br>\nvar webLayout = {containerWeight:100};</br>\n\n//Creating the Browser.</br>\nvar browser = new kony.ui.Browser(webBasic, webLayout, {});</br>\n\n//calling goBack method.</br>\nbrowser.goBack(); </pre>",
                        "!type": "fn()"
                    },
                    "goForward": {
                        "!doc": " This method provides you with the ability to navigate one step forward in the browser history.\n @Available All Platforms except SPA\n @access Write\n @usage <pre>\n//Defining the properties for a Browser widget with requestURLConfig:requestUrlConf which is JS object defined below.</br>\nvar requestUrlConf = {URL: \"https://www.google.co.in/\", requestMethod:constants.BROWSER_REQUEST_METHOD_GET};</br>\nvar webBasic = {id : \"browserID\", isVisible:true, screenLevelWidget: false, requestURLConfig:requestUrlConf};</br>\nvar webLayout = {containerWeight:100};</br>\n\n//Creating the Browser.</br>\nvar browser = new kony.ui.Browser(webBasic, webLayout,{});</br>\n\n//calling goForward method.</br>\nbrowser.goForward(); </pre>",
                        "!type": "fn()"
                    },
                    "handleRequest": {
                        "!doc": "An event callback which gets invoked by the platform before browser widget navigates to a new URL. This is useful in scenarios where the developer wants to keep track of the URLs that the browser field navigates to. For example, in a payment flow (that is been executed inside a browser widget) on successful redirection to a payment confirmation page the developer would like to take the user to a new native form. The return value from this function determines how the browser widget handles the original request. If a false value is returned then the browser widget assumes that the developer has handled the request. If a true value is returned it continues navigation to the original URL.\n@property {Event}\n@param eventobject{widgetid} A unique id that identifies the browser widget.<b>Mandatory</b>\n@param params{Object} An object that identifies the url params as key-values that contains - originalurl, requestmethod, and header as the supported keys.<b>Mandatory</b>\n@Available Available on iOS and Android/Android Tablet.\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "htmlString": {
                        "!doc": "Specifies the html content for the Browser widget.\n@property {String}\n@Available All platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the Property to set widget visibility.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "layoutType": {
                        "!doc": "Specifies if the arrangement of the widgets either in free form or horizontal or vertical direction (kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, or kony.flex.FLOW_VERTICAL).\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms except Mobile Web (basic).\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "onFailure": {
                        "!doc": "     An event callback which gets invoked by the platform when the given request URL is failed to load the data. This event is called only for the given request URL, but not for the subsequent web navigation request failures.\n     @property {Event}\n     @Available All Platforms except Windows Phone/Windows Kiosk.\n\t @access Read and Write",
                        "!type": "fn()"
                    },
                    "onPageFinished": {
                        "!doc": "Event callback when a page has finished loading in the browser.\n@param {String} eventobject - Optional, A unique Id that identifies the browser widget.\n@param {Object} params - Optional An object that identifies the url parameters as key-values pair.\n@param {String} params.originalURL - Optional, Specifies the original url.\n@param {Object} params.queryParams - Optional, Specifies the dictionary containing the query parameters passed to the URL as key, values in the dictionary.\n@Available on Android, iOS, Windows 10\n@access Read and Write",
                        "!type": "fn(eventobject: string, params: ?)"
                    },
                    "onPageStarted": {
                        "!doc": "Event callback when a page has started in the browser.\n@param {String} eventobject - Optional, A unique Id that identifies the browser widget.\n@param {Object} params - Optional An object that identifies the url parameters as key-values pair.\n@param {String} params.originalURL - Optional, Specifies the original url.\n@param {Object} params.queryParams - Optional, Specifies the dictionary containing the query parameters passed to the URL as key, values in the dictionary.\n@Available on Android, iOS, Windows 10\n@access Read and Write",
                        "!type": "fn(eventobject: string, params: ?)"
                    },
                    "onProgressChanged": {
                        "!doc": "The onProgressChanged callback event shows you the progress of the page loading in the Browser Widget. The platform invokes the event when the page is loading.\n@property {Event}\n@Available Android\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onReceive": {
                        "!doc": "This event callback will be triggered whenever a page loaded in browser generates an event.\nex: digest authentication\n@param {Number} eventType\n@Available only on Android\n@access Read and Write",
                        "!type": "fn(eventType: number)"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onSuccess": {
                        "!doc": "An event callback which gets invoked by the platform when the given request URL is successful in loading the data. This event is called only for the given request URL, but not for the subsequent web navigation requests.\n@property {Event}\n@Available All Platforms except Windows Phone/Windows Kiosk.\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "reload": {
                        "!doc": " This method provides you with the ability to reload the current web page.\n @Available All Platforms except SPA\n @access Write\n @usage <pre>\n//Defining the properties for a Browser widget with requestURLConfig:requestUrlConf which is JS object defined below.</br>\nvar requestUrlConf = {URL: \"https://www.google.co.in/\", requestMethod:constants.BROWSER_REQUEST_METHOD_GET};</br>\nvar webBasic = {id : \"browserID\", isVisible:true, screenLevelWidget: false, requestURLConfig:requestUrlConf};</br>\nvar webLayout = {containerWeight:100};</br>\n\n//Creating the Browser.</br>\nvar browser = new kony.ui.Browser(webBasic, webLayout, {});</br>\n\n//calling reload method</br>\nbrowser.reload(); </pre>",
                        "!type": "fn()"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "requestURLConfig": {
                        "!doc": "Specifies the  configurations for the requested URL in key-value pairs as a JavaScript object or Lua table.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setResponse": {
                        "!doc": "This API is used to send the required information (ex: user credentials) to the browser widget.\n@param {Number} eventType – Mandatory, The ‘eventType’ is the type of the event callback.\n@param {Object} data – Mandatory, The map contains information (credentials in this case) passed to browser widget.\n\nIf eventType is equal to ‘constants.WEBWIDGET_RECEIVE_TYPE_HTTP_AUTH’, this Object should consist of following sub parameters as key value pairs\n\n  username[String] – Mandatory. If username is given as empty string or wrong, onReceive callback is called again.\n  password[String] – value also should be in string format\n\nIf password is given as empty string or wrong, onReceive callback is called again.\n\nFor all other values it will display error page with status code 401.\n\n@Available only on Android",
                        "!type": "fn(eventType: number, data: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "Button": {
                "!doc": "Creates a new Button object.\n@class kony.ui.Button\n@returns {kony.ui.Button}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.Button",
                "prototype": {
                    "accessibilityConfig": {
                        "!doc": "Specifies the accessibility configuration property for the widget.\n@property {Object}\n@Available iPhone, Android, SPA-iPhone, and SPA-Android Platforms\n@access Read and Write\n@usage <pre>\n   var accessibilityConfig = {\n       \"a11yHidden\": false,\n       \"a11yValue\": \"Your text goes here\",\n       \"a11yLabel\": \"Your text goes here\",\n       \"a11yHint\": \"Your text goes here\"\n   }</pre>"
                    },
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "backgroundColor": {
                        "!doc": "Specifies the background color of the widget in hex format.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "blockedUISkin": {
                        "!doc": "Specifies the skin that must be used to block the interface until the action in progress (for example, a service call) is completed.\n@property {String}\n@Available Mobile Web(Advanced),SPA (iPhone/Android/BlackBerry/Windows NTH)/Playbook\n@access Read and Write",
                        "!type": "string"
                    },
                    "blur": {
                        "!doc": "Enables blur\n@property blur {{enabled: Boolean, value: Number}}\n@Available iOS, Android, Windows, SPA\n@access Read and Write\n@usage <pre>\n   var blur =  {\n       \"enabled\": true,\n       \"value\": 50\n   }</pre>"
                    },
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "cacheConfig": {
                        "!doc": "Configures the cachePolicy and storagePolicy of the responses for the request.\n@property cacheConfig {{cachePolicy: constant, cacheStoragePolicy: constant}}\n@Available iOS\n@access Read and Write\n@usage <pre>\n   var cacheConfig = {\n       \"cachePolicy\": kony.net.cache.USE_PROTOCOL_CACHE_POLICY,\n       \"cacheStoragePolicy\": kony.net.cache.DISK_AND_MEMORY\n   }\n</pre>"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "clipView": {
                        "!doc": "     Defines a shape to clip the widget view.\n     @property {JSObject}\n\t @param shape {constant} A key-value pair represents a shape of the clipping. You can clip a view as follows:\n\t VIEW_CLIP_SHAPE_RECTANGLE: Appears the widget view in rectangular shape. By default, this value is set.\n\t VIEW_CLIP_SHAPE_ROUNDED_RECTANGLE: Appears the widget view in rectangular shape with rounded corners.\n\t VIEW_CLIP_SHAPE_CIRCLE: Appears the widget view in circular shape.\n\t @param bounds {Array} A key-value pair represents the bounds of the shape to clip a view. Specify the bounds as an array of integers [left, top, right, bottom].\n\t @param boundsInPixel {Boolean} Defines whether the units of specified bounds should be in pixels or in percentage. The property takes the Boolean value.\n\t @param radius {constant} Specifies the radius of the clipping shape. Represents the corner radius of the rounded rectangular shape when clipping shape is VIEW_CLIP_SHAPE_ROUNDED_RECTANGLE or represents the radius of circle when clipping shape is VIEW_CLIP_SHAPE_CIRCLE.\n     @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the clipView property<br/>\n\t form1.Btn1.clipView  = {\n\t\t shape: constants.VIEW_CLIP_SHAPE_CIRCLE,\n\t\t bounds: [5, 5, 5, 5],\n\t\t boundsInPixel: true,\n\t\t radius: 10\n        };</pre>"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget widget. The parent widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "contentAlignment": {
                        "!doc": "Specifies the alignment of the text on the Button with respect to its boundaries.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "contextMenu": {
                        "!doc": "A context menu is a menu that appears upon clicking a button. A context menu typically offers a limited set of choices that are applicable for that button.\n@property {Array}\n@Available Android,Android Tablet,BlackBerry\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "createAnimation": {
                        "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                        "!type": "fn(animationDef: ?)"
                    },
                    "displayText": {
                        "!doc": "Specifies if the text (present in text property) to be rendered or not.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "enableHapticFeedback": {
                        "!doc": "This property allows you to enable or disable haptic feedback.\n@property {Boolean}\n@Available iOS, Android, Windows platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "focusSkin": {
                        "!doc": "This is a skin property and it determines the look and feel of the widget when in focus.\n@property {String}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "string"
                    },
                    "getBadge": {
                        "!doc": " This method enables you to read the badge value (if any) attached to the given widget.\n @returns {String} Reference to the gesture is returned.\n @Available iPhone,iPad\n @access Write\n @usage <pre>\n//To get a badge value on a button with id btn1 placed on a form frm1, use the following code:<br/>\nvar badgeVal = frm1.btn1.getBadge();<br/>\nalert(\"badge value is::\"+badgeVal);</pre>",
                        "!type": "fn() -> string"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "hoverSkin": {
                        "!doc": "Specifies the look and feel of a widget when the cursor hovers on the widget.\n@property {String}\n@Available Windows 8, Desktop web\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies a custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the visibility of the widget on the form.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "layoutType": {
                        "!doc": "Specifies if the arrangement of the widgets either in free form or horizontal or vertical direction (kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, or kony.flex.FLOW_VERTICAL).\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x.\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "onClick": {
                        "!doc": "An event callback is invoked by the platform when the user performs a click action on the button.\n@property {Event}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onTouchEnd": {
                        "!doc": "An event callback is invoked by the platform when the user touch is released from the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchMove": {
                        "!doc": "An event callback is invoked by the platform when the touch moves on the touch surface continuously until the movement ends. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchStart": {
                        "!doc": "An event callback is invoked by the platform when the user touches the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "padding": {
                        "!doc": "Specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms except Mobile Web (basic).\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "pressedSkin": {
                        "!doc": "Specifies the skin to indicate when the Button is pressed or clicked.\n@property {String}\n@Available Andriod,Android Tablet and Symbian\n@access Read and Write",
                        "!type": "string"
                    },
                    "rawBytes": {
                        "!doc": "Specifies the rawbytes representing an Image (usually the image captured from the camera) that can be used as a background for the button.\n@property {Object}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "rippleBackground": {
                        "!doc": "     Defines the ripple background for a Widget.\n     @property {JSObject}\n\t @param rippleColor {String} Defines the color for the ripples.\n\t @param contenLayers {Array} Array of two JS Objects. Each JS Object contains following key-value pairs to define a layer for ripple background. You can define background for the ripple as a skin or as a background color.\n\t @param paddingMode {Constant} Defines how layer padding should affect the bounds of subsequent layers. You can define:\n\t RIPPLE_PADDING_MODE_NEST: Nests each layer inside padding of the previous layer.\n\t RIPPLE_PADDING_MODE_STACK: Stacks each layer top of the previous layer. This is the default value.\n     @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the rippleBackground property<br/>\n\t form1.Btn1.rippleBackground = {\n\t\t rippleColor: “ffff0000”,\n\t\t contentLayers: [\n\t\t\t{background: “ffffff00”, backgroundType: constants.RIPPLE_CONTENT_LAYER_COLOR, mask:false, padding: [10,10,10,10]},\n\t\t\t{background: btnSkin, backgroundType: constants.RIPPLE_CONTENT_LAYER_SKIN, mask: true}],\n\t\t paddingMode: constants.PADDING_MODE_NEST\n\t}</pre>"
                    },
                    "setBadge": {
                        "!doc": " This method enables you to set the badge value to the given widget at the upper, right corner of the widget.\n @param badgeText{String} Specifies the Text value that appears within the badge.<b>Mandatory</b>\n @param skin{String}Specifies the background color for the badge.\n @Available iPhone,iPad\n @access Write\n @usage <pre>\n//To set a badge value with skin \"badgeSkin\" on a button with id btn1 placed on a form frm1, use the following code:<br/>\nfrm1.btn1.setBadge(\"2\",\"badgeSkin\");</pre>",
                        "!type": "fn(badgeText: ?, skin: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget forSPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@param animationConfig {Object} Specifies the animation configuration object.<b> Note: This is OPTIONAL parameter and is supported only on iOS and Android platforms.</b></dd>\n   <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animEffect</b> {Object} Specifies the animation effect. Following are the available options of animation effect. <b>Optional </b></pre> </pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_EXPAND:&#160;Specifies the widget must expand gradually by increasing the height of the widget. This option is applicable only when visibility is turned on.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_REVEAL: Specifies the widget must appear gradually by decreasing the transparency of the widget.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_COLLAPSE: This is applicable when the visibility is turned off. Specifies the widget must collapse gradually by decreasing the height of the widget.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_FADE: This is applicable when the visibility is turned off. Specifies the widget must disappear gradually by increasing the transparency of the widget.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_NONE:&#160;This is the default option. Specifies animation should not be applied to the widget, but layout animations are applied on the Form that may be change the current widgets layout. The animation events are not triggered when this option is set.</pre></li></pre></dd>\n\n   <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animDuration - Optional </b> {Number} Specifies the duration of the animation effect in seconds. The default value is 1. <b>Optional </b></pre> </pre></dd>\n\n   <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animDelay - Optional </b> {Number} Specifies the delay of the animation effect in seconds. The default value is 0. <b>Optional </b></pre> </pre></dd>\n\n   <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp; <b>- animCurve - Optional </b> Specifies the animation curve to be applied while playing the animation. An animation curve defines the speed of the animations at different intervals of the animation duration. Following are the available options of animation curve: </p></dd> </pre> </pre> </dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEIN:&#160;Specifies the animation to start slowly and then continues with normal speed.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEOUT: Specifies the animation to start with normal speed and slowdown towards the end.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEINOUT:&#160;Specifies the animation to start slowly and then continues with normal speed and then again slowdown towards the end.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_LINEAR:&#160;This is the default value. Specifies the animation to continue with normal speed.</pre></li></pre></dd>\n\n   <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp; <b>- animCallBacks - Optional </b> It is a JS dictionary containing the events invoked by the platform during the animation life cycle. Following are the available events: </p></dd> </pre> </pre> </dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; animStarted:&#160;Invoked at the end of the animation without any parameters. Following is the signature of the event:</pre></li></pre></dd><b>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp;<b>function animStarted() </b></dd> </p></pre> </pre> </pre> </br> </pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; animEnded: Invoked at the end of the animation without any parameters. Following is the signature of the event:</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp;<b>function animEnded() </b></pre> </pre> </pre>\n\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?, animationConfig: ?)"
                    },
                    "shadowDepth": {
                        "!doc": "     Defines the depth of the shadow effect applied to the Widget.\n     @property {Number}\n\t @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the shadowDepth property<br/>\n\t form1.Btn1.shadowDepth = 10;</pre>",
                        "!type": "number"
                    },
                    "shadowType": {
                        "!doc": "     Sets a type of the shadow effect to apply to the Widget.\n     @property {Number}\n\t @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the shadowType property<br/>\n\t form1.Btn1.shadowType = constants.VIEW_BOUNDS_SHADOW;</pre>",
                        "!type": "number"
                    },
                    "skin": {
                        "!doc": "Specifies the look and feel of the Button when not in focus.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "text": {
                        "!doc": "Specifies a general or descriptive text for the Button widget.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "toolTip": {
                        "!doc": "Specifies the hint text when the cursor hovers over a widget.\n@property {String}\n@Available windows 8,Desktop Web\n@access Read and Write",
                        "!type": "string"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "Calendar": {
                "!doc": "Creates a new Calendar object.\n@class kony.ui.Calendar\n@returns {kony.ui.Calendar}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.Calendar",
                "prototype": {
                    "accessibilityConfig": {
                        "!doc": "Specifies the accessibility configuration property for the widget.\n@property {Object}\n@Available iPhone, Android, SPA-iPhone, and SPA-Android Platforms\n@access Read and Write\n@usage <pre>\n   accessibilityConfig =  {\n       \"a11yHidden\": false,\n       \"a11yValue\": \"Your text goes here\",\n       \"a11yLabel\": \"Your text goes here\",\n       \"a11yHint\": \"Your text goes here\"\n   }</pre>"
                    },
                    "addAppointments": {
                        "!doc": " This method allows you to add new appointments.\n @Available WindowsPhone 8/8.1 platform\n @access Write\n @usage <pre>\nvar newAppt = [\n    {\n        \"startData\": \"2014-10-12 00:00:00\",\n        \"endDate\": \"2014-10-13 04:00:00\",\n        \"Subject\": \"Travel to Paris\",\n        \"isAllDay\": false,\n        \"Location\": \"Paris, France\"\n        \"Description\": \"Travel to Paris for a meeting\",\n        \"skin\": {\"cellcolor\":\"#FF09609\"},\n        \"info\": {}\n    }\n    {\n        \"startData\": \"2014-10-14 00:00:00\",\n        \"endDate\": \"2014-10-15 04:00:00\",\n        \"Subject\": \"Travel to Paris\",\n        \"isAllDay\": false,\n        \"Location\": \"Paris, France\"\n        \"Description\": \"Travel to Paris for a meeting\",\n        \"skin\": {\"cellcolor\":\"#FF09609\"},\n        \"info\": {}\n    }\n]\n//Defining the properties for Calendar\nvar calBasicConf = {id : \"calID\", isVisible:true, dateComponents:[31,12,2012,04,30,55], viewType:constants.CALENDAR_VIEW_TYPE_DAY_VIEW};\nvar calLayoutConf = {};\nvar calPSPConf = {};\n//Creating the Calendar\nvar Calendar = new kony.ui.Calendar(calBasicConf, calLayoutConf, calPSPConf);\n//add appointments method call\nCalendar.addAppointments(newAppt);</pre>",
                        "!type": "fn()"
                    },
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "appointmentData": {
                        "!doc": "Specifies the appointment data as an array of objects. This property is not a constructor property.\n@property {Object}\n@Available WindowsPhone 8/8.1 platform\n@access Read and Write"
                    },
                    "blur": {
                        "!doc": "Enables blur\n@property blur {{enabled: Boolean, value: Number}}\n@Available iOS, Android, Windows, SPA\n@access Read and Write\n@usage <pre>\n   blur =  {\n       \"enabled\": true,\n       \"value\": 50\n   }</pre>"
                    },
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "calendarIcon": {
                        "!doc": "Replaces the system default calendar Icon.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "cellTemplate": {
                        "!doc": "Specifies the common template to be used for a Calendar Day cell. A template can be used only when the data is present for a Calendar Day cell set through data property or setData method. If the data is not set to a cell, the cell is displayed with a default look without any template. This property is applicable only when you set viewType as CALENDAR_VIEW_TYPE_GRID_POPUP or CALENDAR_VIEW_TYPE_GRID_ONSCREEN\n@property {Object}\n@Available Available on iOS platform only\n@access Read and Write"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "clear": {
                        "!doc": " This method allows you to enables you to clear the date in the calendar and the date format is shown. But when you use a placeholder, then placeholder text is shown instead of date format.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for Calendar<br/>\nvar calBasicConf = {id : \"calID\", isVisible:true, dateComponents:[31,12,2012,04,30,55], skin:\"konytextar\", focusSkin:\"calFocus\", dateFormat:\"dd/MM/yyyy\", viewType:constants.CALENDAR_VIEW_TYPE_GRID_POPUP, validStartDate:[01,01,2012], validEndDate:[31,12,2012], date:[31,12,2012], placeholder:\"JSCalendar\", calendarIcon:\"cal.png\"};<br/>\nvar calLayoutConf = {containerWeight:100};<br/>\nvar calPSPConf = {};<br/>\n\n//Creating the Calendar.<br/>\nvar Calendar = new kony.ui.Calendar(calBasicConf, calLayoutConf, calPSPConf);<br/>\n\n//Calendar clear Method call\nCalendar.clear();</pre>",
                        "!type": "fn()"
                    },
                    "clearAppointments": {
                        "!doc": " This method allows you to remove the data that is set through setData method.\n @Available WindowsPhone 8/8.1 platform\n @access Write\n @usage <pre>\n//Defining the properties for Calendar\nvar calBasicConf = {id : \"calID\", isVisible:true, dateComponents:[31,12,2012,04,30,55], viewType:constants.CALENDAR_VIEW_TYPE_DAY_VIEW};\nvar calLayoutConf = {};\nvar calPSPConf = {};\n\n//Creating the Calendar\nvar Calendar = new kony.ui.Calendar(calBasicConf, calLayoutConf, calPSPConf);\n\n//delete appointments method call\nCalendar.clearAppointments(\"12-10-2014\");</pre>",
                        "!type": "fn()"
                    },
                    "clearData": {
                        "!doc": "  This method allows you to remove the data that is set through setData method.\n  @Available All Platforms\n  @access Write\n  @usage <pre>\n//Defining the properties for Calendar<br/>\n var calBasicConf = {id : \"calID\", isVisible:true, dateComponents:[31,12,2012,04,30,55], skin:\"konytextar\", focusSkin:\"calFocus\", dateFormat:\"dd/MM/yyyy\", viewType:constants.CALENDAR_VIEW_TYPE_GRID_POPUP, validStartDate:[01,01,2012], validEndDate:[31,12,2012], date:[31,12,2012], placeholder:\"JSCalendar\", calendarIcon:\"cal.png\"};<br/>\n var calLayoutConf = {containerWeight:100};<br/>\n var calPSPConf = {};<br/>\n\n //Creating the Calendar.<br/>\n var Calendar = new kony.ui.Calendar(calBasicConf, calLayoutConf, calPSPConf);<br/>\n\n //Calendar clearData Method call\n Calendar.clearData();</pre>",
                        "!type": "fn()"
                    },
                    "containerHeight": {
                        "!doc": "Specifies the height of the container in terms of percentage. The percentage is with reference to the value of containerHeightReference property. This property is applicable only when you set viewType as CALENDAR_VIEW_TYPE_GRID_POPUP or CALENDAR_VIEW_TYPE_GRID_ONSCREEN\n@property {Number}\n@Available Available on iOS platform only\n@access Read and Write",
                        "!type": "number"
                    },
                    "containerHeightReference": {
                        "!doc": "Specifies the reference for the height of the container based on option that you set for containerHeight. The container height percentage is calculated based on eigher HEIGHT_BY_FORM_REFERENCE or HEIGHT_BY_PARENT_WIDTH. This property is applicable only when you set viewType as CALENDAR_VIEW_TYPE_GRID_POPUP or CALENDAR_VIEW_TYPE_GRID_ONSCREEN\n@property {number}\n@Available Available on iOS platform only\n@access Read and Write",
                        "!type": "number"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget widget. The parent widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms except Win Mobile 6x.\n@access Read and Write",
                        "!type": "number"
                    },
                    "contentAlignment": {
                        "!doc": "Specifies the alignment of the text on the Calendar with respect to its boundaries.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "createAnimation": {
                        "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                        "!type": "fn(animationDef: ?)"
                    },
                    "data": {
                        "!doc": "A JSObjects that represents the actual data to be rendered in each cell.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "dateComponents": {
                        "!doc": "Specifies the date that appears as default in the date field. The value should be an array object with six elements in [dd, mm, yyyy,hh, mm, ss] format.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "dateFormat": {
                        "!doc": "Specifies the date format in which the selected date must appear on the display and when accessed programmatically the \"date\" property.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "day": {
                        "!doc": "Reads the day portion of the currently selected date.\n@property {Number}\n@Available All Platforms\n@access Read",
                        "!type": "number"
                    },
                    "dayTextAlignmentInCell": {
                        "!doc": "Specifies the alignment of the text for a calendar day cell with respect to its boundaries. The default option is CONTENT_ALIGN_CENTER. This property is applicable only when you set viewType as CALENDAR_VIEW_TYPE_GRID_POPUP or CALENDAR_VIEW_TYPE_GRID_ONSCREEN.\n@property {Number}\n@Available Available on iOS platform only\n@access Read and Write",
                        "!type": "number"
                    },
                    "deleteAppointments": {
                        "!doc": " This method allows you to delete existing appointments or array of string consisting of unique ids that represent each appointment to any of the calendar scheduler views.\n @Available WindowsPhone 8/8.1 platform\n @access Write\n @usage <pre>\n//Defining the properties for Calendar\nvar calBasicConf = {id : \"calID\", isVisible:true, dateComponents:[31,12,2012,04,30,55], viewType:constants.CALENDAR_VIEW_TYPE_DAY_VIEW};\nvar calLayoutConf = {};\nvar calPSPConf = {};\n\n//Creating the Calendar\nvar Calendar = new kony.ui.Calendar(calBasicConf, calLayoutConf, calPSPConf);\nvar deleteAppt = [\"cdb345\", \"def125\"]\n//The ids \"cdb345\" and \"def125\" are the unique ids of appointment obtained when user taps on the appointment.\nvar deleteAppt = [\n    {\n        \"startData\": \"2014-10-12 00:00:00\",\n        \"endDate\": \"2014-10-13 04:00:00\",\n        \"Subject\": \"Travel to Paris\",\n        \"isAllDay\": false,\n        \"Location\": \"Paris, France\"\n        \"Description\": \"Travel to Paris for a meeting\",\n        \"skin\": {\"cellcolor\":\"#FF09609\"},\n        \"info\": {}\n    },\n    {\n        \"startData\": \"2014-10-14 00:00:00\",\n        \"endDate\": \"2014-10-15 04:00:00\",\n        \"Subject\": \"Travel to US\",\n        \"isAllDay\": false,\n        \"Location\": \"Washington, USA\"\n        \"Description\": \"Travel to Washington for a meeting\",\n        \"skin\": {\"cellcolor\":\"#FF09609\"},\n        \"info\": {}\n    }\n]\n\n//delete appointments method call\nCalendar.deleteAppointments(deleteAppt);</pre>",
                        "!type": "fn()"
                    },
                    "displayedMonth": {
                        "!doc": "Sets or gets the current displayed month and year of the calendar. Using this property you can change the current month and year. This property is applicable only when you set viewType as CALENDAR_VIEW_TYPE_GRID_POPUP or CALENDAR_VIEW_TYPE_GRID_ONSCREEN.\n@property {Array}\n@Available Available on iOS platform only\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "enableRangeOfDates": {
                        "!doc": " This method allows you to enable/disable the range of dates that fall between the startdate and enddate and disables/enables the rest of the dates that fall in between startdate and enddate which are set through code or IDE.\n @param startDate{Object} Specifies the start date in a tabular format which follows {dd,mm,yyyy} convention .<b>Mandatory</b>\n @param endDate{Object} Specifies the end date in a tabular format which follows {dd,mm,yyyy} convention.<b>Mandatory</b>\n @param skin{String} Specifies the skin to be used to represent the enabled or disabled dates.<b>Mandatory</b>\n @param enable{Boolean} Specifies the boolean value that indicates if the dates listed must be enabled or disabled.<b>Mandatory</b>\n @Available iPhone,iPad,Android,BlackBerry,Windows,Mobile Web(Advanced),SPA\n @access Write\n @usage <pre>\n//Defining the properties for Calendar<br/>\nvar calBasicConf = {id : \"calID\", isVisible:true, dateComponents:[31,12,2012,04,30,55], skin:\"konytextar\", focusSkin:\"calFocus\", dateFormat:\"dd/MM/yyyy\", viewType:constants.CALENDAR_VIEW_TYPE_GRID_POPUP, validStartDate:[01,01,2012], validEndDate:[31,12,2012], date:[31,12,2012], placeholder:\"JSCalendar\", calendarIcon:\"cal.png\"};<br/>\nvar calLayoutConf = {containerWeight:100};<br/>\nvar calPSPConf = {};<br/>\n\n//Creating the Calendar.<br/>\nvar Calendar = new kony.ui.Calendar(calBasicConf, calLayoutConf, calPSPConf);<br/>\n\n//EnableRangeOfDates Method call<br/>\nCalendar.enableRangeOfDates([07,04,2012], [21,04,2012], skin:\"konytextar\", true);</pre>",
                        "!type": "fn(startDate: ?, endDate: ?, skin: ?, enable: ?)"
                    },
                    "focusSkin": {
                        "!doc": "This is a skin property and it determines the look and feel of the widget when focused.\n@property {String}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "string"
                    },
                    "formattedDate": {
                        "!doc": "Specifies the Currently selected data as string the format that is set through \"dateFormat\" property.\n@property {String}\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "getAppointments": {
                        "!doc": " This method is used to get the appointments from the calender view types.\n @Available WindowsPhone 8/8.1 platform\n @access Write\n @usage <pre>\nvar addAppt = [\n    {\n        \"startData\": \"2014-10-12 00:00:00\",\n        \"endDate\": \"2014-10-13 04:00:00\",\n        \"Subject\": \"Travel to Paris\",\n        \"isAllDay\": false,\n        \"Location\": \"Paris, France\"\n        \"Description\": \"Travel to Paris for a meeting\",\n        \"skin\": {\"cellcolor\":\"#FF09609\"},\n        \"info\" : {}\n    },\n    {\n        \"startData\": \"2014-10-14 00:00:00\",\n        \"endDate\": \"2014-10-15 04:00:00\",\n        \"Subject\": \"Travel to US\",\n        \"isAllDay\": false,\n        \"Location\": \"Washington, USA\"\n        \"Description\": \"Travel to Washington for a meeting\",\n        \"skin\": {\"cellcolor\":\"#FF09609\"},\n        \"info\": {}\n    }\n]\n\n//Defining the properties for Calendar\nvar calBasicConf = {id : \"calID\", isVisible:true, dateComponents:[31,12,2012,04,30,55], viewType:constants.CALENDAR_VIEW_TYPE_DAY_VIEW};\nvar calLayoutConf = {};\nvar calPSPConf = {};\n\n//Creating the Calendar\nvar Calendar = new kony.ui.Calendar(calBasicConf, calLayoutConf, calPSPConf);\n\n//delete appointments method call\nCalendar.getAppointments(\"12-10-2014\");</pre>",
                        "!type": "fn()"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "hideDaysCalendar": {
                        "!doc": "Indicates if the weekdays are hidden on the header of the grid calendar. This property is applicable only when you set viewType as CALENDAR_VIEW_TYPE_GRID_POPUP or CALENDAR_VIEW_TYPE_GRID_ONSCREEN.\n@property {Boolean}\n@Available Available on iOS platform only\n@access Read and Write",
                        "!type": "bool"
                    },
                    "hideMonthsHeader": {
                        "!doc": "Indicates if the months header is hidden on the header of the grid calendar including navigation buttons. This property is applicable only when you set viewType as CALENDAR_VIEW_TYPE_GRID_POPUP or CALENDAR_VIEW_TYPE_GRID_ONSCREEN.\n@property {Boolean}\n@Available Available on iOS platform only\n@access Read and Write",
                        "!type": "bool"
                    },
                    "hour": {
                        "!doc": "Reads the hour portion of the currently selected date.\n@property {Number}\n@Available All Platforms\n@access Read",
                        "!type": "number"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the visibility of the widget on the form.\n@property {Boolean}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x.\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "layoutType": {
                        "!doc": "Specifies if the arrangement of the widgets either in free form or horizontal or vertical direction (kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, or kony.flex.FLOW_VERTICAL).\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x.\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minutes": {
                        "!doc": "Reads the minutes portion of the currently selected date.\n@property {Number}\n@Available All Platforms\n@access Read",
                        "!type": "number"
                    },
                    "mode": {
                        "!doc": "Specifies the mode in which the calendar is used.\n@property {String}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "string"
                    },
                    "modifyAppointment": {
                        "!doc": " This method allows you to modify the existing appointment with new appointment.\n @Available WindowsPhone 8/8.1 platform\n @access Write\n @usage <pre>\nvar oldAppt = [\n    {\n        \"startData\": \"2014-10-12 00:00:00\",\n        \"endDate\": \"2014-10-13 04:00:00\",\n        \"Subject\": \"Travel to Paris\",\n        \"isAllDay\": false,\n        \"Location\": \"Paris, France\"\n        \"Description\": \"Travel to Paris for a meeting\",\n        \"skin\": {\"cellcolor\":\"#FF09609\"},\n        \"info\": {}\n    }\n]\nvar newAppt = [\n    {\n        \"startData\": \"2014-10-14 00:00:00\",\n        \"endDate\": \"2014-10-15 04:00:00\",\n        \"Subject\": \"Travel to Paris\",\n        \"isAllDay\": false,\n        \"Location\": \"Paris, France\"\n        \"Description\": \"Travel to Paris for a meeting\",\n        \"skin\": {\"cellcolor\":\"#FF09609\"},\n        \"info\": {}\n    }\n]\n\n//Defining the properties for Calendar\nvar calBasicConf = {id : \"calID\", isVisible:true, dateComponents:[31,12,2012,04,30,55], viewType:constants.CALENDAR_VIEW_TYPE_DAY_VIEW};\nvar calLayoutConf = {};\nvar calPSPConf = {};\n\n//Creating the Calendar\nvar Calendar = new kony.ui.Calendar(calBasicConf, calLayoutConf, calPSPConf);\n\n//modify appointment method call\nCalendar.modifyAppointment(oldAppt, newAppt);</pre>",
                        "!type": "fn()"
                    },
                    "month": {
                        "!doc": "Reads the month portion of the currently selected date.\n@property {Number}\n@Available All Platforms\n@access Read",
                        "!type": "number"
                    },
                    "navigateToNextMonth": {
                        "!doc": "  This method allows you to navigate to next month of the calendar widget.\n  @Available All Platforms\n  @access Write\n  @usage <pre>\n//Defining the properties for Calendar<br/>\n var calBasicConf = {id : \"calID\", isVisible:true, dateComponents:[31,12,2012,04,30,55], skin:\"konytextar\", focusSkin:\"calFocus\", dateFormat:\"dd/MM/yyyy\", viewType:constants.CALENDAR_VIEW_TYPE_GRID_POPUP, validStartDate:[01,01,2012], validEndDate:[31,12,2012], date:[31,12,2012], placeholder:\"JSCalendar\", calendarIcon:\"cal.png\"};<br/>\n var calLayoutConf = {containerWeight:100};<br/>\n var calPSPConf = {};<br/>\n\n //Creating the Calendar.<br/>\n var Calendar = new kony.ui.Calendar(calBasicConf, calLayoutConf, calPSPConf);<br/>\n\n //navigateToNextMonth Method call\n Calendar.navigateToNextMonth();</pre>",
                        "!type": "fn()"
                    },
                    "navigateToPreviousMonth": {
                        "!doc": "  This method allows you to navigate to previous month of the calendar widget.\n  @Available All Platforms\n  @access Write\n  @usage <pre>\n//Defining the properties for Calendar<br/>\n var calBasicConf = {id : \"calID\", isVisible:true, dateComponents:[31,12,2012,04,30,55], skin:\"konytextar\", focusSkin:\"calFocus\", dateFormat:\"dd/MM/yyyy\", viewType:constants.CALENDAR_VIEW_TYPE_GRID_POPUP, validStartDate:[01,01,2012], validEndDate:[31,12,2012], date:[31,12,2012], placeholder:\"JSCalendar\", calendarIcon:\"cal.png\"};<br/>\n var calLayoutConf = {containerWeight:100};<br/>\n var calPSPConf = {};<br/>\n\n //Creating the Calendar.<br/>\n var Calendar = new kony.ui.Calendar(calBasicConf, calLayoutConf, calPSPConf);<br/>\n\n //navigateToPreviousMonth Method call\n Calendar.navigateToPreviousMonth();</pre>",
                        "!type": "fn()"
                    },
                    "noOfMonths": {
                        "!doc": "Specifies the number between 1 and 12 which indicates the number of months to be displayed when the calendar is selected. It is supported only on Desktop Web platform.\n@property {Number}\n@Available Available on Desktop Web platform only\n@access Read and Write",
                        "!type": "number"
                    },
                    "onAppointmentTap": {
                        "!doc": "This event is triggered when you tap any of the existing appointments in the following view types:\n   CALENDAR_VIEW_TYPE_DAY_VIEW\n   CALENDAR_VIEW_TYPE_WEEK_VIEW\n   CALENDAR_VIEW_TYPE_MONTH_VIEW\n@property {Event}\n@Available Windows Phone 8/8.1 platform",
                        "!type": "fn()"
                    },
                    "onEmptyCellTap": {
                        "!doc": "This event is triggered when you tap on any of the empty cells of the calendar day view.\n@property {Event}\n@Available Windows Phone 8/8.1 platform",
                        "!type": "fn()"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onSelection": {
                        "!doc": "This event is triggered when an item is selected or deselected.\n@property {Event}\n@Available All Platforms except Server side Mobile Web platform.\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchEnd": {
                        "!doc": "An event callback is invoked by the platform when the user touch is released from the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchMove": {
                        "!doc": "An event callback is invoked by the platform when the touch moves on the touch surface continuously until the movement ends. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchStart": {
                        "!doc": "An event callback is invoked by the platform when the user touches the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "padding": {
                        "!doc": "specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms except Mobile Web (basic).\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "placeholder": {
                        "!doc": "Specifies the temporary or substitute text that must be displayed until a date is selected.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeDataAt": {
                        "!doc": "  This method allows you to remove data set in a specific argument.\n  @param date{String} Specifies the date in a tabular format which follows{dd,mm,yyyy} convention.\n  @Available All Platforms\n  @access Write\n  @usage <pre>\n//Defining the properties for Calendar<br/>\n var calBasicConf = {id : \"calID\", isVisible:true, dateComponents:[31,12,2012,04,30,55], skin:\"konytextar\", focusSkin:\"calFocus\", dateFormat:\"dd/MM/yyyy\", viewType:constants.CALENDAR_VIEW_TYPE_GRID_POPUP, validStartDate:[01,01,2012], validEndDate:[31,12,2012], date:[31,12,2012], placeholder:\"JSCalendar\", calendarIcon:\"cal.png\"};<br/>\n var calLayoutConf = {containerWeight:100};<br/>\n var calPSPConf = {};<br/>\n\n //Creating the Calendar.<br/>\n var Calendar = new kony.ui.Calendar(calBasicConf, calLayoutConf, calPSPConf);<br/>\n\n //removeDataAt Method call\n Calendar.removeDataAt(\"31,12,2013\");</pre>",
                        "!type": "fn(date: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "seconds": {
                        "!doc": "Reads the seconds portion of the currently selected date.\n@property {Number}\n@Available All Platforms\n@access Read",
                        "!type": "number"
                    },
                    "setData": {
                        "!doc": "  This method allows you to set new data to the widgets as specified in the widgetDataMap. The dictionary is of format {\"dd/mm/yyyy\":{widget data confirming to widgetDataMapForCell}}\n  @param dictionary{Object} Specifies the date in a tabular format which follows{dd,mm,yyyy} convention.\n  @Available All Platforms\n  @access Write\n  @usage <pre>\n//Defining the properties for Calendar<br/>\n var calBasicConf = {id : \"calID\", isVisible:true, dateComponents:[31,12,2012,04,30,55], skin:\"konytextar\", focusSkin:\"calFocus\", dateFormat:\"dd/MM/yyyy\", viewType:constants.CALENDAR_VIEW_TYPE_GRID_POPUP, validStartDate:[01,01,2012], validEndDate:[31,12,2012], date:[31,12,2012], placeholder:\"JSCalendar\", calendarIcon:\"cal.png\"};<br/>\n var calLayoutConf = {containerWeight:100};<br/>\n var calPSPConf = {};<br/>\n\n //Creating the Calendar.<br/>\n var Calendar = new kony.ui.Calendar(calBasicConf, calLayoutConf, calPSPConf);<br/>\n\n //setData Method call\n Calendar.setData(data1);</pre>",
                        "!type": "fn(dictionary: ?)"
                    },
                    "setDataAt": {
                        "!doc": "  This method allows you to set new data to the calendar widgets. When you set new data, the existing data will be replaced with the new data. If the calendar has no data, the new data is placed in the calendar.\n  @param date{String} Specifies the date in a tabular format which follows{dd,mm,yyyy} convention.\n  @param data{Object} Specifies the data that confirms to widgetDataMapForCell.\n  @Available All Platforms\n  @access Write\n  @usage <pre>\n//Defining the properties for Calendar<br/>\n var calBasicConf = {id : \"calID\", isVisible:true, dateComponents:[31,12,2012,04,30,55], skin:\"konytextar\", focusSkin:\"calFocus\", dateFormat:\"dd/MM/yyyy\", viewType:constants.CALENDAR_VIEW_TYPE_GRID_POPUP, validStartDate:[01,01,2012], validEndDate:[31,12,2012], date:[31,12,2012], placeholder:\"JSCalendar\", calendarIcon:\"cal.png\"};<br/>\n var calLayoutConf = {containerWeight:100};<br/>\n var calPSPConf = {};<br/>\n\n //Creating the Calendar.<br/>\n var Calendar = new kony.ui.Calendar(calBasicConf, calLayoutConf, calPSPConf);<br/>\n\n //setDataAt Method call\n Calendar.setDataAt(\"31,12,2013\",{template:newBox,lblAppointments:\"4\",lblTasks:\"2\"});</pre>",
                        "!type": "fn(date: ?, data: ?)"
                    },
                    "setDatesSkin": {
                        "!doc": " This method allows you to set the skin and control the look and feel of each cell in the calendar.\n @param dates{Object} Specifies the dates in a table format which follows {dd,mm,yyyy} convention .<b>Mandatory</b>\n @param skin{String} Specifies the skin to be used to represent the enabled or disabled dates.<b>Mandatory</b>\n @Available iPhone,iPad,Android,BlackBerry,Windows,Mobile Web(Advanced),SPA\n @access Write\n @usage <pre>\n//Defining the properties for Calendar<br/>\nvar calBasicConf = {id : \"calID\", isVisible:true, dateComponents:[31,12,2012,04,30,55],skin:\"konytextar\", focusSkin:\"calFocus\", dateFormat:\"dd/MM/yyyy\", viewType:constants.CALENDAR_VIEW_TYPE_GRID_POPUP, validStartDate:[01,01,2012], validEndDate:[31,12,2012], date:[31,12,2012], placeholder:\"JSCalendar\", calendarIcon:\"cal.png\"};<br/>\nvar calLayoutConf = {containerWeight:100};<br/>\nvar calPSPConf = {};<br/>\n\n//Creating the Calendar<br/>\nvar Calendar = new kony.ui.Calendar(calBasicConf, calLayoutConf, calPSPConf);<br/>\n\n//setDatesSkin Method call<br/>\nCalendar.setDatesSkin([[27,04,2012],[30,04,2012],[01,04,2012]], skin:\"konytextar\");</pre>",
                        "!type": "fn(dates: ?, skin: ?)"
                    },
                    "setEnableAll": {
                        "!doc": " This method allows you to enable all the dates that fall between the startdate and enddate.\n @Available iPhone,iPad,Android,BlackBerry,Windows,Mobile Web(Advanced),SPA\n @access Write\n @usage <pre>\n//Defining the properties for Calendar<br/>\nvar calBasicConf = {id : \"calID\", isVisible:true, dateComponents:[31,12,2012,04,30,55], skin:\"konytextar\", focusSkin:\"calFocus\", dateFormat:\"dd/MM/yyyy\", viewType:constants.CALENDAR_VIEW_TYPE_GRID_POPUP, validStartDate:[01,01,2012], validEndDate:[31,12,2012], date:[31,12,2012], placeholder:\"JSCalendar\", calendarIcon:\"cal.png\"};<br/>\nvar calLayoutConf = {containerWeight:100};<br/>\nvar calPSPConf = {};<br/>\n\n//Creating the Calendar.<br/>\nvar Calendar = new kony.ui.Calendar(calBasicConf, calLayoutConf, calPSPConf);<br/>\n\n//setEnableAll Method call<br/>\nCalendar.setEnableAll();</pre>",
                        "!type": "fn()"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@param animationConfig {Object} Specifies the animation configuration object.<b> Note: This is OPTIONAL parameter and is supported only on iOS and Android platforms.</b></dd>\n   <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animEffect</b> {Object} Specifies the animation effect. Following are the available options of animation effect. <b>Optional </b></pre> </pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_EXPAND:&#160;Specifies the widget must expand gradually by increasing the height of the widget. This option is applicable only when visibility is turned on.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_REVEAL: Specifies the widget must appear gradually by decreasing the transparency of the widget.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_COLLAPSE: This is applicable when the visibility is turned off. Specifies the widget must collapse gradually by decreasing the height of the widget.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_FADE: This is applicable when the visibility is turned off. Specifies the widget must disappear gradually by increasing the transparency of the widget.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_NONE:&#160;This is the default option. Specifies animation should not be applied to the widget, but layout animations are applied on the Form that may be change the current widgets layout. The animation events are not triggered when this option is set.</pre></li></pre></dd>\n\n   <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animDuration - Optional </b> {Number} Specifies the duration of the animation effect in seconds. The default value is 1. <b>Optional </b></pre> </pre></dd>\n\n   <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animDelay - Optional </b> {Number} Specifies the delay of the animation effect in seconds. The default value is 0. <b>Optional </b></pre> </pre></dd>\n\n   <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp; <b>- animCurve - Optional </b> Specifies the animation curve to be applied while playing the animation. An animation curve defines the speed of the animations at different intervals of the animation duration. Following are the available options of animation curve: </p></dd> </pre> </pre> </dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEIN:&#160;Specifies the animation to start slowly and then continues with normal speed.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEOUT: Specifies the animation to start with normal speed and slowdown towards the end.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEINOUT:&#160;Specifies the animation to start slowly and then continues with normal speed and then again slowdown towards the end.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_LINEAR:&#160;This is the default value. Specifies the animation to continue with normal speed.</pre></li></pre></dd>\n\n   <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp; <b>- animCallBacks - Optional </b> It is a JS dictionary containing the events invoked by the platform during the animation life cycle. Following are the available events: </p></dd> </pre> </pre> </dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; animStarted:&#160;Invoked at the end of the animation without any parameters. Following is the signature of the event:</pre></li></pre></dd><b>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp;<b>function animStarted() </b></dd> </p></pre> </pre> </pre> </br> </pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; animEnded: Invoked at the end of the animation without any parameters. Following is the signature of the event:</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp;<b>function animEnded() </b></pre> </pre> </pre>\n\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?, animationConfig: ?)"
                    },
                    "skin": {
                        "!doc": "Specifies a background skin for Calendar widget.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "switchToDate": {
                        "!doc": "This method is used to switch date from the calender view types.\n@param date{Object} Specifies the start date in a tabular format which follows {dd,mm,yyyy} convention.<b>Mandatory</b>\n@Available WindowsPhone 8/8.1 platform\n@access Write",
                        "!type": "fn()"
                    },
                    "timeSheetSkin": {
                        "!doc": "Specifies each cell color of the timesheet view when the calendar view type it set as CALENDAR_VIEW_TYPE_MONTH_VIEW.\n@property {Object}\n@Available WindowsPhone 8/8.1 platform\n@access Read and Write"
                    },
                    "titleOnPopup": {
                        "!doc": "Specifies the title text to be displayed on the calendar popup.\n@property {String}\n@Available SPA,Mobile Web(BJS),Mobile Web (Advanced)\n@access Read and Write",
                        "!type": "string"
                    },
                    "toolTip": {
                        "!doc": "Specifies the hint text when the cursor hovers over a widget.\n@property {String}\n@Available windows 8\n@access Read and Write",
                        "!type": "string"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "validEndDate": {
                        "!doc": "Specifies the array representing the day,month and year portions of the date in the same order.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "validStartDate": {
                        "!doc": "Specifies the array representing the day,month and year portions of the date in the same order.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "viewConfig": {
                        "!doc": "Specifies the view configuration for different viewtypes. Each view will have a key representing the view name and the value being the hash of key,value configurations.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "viewType": {
                        "!doc": "Specifies the view types of the Calendar.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "widgetDataMapForCell": {
                        "!doc": "Specifies the mapping information between the widget id's and the keys in the data. It is the developer responsibility to ensure that widget data map to accomodate all the widget ids required including the widgets referred in dynamic templates.\n@property {Array}\n@Available Available on iOS platform only\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "year": {
                        "!doc": "Reads the year portion of the currently selected date.\n@property {Number}\n@Available All Platforms\n@access Read",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "Camera": {
                "!doc": "Creates a new Camera object.\n@class kony.ui.Camera\n@returns {kony.ui.Camera}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.Camera",
                "prototype": {
                    "accessMode": {
                        "!doc": "Camera - Platform Specific Properties start here",
                        "!type": "number"
                    },
                    "accessibilityConfig": {
                        "!doc": "Specifies the accessibility configuration property for the widget.\n@property {Object}\n@Available iPhone, Android, SPA-iPhone, and SPA-Android Platforms\n@access Read and Write\n@usage <pre>\naccessibilityConfig =  {\n       \"a11yHidden\": false,\n       \"a11yValue\": \"Your text goes here\",\n       \"a11yLabel\": \"Your text goes here\",\n       \"a11yHint\": \"Your text goes here\"\n   }</pre>"
                    },
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "backgroundColor": {
                        "!doc": "Specifies the background color of the widget in hex format.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "base64": {
                        "!doc": "Returns the base64 encoded string of the image raw bytes.\n@property {String}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read",
                        "!type": "string"
                    },
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "cameraOptions": {
                        "!doc": "Specifies the camera options that can be used on a form.\n@property {Object}\n@Available iPhone, iPad, Android/Android Tablet, Windows (Mango), Windows 8\n@access Read and Write"
                    },
                    "cameraSource": {
                        "!doc": "Specifies the camera source(Front/Rear).\n@property {Number}\n@Available iOS, Android\n@access Read and Write",
                        "!type": "number"
                    },
                    "captureMode": {
                        "!doc": "Specifies the camera mode(Photo/Video).\n@property {Number}\n@Available iOS, Android\n@access Read and Write",
                        "!type": "number"
                    },
                    "captureOrientation": {
                        "!doc": "Specifies the captured image orientation.\n@property {Number}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "number"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "closeCamera": {
                        "!doc": "This method allows you to close camera on all platforms. But on Andoid platform, this method is applicable only when an overlay form is enabled.\n@Available All Platforms except on iPhone, iPad, Android, and Windows (mango) platform\n@access Write",
                        "!type": "fn()"
                    },
                    "compressionLevel": {
                        "!doc": "Specifies the compression level or picture quality with which the captured image must be stored. You can specify the compression level value between 0 (best picture quality) and 100 (low picture quality).\n@property {Number}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget widget. The parent widget space is distributed to its child widgets based on this weight factor.All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "contentAlignment": {
                        "!doc": "Specifies the alignment of the text on the camera with respect to its boundaries.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "createAnimation": {
                        "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                        "!type": "fn(animationDef: ?)"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "enableOverlay": {
                        "!doc": "The camera is launched with the capability of overlaying a Form UI over the camera view.\n@property {Boolean}\n@Available Windows Phone (Mango) and Android/Android Tablet",
                        "!type": "bool"
                    },
                    "enablePhotoCropFeature": {
                        "!doc": "Specifies the Property to enable the photo crop capability,so that user should be able to crop the captured manually.\n@property {Boolean}\n@Available Windows Phone (Mango) and Android/Android Tablet\n@access Read and Write",
                        "!type": "bool"
                    },
                    "focusSkin": {
                        "!doc": "This is a skin property and it determines the look and feel of the widget when in focus.\n@property {String}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "string"
                    },
                    "getSupportedCameraSources": {
                        "!doc": "This method allows you to find the list of supported camera sources\n@Available iOS, Android",
                        "!type": "fn()"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "imageFormat": {
                        "!doc": "Specifies if the image must be stored as a PNG (Portable Network Graphics) or a JPEG (Joint Photographic Experts Group) image.\n@property {Number}\n@Available iPhone and iPad\n@access Read and Write",
                        "!type": "number"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the Property to set widget visibility.\n@property {Boolean}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "layoutType": {
                        "!doc": "Specifies if the arrangement of the widgets either in free form or horizontal or vertical direction (kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, or kony.flex.FLOW_VERTICAL).\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x.\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxSideOfTheImage": {
                        "!doc": "Indicates the length of the max side of the image to which the actual image should be scaled before returning the captured image to camera handler.\n@property {Number}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "nativeUserInterface": {
                        "!doc": "Specifies if the camera must have the native interface on camera view (an interface with the default platform controls for camera) or the user interface with custom options.\n@property {Boolean}\n@Available iPhone and iPad\n@access Read and Write",
                        "!type": "bool"
                    },
                    "onCapture": {
                        "!doc": "Event callback invoked when a picture is captured.\n@property {Event}\n@Available All Platforms except on all Mobile Web platforms.\n@access Write",
                        "!type": "fn()"
                    },
                    "onFailure": {
                        "!doc": "For any specific configuration of the camera widget, if preview is not possible, preview should not happen and onFailure callback will be invoked using appropriate error code as an argument.\n@property {Event}\n@Available iOS, Android\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onTouchEnd": {
                        "!doc": "An event callback is invoked by the platform when the user touch is released from the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchMove": {
                        "!doc": "An event callback is invoked by the platform when the touch moves on the touch surface continuously until the movement ends. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchStart": {
                        "!doc": "An event callback is invoked by the platform when the user touches the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "openCamera": {
                        "!doc": "This method opens the camera preview.\n@Available iOS, Android\n @usage <pre>\n   //Creating the Camera.\n   var camera1 = new kony.ui.Camera(camBasic, camLayout, camPSP);\n\n   //Calling the openCamera method.\n   camera1.openCamera();\n </pre>",
                        "!type": "fn()"
                    },
                    "overlayConfig": {
                        "!doc": "Specifies the overlay configuration parameters for overlaying a form.\n@property {Object}\n@Available iPhone, iPad, Android/Android Tablet, Windows (Mango), Windows 8\n@access Read and Write"
                    },
                    "padding": {
                        "!doc": "specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "rawBytes": {
                        "!doc": "Specifies the rawbytes representing an Image (usually the image captured from the camera) that can be used as a background for the Camera.\n@property {Object}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "releaseRawBytes": {
                        "!doc": "This method allows you to delete the rawbytes for the image captured from the camera.\n@param rawbytes{Number} Indicates the rawbytes for the image captured from the camera.<b>Mandatory</b>\n@Available Available on iPhone, iPad, Android, Android Tablet, and Windows Phone platforms\n@access Write",
                        "!type": "fn(rawbytes: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "scaleFactor": {
                        "!doc": "Specifies the ratio by which the captured image is reduced. You can set the scale factor between 10 and 100. If you set the scale factor as 100, no reduction takes place and the actual image is returned.\n@property {Number}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "skin": {
                        "!doc": "Specifies the look and feel of the Camera when not in focus.\n@property {String}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "string"
                    },
                    "startVideoCapture": {
                        "!doc": "Start a video capture programmatically which will be ended at videoDuration, if videoDuration is set.\nIf videoDuration is not set, video capture can be stopped using stopVideoCapture() call.\n@Available iOS, Android",
                        "!type": "fn()"
                    },
                    "stopVideoCapture": {
                        "!doc": "Current video capture can be stopped using stopVideoCapture() call.\n@Available iOS, Android",
                        "!type": "fn()"
                    },
                    "supportedVideoQualityLevels": {
                        "!doc": "It returns an array of possible quality levels for the given device for the configured camera source.\n @property {Number}\n @Available Android\n @access Read",
                        "!type": "number"
                    },
                    "takePicture": {
                        "!doc": "This method allows you to capture the picture when the camera is in preview mode. But in Android platform, this method is applicable only when an overlay form is enabled.\n@Available All Platforms except on iPhone, iPad, Android, and Windows (mango) platform\n@access Write",
                        "!type": "fn()"
                    },
                    "text": {
                        "!doc": "Specifies a general or descriptive text for the Camera widget.\n@property {String}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "string"
                    },
                    "toolTip": {
                        "!doc": "Specifies the hint text when the cursor hovers over a widget.\n@property {String}\n@Available windows 8\n@access Read and Write",
                        "!type": "string"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "videStabilization": {
                        "!doc": "To support underlying SDK’s feature for video stabilization against camera motion while shooting video\n@property {Boolean}\n@Available Android",
                        "!type": "bool"
                    },
                    "videoDuration": {
                        "!doc": "To set the max videoDuration(in seconds)\n@property {Number}\n@Available iOS, Android",
                        "!type": "number"
                    },
                    "videoFormat": {
                        "!doc": "Specifies the camera source(Front/Rear).\n @property {Number}\n @Available iOS\n @access Read and Write",
                        "!type": "number"
                    },
                    "videoQualityLevel": {
                        "!doc": "This property is used to dictate the quality of the video to be captured. It has to be set with (a)one of the constants from supportedVideoQualityLevels array for android & (b)one of the predefined constants for iPhone.\n@property {Number}\n@Available iOS, Android\n@access Read and Write",
                        "!type": "number"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "CheckBoxGroup": {
                "!doc": "Creates a new CheckBoxGroup object.\n@class kony.ui.CheckBoxGroup\n@returns {kony.ui.CheckBoxGroup}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.CheckBoxGroup",
                "prototype": {
                    "accessibilityConfig": {
                        "!doc": "Specifies the accessibility configuration property for the widget.\n@property {Object}\n@Available iPhone, Android, SPA-iPhone, and SPA-Android Platforms\n@access Read and Write\n@usage <pre>\n   var accessibilityConfig = {\n       \"a11yHidden\": false,\n       \"a11yValue\": \"Your text goes here\",\n       \"a11yLabel\": \"Your text goes here\",\n       \"a11yHint\": \"Your text goes here\"\n   }</pre>"
                    },
                    "anchorPoint": {
                        "!doc": "Specifies the anchor point of the widget bounds rectangle using the widgets coordinate space.\n@property {Object}\n@Available iOS, Android, Windows, SPA\n@access Read and Write"
                    },
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget widget. The parent widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms except Win Mobile 6x.\n@access Read and Write",
                        "!type": "number"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "createAnimation": {
                        "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                        "!type": "fn(animationDef: ?)"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "focusSkin": {
                        "!doc": "Specifies the look and feel of the CheckBox when in focus.\n@property {String}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "string"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "hoverSkin": {
                        "!doc": "Specifies the look and feel of a widget when the cursor hovers on the widget.\n@property {String}\n@Available windows 8,Desktop Web\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory {Yes}\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the visibility of the widget on the form.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "itemOrientation": {
                        "!doc": "Specifies the alignment of the check boxes as horizontal or vertical.\n@property {String}\n@Available All Platforms except iPhone and iPad.\n@access No",
                        "!type": "string"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "layoutType": {
                        "!doc": "Specifies if the arrangement of the widgets either in free form or horizontal or vertical direction (kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, or kony.flex.FLOW_VERTICAL).\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x.\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "masterData": {
                        "!doc": "Specifies  the set of values that must be displayed for the user to make a selection from the available choices.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "masterDataMap": {
                        "!doc": "Specifies  the set of values from which you can make one or more selections. You must set the values from the code.\n@property {Array}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onSelection": {
                        "!doc": "An event callback that is invoked by the platform when an item is selected or deselected.\n@property {Event}\n@Available All Platforms except Mobile Web (basic).\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchEnd": {
                        "!doc": "An event callback is invoked by the platform when the user touch is released from the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchMove": {
                        "!doc": "An event callback is invoked by the platform when the touch moves on the touch surface continuously until the movement ends. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchStart": {
                        "!doc": "An event callback is invoked by the platform when the user touches the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "padding": {
                        "!doc": "Specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms except Mobile Web (basic)\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "selectedKeyValues": {
                        "!doc": "Specifies  the property to return the array of key,value pair selected from the masterdata representing the selected key,value.\n@property {Array}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x\n@access Read",
                        "!type": "[?]"
                    },
                    "selectedKeys": {
                        "!doc": "Specifies  the property to return the array of selected keys from the masterdata representing the selected key.\n@property {Array}\n@Available All Platforms,except Mobile Web (basic) and Win Mobile6x\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget forSPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "shadowDepth": {
                        "!doc": "     Defines the depth of the shadow effect applied to the Widget.\n     @property {Number}\n\t @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the shadowDepth property<br/>\n\t form1.chkBx1.shadowDepth = 10;</pre>",
                        "!type": "number"
                    },
                    "shadowType": {
                        "!doc": "     Sets a type of the shadow effect to apply to the Widget.\n     @property {Number}\n\t @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the shadowType property<br/>\n\t form1.chkBx1.shadowType = constants.VIEW_BOUNDS_SHADOW;</pre>",
                        "!type": "number"
                    },
                    "skin": {
                        "!doc": "Specifies the look and feel of the CheckBox when not in focus.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "toolTip": {
                        "!doc": "Specifies the hint text when the cursor hovers over a widget.\n@property {String}\n@Available windows 8\n@access Read and Write",
                        "!type": "string"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "viewType": {
                        "!doc": "Specifies the view type of the CheckBox.\n@property {Number}\n@Available iPhone,iPad,Android,Android Tablet (only Spinner view is available for the platform)\n@access Read and Write",
                        "!type": "number"
                    },
                    "wheelBackgroundColor": {
                        "!doc": "Specifies the background color for the wheel that is displayed when you click the CheckBox. This property is applicable only when you set the viewType as CHECKBOX_VIEW_TYPE_ONSCREENWHEEL.\n@property {Boolean}\n@Available iOS\n@access Read and Write",
                        "!type": "bool"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "ComboBox": {
                "!doc": "Creates a new ComboBox object.\n@class kony.ui.ComboBox\n@returns {kony.ui.ComboBox}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.ComboBox",
                "prototype": {
                    "accessibilityConfig": {
                        "!doc": "Specifies the accessibility configuration property for the widget.\n@property {Object}\n@Available iPhone, Android, SPA-iPhone, and SPA-Android Platforms\n@access Read and Write\n@usage <pre>\n   var accessibilityConfig = {\n       \"a11yHidden\": false,\n       \"a11yValue\": \"Your text goes here\",\n       \"a11yLabel\": \"Your text goes here\",\n       \"a11yHint\": \"Your text goes here\"\n   }</pre>"
                    },
                    "anchorPoint": "bool",
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "blockedUISkin": {
                        "!doc": "Specifies the skin that must be used to block the interface until the action in progress (for example, a service call) is completed.\n@property {String}\n@Available Mobile Web(Advanced),SPA (iPhone/Android/BlackBerry/Windows NTH)/Playbook\n@access Read and Write",
                        "!type": "string"
                    },
                    "blur": {
                        "!doc": "Enables blur\n@property blur {{enabled: Boolean, value: Number}}\n@Available iOS, Android, Windows, SPA\n@access Read and Write\n@usage <pre>\n   var blur =  {\n       \"enabled\": true,\n       \"value\": 50\n   }</pre>"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget widget. The parent widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms except Win Mobile 6x\n@access Read and Write",
                        "!type": "number"
                    },
                    "contentAlignment": {
                        "!doc": "Specifies the alignment of the text on the Combobox with respect to its boundaries.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "createAnimation": {
                        "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                        "!type": "fn(animationDef: ?)"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "focusSkin": {
                        "!doc": "This is a skin property and it determines the look and feel of the ComboBox widget when in focus.\n@property {String}\n@Available All Platforms except on all Mobile web platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "hoverSkin": {
                        "!doc": "Specifies the look and feel of a widget when the cursor hovers on the widget.\n@property {String}\n@Available windows 8,Desktop Web\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identify ComboBox widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the visibility of the widget on the form.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x.\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "masterData": {
                        "!doc": "Specifies the set of values that must be displayed for the user to make a selection from the available choices.\n@property {Array}\n@Available Android\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "masterDataMap": {
                        "!doc": "Specifies the set of values from which you can make a selection. You must set the values from the code.\n@property {Array}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onSelection": {
                        "!doc": "This event is triggered when you select or unselect any item in ComboBox.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "padding": {
                        "!doc": "Specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms except Mobile Web (basic).\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "placeholder": {
                        "!doc": "Specifies the temporary or substitute text (a hint provided as a word or phrase)that must be displayed on the ComboBox until the actual selection is made.\n@property {String}\n@Available iPhone,iPad,BlackBerry,J2ME,Symbian,Windows Phone/Windows Kiosk\n@access Read and Write",
                        "!type": "string"
                    },
                    "popupFocusSkin": {
                        "!doc": "Specifies the skin that is applied to a focused item in the native popup (list of options available) that appears when you select the ComboBox.\n@property {String}\n@Available BlackBerry\n@access Read and Write",
                        "!type": "string"
                    },
                    "popupSkin": {
                        "!doc": "Specifies the skin that is applied to each item in the native popup (list of options available) that appears when you select the ComboBox.\n@property {String}\n@Available BlackBerry\n@access Read and Write",
                        "!type": "string"
                    },
                    "popupTitle": {
                        "!doc": "Specifies the Title text to be displayed for the ComboBox.\n@property {String}\n@Available Android,Android Tablet and Symbian\n@access Read and Write",
                        "!type": "string"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "selectedKey": {
                        "!doc": "Specifies the value to be shown as selected.\n@property {String}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x\n@access Read and Write",
                        "!type": "string"
                    },
                    "selectedKeyValue": {
                        "!doc": "Returns the array of selected key-value pair.\n@property {Array}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x\n@access Read",
                        "!type": "[?]"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget forSPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms.\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "singleLineText": {
                        "!doc": "If the length of the text is more than the space available, the selected options text will be displayed truncated, in a single line with (...) ellipses.\n @property {Boolean}\n @Available Android/Android Tablet\n @access Read and Write",
                        "!type": "bool"
                    },
                    "singleLineTextInPopup": {
                        "!doc": "If the length of the text is more than the space available, the popup options text will be displayed truncated, in a single line with (...) ellipses.\n @property {Boolean}\n @Available Android/Android Tablet\n @access Read and Write",
                        "!type": "bool"
                    },
                    "skin": {
                        "!doc": "Specifies the look and feel of the ComboBox when not in focus.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "toolTip": {
                        "!doc": "Specifies the hint text when the cursor hovers over a widget.\n@property {String}\n@Available windows 8,Desktop Web\n@access Read and Write",
                        "!type": "string"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "viewConfig": {
                        "!doc": "Specifies the view configuration for different viewtypes. You can set the configuration for toggle view.\n@property {Object}\n@Available iPad,iPhone,Desktop Web\n@access Read and Write"
                    },
                    "viewType": {
                        "!doc": "Specifies the view mode of the ComboBox.\n@property {Number}\n@Available iPhone,iPad,Android/Android Tablet ( only Spinner view is available for the platform)\n@access Read and Write",
                        "!type": "number"
                    },
                    "wheelBackgroundColor": {
                        "!doc": "Specifies the background color for the wheel that is displayed when you click the ComboBox. This property is applicable only when you set the viewType as COMBOBOX_VIEW_TYPE_ONSCREENWHEEL.\n@property {Boolean}\n@Available iOS\n@access Read and Write",
                        "!type": "bool"
                    }
                }
            },
            "CordovaBrowser": {
                "!doc": "Creates a new CordovaBrowser object.\n@class kony.ui.CordovaBrowser\n@returns {kony.ui.CordovaBrowser}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.CordovaBrowser",
                "prototype": {
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "canGoBack": {
                        "!doc": " This method specifies whether the CordovaBrowser can navigate back into history. If the CordovaBrowser cache is empty then this method returns false and the goBack method has no effect.\n @returns {Boolean} status\n @Available All Platforms except SPA\n @access Write\n @usage <pre>\n//Defining the properties for a CordovaBrowser widget with requestURLConfig:requestUrlConf.</br>\nvar requestUrlConf = {URL: \"https://www.google.co.in/\", requestMethod:constants.BROWSER_REQUEST_METHOD_GET};</br>\nvar webBasic = {id : \"browserID\", isVisible:true, screenLevelWidget: false, requestURLConfig:requestUrlConf};</br>\nvar webLayout = {containerWeight:100};</br>\n\n//Creating the CordovaBrowser.</br>\nvar cordovaBrowser = new kony.ui.CordovaBrowser(webBasic, webLayout, {});</br>\n\n//calling canGoBack method</br>\nvar canGoBck = cordovaBrowser.canGoBack();</br>\nalert(\"canGoBack?::\"+canGoBck);</pre>",
                        "!type": "fn() -> bool"
                    },
                    "canGoForward": {
                        "!doc": " This method specifies whether the CordovaBrowser can navigate forward into history. If the CordovaBrowser cache is empty then this method returns false and  goForward method has no effect.\n @returns {Boolean} status\n @Available All Platforms except SPA\n @access Write\n @usage <pre>\n//Defining the properties for a CordovaBrowser widget with requestURLConfig:requestUrlConf.</br>\nvar requestUrlConf = {URL: \"https://www.google.co.in/\", requestMethod:constants.BROWSER_REQUEST_METHOD_GET};</br>\nvar webBasic = {id : \"browserID\", isVisible:true, screenLevelWidget: false, requestURLConfig:requestUrlConf};</br>\nvar webLayout = {containerWeight:100};</br>\n\n//Creating the CordovaBrowser.</br>\nvar cordovaBrowser = new kony.ui.CordovaBrowser(webBasic, webLayout, {});</br>\n\n//calling canGoForward method</br>\nvar canGoForwrd = cordovaBrowser.canGoForward();</br>\nalert(\"canGoBack?::\"+canGoForwrd);</pre>",
                        "!type": "fn() -> bool"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "clearHistory": {
                        "!doc": " This method clears the page history of the specified CordovaBrowser.\n @Available All Platforms except SPA and iPhone\n @access Write\n @usage <pre>\n//Defining the properties for a CordovaBrowser widget with requestURLConfig:requestUrlConf.</br>\nvar requestUrlConf = {URL: \"https://www.google.co.in/\", requestMethod:constants.BROWSER_REQUEST_METHOD_GET};</br>\nvar webBasic = {id : \"browserID\", isVisible:true, screenLevelWidget: false, requestURLConfig:requestUrlConf};</br>\nvar webLayout = {containerWeight:100};</br>\n\n//Creating the CordovaBrowser.</br>\nvar cordovaBrowser = new kony.ui.CordovaBrowser(webBasic, webLayout, {});</br>\n\n//Calling clearHistory method to clear the CordovaBrowser history of a CordovaBrowser brws1 which is in Form frm1.</br>\ncordovaBrowser.clearHistory(frm1.brws1);</pre>",
                        "!type": "fn()"
                    },
                    "containerHeight": {
                        "!doc": "Specifies the available height of the container in terms of percentage. The percentage is with reference to the value of containerHeightReference property.\n@property {Number}\n@Available Available on all platforms except on all Server side Mobile Web and Desktop Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "containerHeightReference": {
                        "!doc": "Specifies the reference for the height of the container based on option that you set for containerHeight. The container height percentage is calculated based on eigher CONTAINER_HEIGHT_BY_FORM_REFERENCE or CONTAINER_HEIGHT_BY_PARENT_WIDTH.\n@property {Number}\n@Available Available on all platforms except on all Server side Mobile Web and Desktop Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget widget. The parent's widget space is distributed to its child widgets based on this weight factor.All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms except Win Mobile 6x.\n@access Read and Write",
                        "!type": "number"
                    },
                    "detectTelNumber": {
                        "!doc": "Specifies if the CordovaBrowser widget must support the detection of phone numbers in the web page and display the phone numbers as clickable Phone links.\n@property {Boolean}\n@Available All Platforms On BlackBerry platform, the default value is set based on the device constraints.\n@access Read and Write",
                        "!type": "bool"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "enableZoom": {
                        "!doc": "Specifies if Zoom (ability to change the scale of the view area) must be enabled.\n@property {Boolean}\n@Available All Platforms except BlackBerry.\n@access Read and Write",
                        "!type": "bool"
                    },
                    "goBack": {
                        "!doc": " This method provides you with the ability to navigate one step back in the CordovaBrowser history.\n @Available All Platforms except SPA\n @access Write\n @usage <pre>\n//Defining the properties for a CordovaBrowser widget with requestURLConfig:requestUrlConf which is JS object defined below.</br>\nvar requestUrlConf = {URL: \"https://www.google.co.in/\", requestMethod:constants.BROWSER_REQUEST_METHOD_GET};</br>\nvar webBasic = {id : \"browserID\", isVisible:true, screenLevelWidget: false, requestURLConfig:requestUrlConf};</br>\nvar webLayout = {containerWeight:100};</br>\n\n//Creating the CordovaBrowser.</br>\nvar cordovaBrowser = new kony.ui.CordovaBrowser(webBasic, webLayout, {});</br>\n\n//calling goBack method.</br>\ncordovaBrowser.goBack(); </pre>",
                        "!type": "fn()"
                    },
                    "goForward": {
                        "!doc": " This method provides you with the ability to navigate one step forward in the CordovaBrowser history.\n @Available All Platforms except SPA\n @access Write\n @usage <pre>\n//Defining the properties for a CordovaBrowser widget with requestURLConfig:requestUrlConf which is JS object defined below.</br>\nvar requestUrlConf = {URL: \"https://www.google.co.in/\", requestMethod:constants.BROWSER_REQUEST_METHOD_GET};</br>\nvar webBasic = {id : \"browserID\", isVisible:true, screenLevelWidget: false, requestURLConfig:requestUrlConf};</br>\nvar webLayout = {containerWeight:100};</br>\n\n//Creating the CordovaBrowser.</br>\nvar cordovaBrowser = new kony.ui.CordovaBrowser(webBasic, webLayout,{});</br>\n\n//calling goForward method.</br>\ncordovaBrowser.goForward(); </pre>",
                        "!type": "fn()"
                    },
                    "handleRequest": {
                        "!doc": "An event callback which gets invoked by the platform before CordovaBrowser widget navigates to a new URL. This is useful in scenarios where the developer wants to keep track of the URLs that the CordovaBrowser field navigates to. For example, in a payment flow (that is been executed inside a CordovaBrowser widget) on successful redirection to a payment confirmation page the developer would like to take the user to a new native form. The return value from this function determines how the CordovaBrowser widget handles the original request. If a false value is returned then the CordovaBrowser widget assumes that the developer has handled the request. If a true value is returned it continues navigation to the original URL.\n@property {Event}\n@param eventobject{widgetid} A unique id that identifies the CordovaBrowser widget.<b>Mandatory</b>\n@param params{Object} An object that identifies the url params as key-values that contains - originalurl, requestmethod, and header as the supported keys.<b>Mandatory</b>\n@Available Available on iOS and Android/Android Tablet.\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "htmlString": {
                        "!doc": "Specifies the html content for the CordovaBrowser widget.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the Property to set widget visibility.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "layoutType": {
                        "!doc": "Specifies if the arrangement of the widgets either in free form or horizontal or vertical direction (kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, or kony.flex.FLOW_VERTICAL).\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms except Mobile Web (basic).\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "onFailure": {
                        "!doc": "An event callback which gets invoked by the platform when the given request URL is failed to load the data. This event is called only for the given request URL, but not for the subsequent web navigation request failures.\n@property {Event}\n@Available All Platforms except Windows Phone/Windows Kiosk.\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onSuccess": {
                        "!doc": "An event callback which gets invoked by the platform when the given request URL is successful in loading the data. This event is called only for the given request URL, but not for the subsequent web navigation requests.\n@property {Event}\n@Available All Platforms except Windows Phone/Windows Kiosk.\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "reload": {
                        "!doc": " This method provides you with the ability to reload the current web page.\n @Available All Platforms except SPA\n @access Write\n @usage <pre>\n//Defining the properties for a CordovaBrowser widget with requestURLConfig:requestUrlConf which is JS object defined below.</br>\nvar requestUrlConf = {URL: \"https://www.google.co.in/\", requestMethod:constants.BROWSER_REQUEST_METHOD_GET};</br>\nvar webBasic = {id : \"browserID\", isVisible:true, screenLevelWidget: false, requestURLConfig:requestUrlConf};</br>\nvar webLayout = {containerWeight:100};</br>\n\n//Creating the CordovaBrowser.</br>\nvar cordovaBrowser = new kony.ui.CordovaBrowser(webBasic, webLayout, {});</br>\n\n//calling reload method</br>\ncordovaBrowser.reload(); </pre>",
                        "!type": "fn()"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "requestURLConfig": {
                        "!doc": "Specifies the  configurations for the requested URL in key-value pairs as a JavaScript object or Lua table.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "DataGrid": {
                "!doc": "Creates a new DataGrid object.\n@class kony.ui.DataGrid\n@returns {kony.ui.DataGrid}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.DataGrid",
                "prototype": {
                    "addAll": {
                        "!doc": " This method allows you to add new data to the DataGrid. The new data is appended to the existing data.\n @param data{Array}Specifies the JSObject that represents the row data as key value pairs.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for dataGrid.<br/>\nvar dgridBasic = {id:\"dgrid\", info:{key:\"This is datagrid\"}, isVisible:true, headerSkin:\"hSkin\", rowNormalSkin:\"rNSkin\", rowFocusSkin:\"rFSkin\", rowAlternateSkin:\"rASkin\", showColumnHeaders:true, columnHeadersConfig:[{columnID:\"col1\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Account Type\", columnWidthInPercentage:40}, {columnID:\"col2\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Account Number\", columnWidthInPercentage:30}, {columnID:\"col3\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Balance\", columnWidthInPercentage:30}], isMultiSelect:true, data:[{col1:\"Checking\", col2:\"490\",col3:\"$400\", metainfo:{skin:\"rowskin1\", col1_skin:\"colskin1\"}}, {col1:\"Checking\",col2:\"494\", col3:\"$2000.34\"}, {col1:\"Savings\",col2:\"567\",col3:\"$4000\"}], onRowSelected:onRowSelectedCalBck};<br/>\n\n//Creating the dataGrid.<br/>\nvar dgrid = new kony.ui.DataGrid(dgridBasic, dgridLayout, dgridPSP);<br/>\n\n//addAll method call.<br/>\ndgrid.addAll([{col1:\"Savings\",col2:\"568\",col3:\"$3000\"}]);</pre>",
                        "!type": "fn(data: ?)"
                    },
                    "addDataAt": {
                        "!doc": " This method allows you to set a row of data at a given index. The new data is placed before the index. The existing data is pushed to the next row.\n @param data{Array} Specifies the JS Object that represents the row data as key value pairs. <b>Mandatory</b>\n @param rowIndex {Number} Specifies The row index <b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for dataGrid.<br/>\nvar dgridBasic = {id:\"dgrid\", info:{key:\"This is datagrid\"}, isVisible:true, headerSkin:\"hSkin\", rowNormalSkin:\"rNSkin\", rowFocusSkin:\"rFSkin\", rowAlternateSkin:\"rASkin\", showColumnHeaders:true, columnHeadersConfig:[{columnID:\"col1\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Account Type\", columnWidthInPercentage:40}, {columnID:\"col2\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Account Number\", columnWidthInPercentage:30}, {columnID:\"col3\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Balance\", columnWidthInPercentage:30}], isMultiSelect:true, data:[{col1:\"Checking\", col2:\"490\",col3:\"$400\", metainfo:{skin:\"rowskin1\", col1_skin:\"colskin1\"}}, {col1:\"Checking\",col2:\"494\", col3:\"$2000.34\"}, {col1:\"Savings\",col2:\"567\",col3:\"$4000\"}], onRowSelected:onRowSelectedCalBck};<br/>\nvar dgridLayout = {widgetAlignment:constants.WIDGET_ALIGN_TOP_LEFT, contentAlignment:constants.CONTENT_ALIGN_CENTER, containerWeight:99, padding:[5,5,5,5], margin:[5,5,5,5]};<br/>\nvar dgridPSP = {gridlineColor:\"FF224400\"};<br/>\n\n//Creating the dataGrid.<br/>\nvar dgrid = new kony.ui.DataGrid(dgridBasic, dgridLayout, dgridPSP);<br/>\n\n//addDataAt method call.<br/>\ndgrid.addDataAt({col1:\"Savings\",col2:\"569\",col3:\"$32000\"},2);</pre>",
                        "!type": "fn(data: ?, rowIndex: ?)"
                    },
                    "applyCellSkin": {
                        "!doc": " This method specifies the skin (background color) to be applied to a cell.\n @param rowIndex{Number}The the row index: 1 <= index <= n; Where n is the number of rows.<b>Mandatory</b>\n @param columnid {String} The column identifier.<b>Mandatory</b>\n @param skinid(Object) The skin identifier.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for dataGrid.<br/>\nvar dgridBasic = {id:\"dgrid\", info:{key:\"This is datagrid\"}, isVisible:true, headerSkin:\"hSkin\", rowNormalSkin:\"rNSkin\", rowFocusSkin:\"rFSkin\", rowAlternateSkin:\"rASkin\", showColumnHeaders:true, columnHeadersConfig:[{columnID:\"col1\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Account Type\", columnWidthInPercentage:40}, {columnID:\"col2\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Account Number\", columnWidthInPercentage:30}, {columnID:\"col3\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Balance\", columnWidthInPercentage:30}], isMultiSelect:true, data:[{col1:\"Checking\", col2:\"490\",col3:\"$400\", metainfo:{skin:\"rowskin1\", col1_skin:\"colskin1\"}}, {col1:\"Checking\",col2:\"494\", col3:\"$2000.34\"}, {col1:\"Savings\",col2:\"567\",col3:\"$4000\"}], onRowSelected:onRowSelectedCalBck};<br/>\nvar dgridLayout = {widgetAlignment:constants.WIDGET_ALIGN_TOP_LEFT, contentAlignment:constants.CONTENT_ALIGN_CENTER, containerWeight:99, padding:[5,5,5,5], margin:[5,5,5,5]};<br/>\nvar dgridPSP = {gridlineColor:\"FF224400\"};<br/>\n\n//Creating the dataGrid.<br/>\nvar dgrid = new kony.ui.DataGrid(dgridBasic, dgridLayout, dgridPSP);<br/>\n\n//applyCellSkin method call.<br/>\ndgrid.applyCellSkin(3,\"col2\");</pre>",
                        "!type": "fn(rowIndex: ?, columnid: ?, skinid: ?)"
                    },
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget widget. The parent's widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms except WinMobile 6x.\n@access Read and Write",
                        "!type": "number"
                    },
                    "data": {
                        "!doc": "Specifies the array of JS Objects which represents the actual data to be rendered in each row. Each element in array represents one row data.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "enable": {
                        "!doc": "When this property is set to false, the widget will be shown, the developer can set a different skin to show it is disabled, no action defined on this disable widget will be raised.\n@property {Boolean}\n@Available Desktop Web Platform\n@access Read and Write",
                        "!type": "bool"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "gridlineColor": {
                        "!doc": "Specifies the color of the grid line of the DataGrid. The color should be specified in the format of \"RGBA\" in hex. For example \"FF224400\".\n@property {String}\n@Available BlackBerry,Android\n@access Write",
                        "!type": "string"
                    },
                    "headerSkin": {
                        "!doc": "This property specifies the skin that must be applied to the Header row. This is a skin property.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String,Construct only For review}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isMultiSelect": {
                        "!doc": "Specifies an option to make the datagrid as multi selectable row. The selected rows are indicated by highlighting the rows by focus skin.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "isVisible": {
                        "!doc": "Specifies the Property to set widget visibility on the form.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "layoutType": {
                        "!doc": "Specifies if the arrangement of the widgets either in free form or horizontal or vertical direction (kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, or kony.flex.FLOW_VERTICAL).\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x.\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "onRowSelected": {
                        "!doc": "Event callback invoked by the pllatform when a row is selected.\n@property {Event}\n@Available All Platforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onTouchEnd": {
                        "!doc": "An event callback is invoked by the platform when the user touch is released from the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchMove": {
                        "!doc": "An event callback is invoked by the platform when the touch moves on the touch surface continuously until the movement ends. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchStart": {
                        "!doc": "An event callback is invoked by the platform when the user touches the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "padding": {
                        "!doc": "specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms except Mobile Web (basic).\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeAll": {
                        "!doc": " This method is used to remove all the existing rows in the DataGrid. If you use this method, the data in the DataGrid will not be visible.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for dataGrid.<br/>\nvar dgridBasic = {id:\"dgrid\", info:{key:\"This is datagrid\"}, isVisible:true, headerSkin:\"hSkin\", rowNormalSkin:\"rNSkin\", rowFocusSkin:\"rFSkin\", rowAlternateSkin:\"rASkin\", showColumnHeaders:true, columnHeadersConfig:[{columnID:\"col1\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Account Type\", columnWidthInPercentage:40}, {columnID:\"col2\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Account Number\", columnWidthInPercentage:30}, {columnID:\"col3\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Balance\", columnWidthInPercentage:30}], isMultiSelect:true, data:[{col1:\"Checking\", col2:\"490\",col3:\"$400\", metainfo:{skin:\"rowskin1\", col1_skin:\"colskin1\"}}, {col1:\"Checking\",col2:\"494\", col3:\"$2000.34\"}, {col1:\"Savings\",col2:\"567\",col3:\"$4000\"}], onRowSelected:onRowSelectedCalBck};<br/>\nvar dgridLayout = {widgetAlignment:constants.WIDGET_ALIGN_TOP_LEFT, contentAlignment:constants.CONTENT_ALIGN_CENTER, containerWeight:99, padding:[5,5,5,5], margin:[5,5,5,5]};<br/>\nvar dgridPSP = {gridlineColor:\"FF224400\"};<br/>\n\n//Creating the dataGrid.<br/>\nvar dgrid = new kony.ui.DataGrid(dgridBasic, dgridLayout, dgridPSP);<br/>\n\n//removeAll method call.<br/>\ndgrid.removeAll();</pre>",
                        "!type": "fn()"
                    },
                    "removeAt": {
                        "!doc": " This method provides the ability to remove all the existing rows in DataGrid.\n @param rowIndex {Number}The the row index: 1 <= index <= n; Where n is the number of rows.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for dataGrid.<br/>\nvar dgridBasic = {id:\"dgrid\", info:{key:\"This is datagrid\"}, isVisible:true, headerSkin:\"hSkin\", rowNormalSkin:\"rNSkin\", rowFocusSkin:\"rFSkin\", rowAlternateSkin:\"rASkin\", showColumnHeaders:true, columnHeadersConfig:[{columnID:\"col1\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Account Type\", columnWidthInPercentage:40}, {columnID:\"col2\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Account Number\", columnWidthInPercentage:30}, {columnID:\"col3\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Balance\", columnWidthInPercentage:30}], isMultiSelect:true, data:[{col1:\"Checking\", col2:\"490\",col3:\"$400\", metainfo:{skin:\"rowskin1\", col1_skin:\"colskin1\"}}, {col1:\"Checking\",col2:\"494\", col3:\"$2000.34\"}, {col1:\"Savings\",col2:\"567\",col3:\"$4000\"}], onRowSelected:onRowSelectedCalBck};<br/>\nvar dgridLayout = {widgetAlignment:constants.WIDGET_ALIGN_TOP_LEFT, contentAlignment:constants.CONTENT_ALIGN_CENTER, containerWeight:99, padding:[5,5,5,5], margin:[5,5,5,5]};<br/>\nvar dgridPSP = {gridlineColor:\"FF224400\"};<br/>\n\n//Creating the dataGrid.<br/>\nvar dgrid = new kony.ui.DataGrid(dgridBasic, dgridLayout, dgridPSP);<br/>\n\n//removeAt method call.<br/>\ndgrid.removeAt(2);</pre>",
                        "!type": "fn(rowIndex: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "rowAlternateSkin": {
                        "!doc": "Specifies the skin applied to the alternate rows.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "rowCount": {
                        "!doc": "Returns the number of rows in the datagrid.\n@property {Number}\n@Available All Platforms\n@access Read",
                        "!type": "number"
                    },
                    "rowFocusSkin": {
                        "!doc": "This property specifies the skin that must be applied when the row is in focus. This is a skin property.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "rowNormalSkin": {
                        "!doc": "This property specifies the skin that must be applied when the row is not in focus.  This is a skin property.\n @property {String}\n @Available All Platforms\n @access Read and Write",
                        "!type": "string"
                    },
                    "selectAllRows": {
                        "!doc": " This method provides the ability to selects or clears the row selection in a multi-selectable DataGrid.\n @param select {Boolean}To select all the rows, set the value to true and to clear all the row selections, set the value to false .<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for dataGrid.<br/>\nvar dgridBasic = {id:\"dgrid\", info:{key:\"This is datagrid\"}, isVisible:true, headerSkin:\"hSkin\", rowNormalSkin:\"rNSkin\", rowFocusSkin:\"rFSkin\", rowAlternateSkin:\"rASkin\", showColumnHeaders:true, columnHeadersConfig:[{columnID:\"col1\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Account Type\", columnWidthInPercentage:40}, {columnID:\"col2\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Account Number\", columnWidthInPercentage:30}, {columnID:\"col3\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Balance\", columnWidthInPercentage:30}], isMultiSelect:true, data:[{col1:\"Checking\", col2:\"490\",col3:\"$400\", metainfo:{skin:\"rowskin1\", col1_skin:\"colskin1\"}}, {col1:\"Checking\",col2:\"494\", col3:\"$2000.34\"}, {col1:\"Savings\",col2:\"567\",col3:\"$4000\"}], onRowSelected:onRowSelectedCalBck};<br/>\nvar dgridLayout = {widgetAlignment:constants.WIDGET_ALIGN_TOP_LEFT, contentAlignment:constants.CONTENT_ALIGN_CENTER, containerWeight:99, padding:[5,5,5,5], margin:[5,5,5,5]};<br/>\nvar dgridPSP = {gridlineColor:\"FF224400\"};<br/>\n\n//Creating the dataGrid.<br/>\nvar dgrid = new kony.ui.](dgridBasic, dgridLayout, dgridPSP);<br/>\n\n//selectAllRows method call<br/>\ndgrid.selectAllRows(true);</pre>",
                        "!type": "fn(select: ?)"
                    },
                    "selectedCellIndex": {
                        "!doc": "Returns the user selected row index and the associated column id as specified by the developer while defining the columns.\n@property {Array}\n@Available Desktop Web\n@access Read",
                        "!type": "[?]"
                    },
                    "selectedCellItem": {
                        "!doc": "Returns the dataobject associated with the user selected row and column ID.\n@property {Object}\n@Available Desktop Web\n@access Read"
                    },
                    "selectedIndex": {
                        "!doc": "This property returns the user selected row index.\n@property {Number}\n@Available All Platforms\n@access Read",
                        "!type": "number"
                    },
                    "selectedIndices": {
                        "!doc": "Returns the list of user selected row object indexes. If \"isMultiSelect\" is set to false,the list will contain only one entry.\n@property {Array}\n@Available All Platforms\n@access Read",
                        "!type": "[?]"
                    },
                    "selectedItem": {
                        "!doc": "This property returns the data in the selected row of the Datagrid.\n@property {Object}\n@Available All Platforms\n@access Read"
                    },
                    "selectedItems": {
                        "!doc": "Returns the list of user selected row objects. If \"isMultiSelect\" is set to false,the list will contain only one entry.\n@property {Object}\n@Available All Platforms\n@access Read"
                    },
                    "setCellDataAt": {
                        "!doc": " This method allows you to set data in a specific row and column.\n @param rowIndex {Number}The the row index: 1 <= index <= n; Where n is the number of rows.<b>Mandatory</b>\n @param columnid {Number|String} The column identifier.<b>Mandatory</b>\n @param datavalue{Object}Based on the column type, the value is expected to be either string type or object type for template column.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for dataGrid.<br/>\nvar dgridBasic = {id:\"dgrid\", info:{key:\"This is datagrid\"}, isVisible:true, headerSkin:\"hSkin\", rowNormalSkin:\"rNSkin\", rowFocusSkin:\"rFSkin\", rowAlternateSkin:\"rASkin\", showColumnHeaders:true, columnHeadersConfig:[{columnID:\"col1\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Account Type\", columnWidthInPercentage:40}, {columnID:\"col2\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Account Number\", columnWidthInPercentage:30}, {columnID:\"col3\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Balance\", columnWidthInPercentage:30}], isMultiSelect:true, data:[{col1:\"Checking\", col2:\"490\",col3:\"$400\", metainfo:{skin:\"rowskin1\", col1_skin:\"colskin1\"}}, {col1:\"Checking\",col2:\"494\", col3:\"$2000.34\"}, {col1:\"Savings\",col2:\"567\",col3:\"$4000\"}], onRowSelected:onRowSelectedCalBck};<br/>\nvar dgridLayout = {widgetAlignment:constants.WIDGET_ALIGN_TOP_LEFT, contentAlignment:constants.CONTENT_ALIGN_CENTER, containerWeight:99, padding:[5,5,5,5], margin:[5,5,5,5]};<br/>\nvar dgridPSP = {gridlineColor:\"FF224400\"};<br/>\n\n//Creating the dataGrid.<br/>\nvar dgrid = new kony.ui.DataGrid(dgridBasic, dgridLayout, dgridPSP);<br/>\n\n//setCellDataAt method call<br/>\ndgrid.setCellDataAt(1,\"col2\",\"444\");</pre>",
                        "!type": "fn(rowIndex: ?, columnid: ?, datavalue: ?)"
                    },
                    "setData": {
                        "!doc": " This method allows you to set new data to the DataGrid. When you set new data, the existing data will be replaced with the new data.\n @param data{Array}Specifies the JSObject that represents the row data as key value pairs.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for dataGrid.<br/>\nvar dgridBasic = {id:\"dgrid\", info:{key:\"This is datagrid\"}, isVisible:true, headerSkin:\"hSkin\", rowNormalSkin:\"rNSkin\", rowFocusSkin:\"rFSkin\", rowAlternateSkin:\"rASkin\", showColumnHeaders:true, columnHeadersConfig:[{columnID:\"col1\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Account Type\", columnWidthInPercentage:40}, {columnID:\"col2\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Account Number\", columnWidthInPercentage:30}, {columnID:\"col3\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Balance\", columnWidthInPercentage:30}], isMultiSelect:true, data:[{col1:\"Checking\", col2:\"490\",col3:\"$400\", metainfo:{skin:\"rowskin1\", col1_skin:\"colskin1\"}}, {col1:\"Checking\",col2:\"494\", col3:\"$2000.34\"}, {col1:\"Savings\",col2:\"567\",col3:\"$4000\"}], onRowSelected:onRowSelectedCalBck};<br/>\nvar dgridLayout = {widgetAlignment:constants.WIDGET_ALIGN_TOP_LEFT, contentAlignment:constants.CONTENT_ALIGN_CENTER, containerWeight:99, padding:[5,5,5,5], margin:[5,5,5,5]};<br/>\nvar dgridPSP = {gridlineColor:\"FF224400\"};<br/>\n\n//Creating the dataGrid.<br/>\nvar dgrid = new kony.ui.DataGrid(dgridBasic, dgridLayout, dgridPSP);<br/>\n\n//setData method call.<br/>\ndgrid.setData([{col1:\"Checking\", col2:\"490\", col3:\"$400\", metainfo:{skin:\"rowskin1\",col1_skin:\"colskin1\"}}, {col1:\"Checking\",col2:\"494\", col3:\"$2000.34\"}, {col1:\"Savings\", col2:\"567\",col3:\"$4000\"}]);</pre>",
                        "!type": "fn(data: ?)"
                    },
                    "setDataAt": {
                        "!doc": " This method allows you to set a row of data at a given index. The existing data of the row will be replaced with the new set.\n @param data {Array} Specifies the JS Object that represents the row data as key value pairs. <b>Mandatory</b>\n @param rowIndex {Number}The the row index: 1 <= index <= n; Where n is the number of rows.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for dataGrid.<br/>\nvar dgridBasic = {id:\"dgrid\", info:{key:\"This is datagrid\"}, isVisible:true, headerSkin:\"hSkin\", rowNormalSkin:\"rNSkin\", rowFocusSkin:\"rFSkin\", rowAlternateSkin:\"rASkin\", showColumnHeaders:true, columnHeadersConfig:[{columnID:\"col1\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Account Type\", columnWidthInPercentage:40}, {columnID:\"col2\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Account Number\", columnWidthInPercentage:30}, {columnID:\"col3\", columnType:constants.DATAGRID_COLUMN_TYPE_TEXT, columnHeaderText:\"Balance\", columnWidthInPercentage:30}], isMultiSelect:true, data:[{col1:\"Checking\", col2:\"490\",col3:\"$400\", metainfo:{skin:\"rowskin1\", col1_skin:\"colskin1\"}}, {col1:\"Checking\",col2:\"494\", col3:\"$2000.34\"}, {col1:\"Savings\",col2:\"567\",col3:\"$4000\"}], onRowSelected:onRowSelectedCalBck};<br/>\nvar dgridLayout = {widgetAlignment:constants.WIDGET_ALIGN_TOP_LEFT, contentAlignment:constants.CONTENT_ALIGN_CENTER, containerWeight:99, padding:[5,5,5,5], margin:[5,5,5,5]};<br/>\nvar dgridPSP = {gridlineColor:\"FF224400\"};<br/>\n\n//Creating the dataGrid.<br/>\nvar dgrid = new kony.ui.DataGrid(dgridBasic, dgridLayout, dgridPSP);<br/>\n\n//setDataAt method call.<br/>\ndgrid.setDataAt({col1:\"Savings\",col2:\"563\",col3:\"$34000\"},2);</pre>",
                        "!type": "fn(data: ?, rowIndex: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "showColumnHeaders": {
                        "!doc": "This property controls the visibility of the column headers of the DataGrid.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "FlexContainer": {
                "!doc": "Creates a new FlexContainer object.\n@class kony.ui.FlexContainer\n@returns {kony.ui.FlexContainer}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.FlexContainer",
                "prototype": {
                    "accessibilityConfig": {
                        "!doc": "Specifies the accessiblity configuration property for the widget.\n@property {Object}\n@Available iPhone, Android, and SPA-iPhone Platforms\n@access Read and Write\n@usage <pre>\n   accessibilityConfig =  {\n       \"a11yLabel\": \"Your text goes here\",\n   },"
                    },
                    "add": {
                        "!doc": " This method is used to  add widgets to the FlexContainer. When the widgets are added to the current visible FlexContainer, then the changes will reflect immediately. Adding a widget to the FlexContainer hierarchy, which is already a part of the other widget hierarchy, will lead to undefined behaviors. You have to explicitly remove the widget from one hierarchy before adding it to another FlexContainer.\n @param widgetArray{Object} Comma separated list of widgets.<b>Mandatory</b>\n @Available iOS, Android, Windows, SPA platforms\n @access Write\n @usage <pre>\n//Method to add an OK and a Cancel button.<br/>\nflexcontainer1.add(okButton, cancelButton); // okButton and cancelButton are id's of two widgets. </pre>",
                        "!type": "fn(widgetArray: ?)"
                    },
                    "addAt": {
                        "!doc": "   This method is used to add widgets to the FlexContainer container at the specified index.\n   @param widgetref{Object} Reference of the name of the widget.<b>Mandatory</b>\n   @param index {Number} Index number at which the widget is to be added.<b>Mandatory</b>\n   @Available iOS, Android, Windows, SPA platforms\n   @access Write\n   @usage <pre>\n//Method to add an OK button at index 1.<br/>\n  flexcontainer1.addAt(okButton, 1); // okButton is an id of button widget.</pre>",
                        "!type": "fn(widgetref: ?, index: ?)"
                    },
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "backgroundColor": {
                        "!doc": "Specifies the background color of the widget in hex format.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "blur": {
                        "!doc": "Enables blur\n@property blur {{enabled: Boolean, value: Number}}\n@Available iOS, Android, Windows, SPA\n@access Read and Write\n@usage <pre>\n   blur =  {\n       \"enabled\": true,\n       \"value\": 50\n   }</pre>"
                    },
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "clipBounds": {
                        "!doc": "Specifies whether to clip the child widgets when they go out of boundaries or not.\n@property {Boolean}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "clipView": {
                        "!doc": "     Defines a shape to clip the widget view.\n     @property {JSObject}\n\t @param shape {constant} A key-value pair represents a shape of the clipping. You can clip a view as follows:\n\t VIEW_CLIP_SHAPE_RECTANGLE: Appears the widget view in rectangular shape. By default, this value is set.\n\t VIEW_CLIP_SHAPE_ROUNDED_RECTANGLE: Appears the widget view in rectangular shape with rounded corners.\n\t VIEW_CLIP_SHAPE_CIRCLE: Appears the widget view in circular shape.\n\t @param bounds {Array} A key-value pair represents the bounds of the shape to clip a view. Specify the bounds as an array of integers [left, top, right, bottom].\n\t @param boundsInPixel {Boolean} Defines whether the units of specified bounds should be in pixels or in percentage. The property takes the Boolean value.\n\t @param radius {constant} Specifies the radius of the clipping shape. Represents the corner radius of the rounded rectangular shape when clipping shape is VIEW_CLIP_SHAPE_ROUNDED_RECTANGLE or represents the radius of circle when clipping shape is VIEW_CLIP_SHAPE_CIRCLE.\n     @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the clipView property<br/>\n\t form1.flxCnt1.clipView  = {\n\t\t shape: constants.VIEW_CLIP_SHAPE_CIRCLE,\n\t\t bounds: [5, 5, 5, 5],\n\t\t boundsInPixel: true,\n\t\t radius: 10\n        };</pre>"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "createAnimation": {
                        "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                        "!type": "fn(animationDef: ?)"
                    },
                    "defaultUnit": {
                        "!doc": "Specifies the default unit %, px, or dp when not provided for positional and dimensional properties.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "enableHapticFeedback": {
                        "!doc": "This property allows you to enable or disable haptic feedback.\n@property {Boolean}\n@Available iOS, Android, Windows platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "forceLayout": {
                        "!doc": " This method forces layout only when layoutType configured as one kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, and kony.flex.FLEX_VERTICAL. This method asynchronously forces the layout while method returns immediately.  When called layout cycle is forced to layout the widgets of the flex container. FlexContainer does not issue layout as and when changes happen to the widgets inside FlexContainer.\n @Available iOS, Android, Windows, SPA platforms\n @access Write\n @usage <pre>\n//FlexContainer using forceLayout method.<br/>\nflexcontainer1.forceLayout(); </pre>",
                        "!type": "fn()"
                    },
                    "frame": {
                        "!doc": "This property reflects the changes in position and dimensions of widget due to changes in widget layout properties. The widget layout properties are always retained when they are set but never reflect in final layout calculations. This property reflects the calculated values. A frame is a JSObject with the keys (x, y, width, and height) measured in system units.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available iOS, Android, Windows, SPA platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write"
                    },
                    "isMaster": {
                        "!doc": "Specifies whether the container is a master container.\n@property {Boolean}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only after initialization",
                        "!type": "bool"
                    },
                    "isModalContainer": {
                        "!doc": "To enable/disable user touch interactions beyond flexcontainer edges.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "isVisible": {
                        "!doc": "This property controls the visibility of a widget on the FlexForm.\n@property {Boolean}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutType": {
                        "!doc": "Specifies if the arrangement of the widgets either in free form or horizontal or vertical direction (kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, or kony.flex.FLOW_VERTICAL).\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onTouchEnd": {
                        "!doc": "An event callback is invoked by the platform when the user touch is released from the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchMove": {
                        "!doc": "An event callback is invoked by the platform when the touch moves on the touch surface continuously until the movement ends. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchStart": {
                        "!doc": "An event callback is invoked by the platform when the user touches the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "padding": {
                        "!doc": "Specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "remove": {
                        "!doc": " This method removes a widget from the container. If a new widget is removed will reflect immediately from the FlexContainer hierarchy model perspective, however the changes are displayed when the FlexContainer appears. When the widgets are added to the current visible FlexContainer, then the changes will reflect immediately.\n @param widgetref {Object} Reference of the name of the widget.<b>Mandatory</b>\n @returns The current FlexContainer handle is returned.\n @Available iOS, Android, Windows, SPA platforms\n @access Write\n @usage <pre>\n//flexContainer using remove method.<br/>\nflexcontainer1.remove(okButton); // okButton is an id of button widget.</pre>",
                        "!type": "fn(widgetref: ?)"
                    },
                    "removeAll": {
                        "!doc": " This method removes all the widget on the container.\n @Available iOS, Android, Windows, SPA platforms\n @access Write\n @usage <pre>\n//Removing widgets using removeall method.<br/>\nflexcontainer1.removeAll();</pre>",
                        "!type": "fn()"
                    },
                    "removeAt": {
                        "!doc": " This method removes a widget at the given index from the FlexContainer container. If a new widget is removed will reflect immediately from the FlexContainer hierarchy model perspective, however the changes are displayed when the FlexContainer appears.\n @param index {Number} Reference of the name of the widget.<b>Mandatory</b>\n @returns {Object} Reference of the name of the widget to be removed.\n @Available iOS, Android, Windows, SPA platforms\n @access Write\n @usage <pre>\n//Removing a widget using remove method at index 1.<br/>\nflexcontainer1.removeAt(1);</pre>",
                        "!type": "fn(index: ?) -> ?"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "reverseLayoutDirection": {
                        "!doc": "Reverses layout direction of child widgets.\n@property {Boolean}\n@Available iOS, Android, Windows, SPA, Desktop Web platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "rippleBackground": {
                        "!doc": "     Defines the ripple background for a FlexContainer Widget.\n     @property {JSObject}\n\t @param rippleColor {String} Defines the color for the ripples.\n\t @param contenLayers {Array} Array of two JS Objects. Each JS Object contains following key-value pairs to define a layer for ripple background. You can define background for the ripple as a skin or as a background color.\n\t @param paddingMode {Constant} Defines how layer padding should affect the bounds of subsequent layers. You can define:\n\t RIPPLE_PADDING_MODE_NEST: Nests each layer inside padding of the previous layer.\n\t RIPPLE_PADDING_MODE_STACK: Stacks each layer top of the previous layer. This is the default value.\n     @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the rippleBackground property<br/>\n\t form1.flxCnt1.rippleBackground = {\n\t\t rippleColor: “ffff0000”,\n\t\t contentLayers: [\n\t\t\t{background: “ffffff00”, backgroundType: constants.RIPPLE_CONTENT_LAYER_COLOR, mask:false, padding: [10,10,10,10]},\n\t\t\t{background: btnSkin, backgroundType: constants.RIPPLE_CONTENT_LAYER_SKIN, mask: true}],\n\t\t paddingMode: constants.PADDING_MODE_NEST\n\t}</pre>"
                    },
                    "setDefaultUnit": {
                        "!doc": " Specifies  the default unit to be used for interpretation of numbers when no qualifiers when passed to layout properties.\n @param unit {String} Specifies the position in number format. The options are kony.flex.DP, kony.flex.PX, and kony.flex.PERCENTAGE.<b>Mandatory</b>\n @Available iOS, Android, Windows, SPA platforms\n @access Write\n @usage <pre>\n//SEtting default unit value.<br/>\nflexcontainer1.setDefaultUnit(kony.flex.DP);</pre>",
                        "!type": "fn(index: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "shadowDepth": {
                        "!doc": "     Defines the depth of the shadow effect applied to the Widget.\n     @property {Number}\n\t @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the shadowDepth property<br/>\n\t form1.flxCnt1.shadowDepth = 10;</pre>",
                        "!type": "number"
                    },
                    "shadowType": {
                        "!doc": "     Sets a type of the shadow effect to apply to the Widget.\n     @property {Number}\n\t @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the shadowType property<br/>\n\t form1.flxCnt1.shadowType = constants.VIEW_BOUNDS_SHADOW;</pre>",
                        "!type": "number"
                    },
                    "skin": {
                        "!doc": "Specifies a background skin for FlexContainer widget.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "widgets": {
                        "!doc": " This method returns an array of the widget references which are direct children of FlexContainer.\n @returns {Array} This method returns Read only array of widget references. Modifying the array and changing the position of widgets in this array doesn't reflect in the FlexContainer hierarchy, however you can get handle to the widgets through this array and modify the widgets through widget level methods as exposed by individual widgets.\n @Available iOS, Android, Windows, SPA platforms\n @access Read\n @usage <pre>\n//Defining properties of a FlexContainer.<br/>\nvar okButton = new kony.ui.Button(basicConf, layoutConf, {});<br/>\n\n//Method to return FlexContainer widgets.<br/>\nflexContainer1.widgets();</pre>",
                        "!type": "fn() -> [?]"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "FlexScrollContainer": {
                "!doc": "Creates a new FlexScrollContainer object.\n@class kony.ui.FlexScrollContainer\n@returns {kony.ui.FlexScrollContainer}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.FlexScrollContainer",
                "prototype": {
                    "accessibilityConfig": {
                        "!doc": "Specifies the accessiblity configuration property for the widget.\n@property {Object}\n@Available iPhone, Android, and SPA-iPhone Platforms\n@access Read and Write\n@usage <pre>\n   accessibilityConfig =  {\n       \"a11yLabel\": \"Your text goes here\",\n   },"
                    },
                    "add": {
                        "!doc": " This method is used to  add widgets to the FlexContainer. When the widgets are added to the current visible FlexContainer, then the changes will reflect immediately. Adding a widget to the FlexContainer hierarchy, which is already a part of the other widget hierarchy, will lead to undefined behaviors. You have to explicitly remove the widget from one hierarchy before adding it to another FlexContainer.\n @param widgetArray{Object} Comma separated list of widgets.<b>Mandatory</b>\n @Available iOS, Android, Windows, SPA platforms\n @access Write\n @usage <pre>\n//Method to add an OK and a Cancel button.<br/>\nflexscrollcontainer1.add(okButton, cancelButton); // okButton and cancelButton are id's of two widgets. </pre>",
                        "!type": "fn(widgetArray: ?)"
                    },
                    "addAt": {
                        "!doc": "   This method is used to add widgets to the FlexContainer container at the specified index.\n   @param widgetref{Object} Reference of the name of the widget.<b>Mandatory</b>\n   @param index {Number} Index number at which the widget is to be added.<b>Mandatory</b>\n   @Available iOS, Android, Windows, SPA platforms\n   @access Write\n   @usage <pre>\n//Method to add an OK button at index 1.<br/>\n  flexscrollcontainer1.addAt(okButton, 1); // okButton is an id of button widget.</pre>",
                        "!type": "fn(widgetref: ?, index: ?)"
                    },
                    "allowHorizontalBounce": {
                        "!doc": "Specifies whether the scroll bounce is enabled or disabled in the horizontal direction.\n@property {Boolean}\n@Available iOS and SPA platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "allowVerticalBounce": {
                        "!doc": "Specifies whether the scroll bounce is enabled or disabled in the vertical direction.\n@property {Boolean}\n@Available iOS and SPA platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "anchorPoint": {
                        "!doc": "Specifies the anchor point of the widget bounds rectangle using the widgets coordinate space.\n@property {Object}\n@Available iOS, Android, Windows, SPA\n@access Read and Write"
                    },
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "backgroundColor": {
                        "!doc": "Specifies the background color of the widget in hex format.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "blur": {
                        "!doc": "Enables blur\n@property blur {{enabled: Boolean, value: Number}}\n@Available iOS, Android, Windows, SPA\n@access Read and Write\n@usage <pre>\n   blur =  {\n       \"enabled\": true,\n       \"value\": 50\n   }</pre>"
                    },
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "bounces": {
                        "!doc": "Specifies whether the scroll bounce is enabled or disabled.\n@property {Boolean}\n@Available iOS and SPA platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "bouncesZoom": {
                        "!doc": "Specifies whether the scroll view animates the content scaling when the scaling exceeds the maximum or minimum limits. If the value is set to true, and zooming exceeds either the minimum or maximum limits for scaling, the scroll view temporarily animates the content scaling just past these limits before returning to them. If the property is set to false, zooming stops immediately as it reaches scaling limits.\n@property {Boolean}\n@Available iOS platform\n@access Read and Write",
                        "!type": "bool"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "clipBounds": {
                        "!doc": "Specifies whether to clip the child widgets when they go out of boundaries or not.\n@property {Boolean}\n@Available iOS, Android\n@access Read and Write",
                        "!type": "bool"
                    },
                    "contentOffset": {
                        "!doc": "Specifies the x and y coordinates of the top-left of the scrollable region. When the values are set, the scroll container scrolls even if the scrolling is disabled. This will always returns the value that developer has set but never reflects the actual computed offset.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write"
                    },
                    "contentOffsetMeasured": {
                        "!doc": "Specifies the x and y coordinates of the top-left of the scrollable region measured in dp.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "contentSize": {
                        "!doc": "Specifies the width and height of the container to accommodate all the widgets placed in it. This will returns the values that developer has set, but never reflects the actual computed content size.\n@property {Object}\n@Available iOS, Android, and Windows platforms\n@access Read and Write"
                    },
                    "contentSizeMeasured": {
                        "!doc": "Specifies the width and height of the container measured in dp.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "createAnimation": {
                        "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                        "!type": "fn(animationDef: ?)"
                    },
                    "decelerating": {
                        "!doc": "Returns whether the content is moving in the scroll view after the user lifted their finger. True is returned, if the scroll container is decelerating as a result of flick gesture.\n@property {Boolean}\n@Available iOS, Android, and SPA platforms\n@access Read Only",
                        "!type": "bool"
                    },
                    "defaultUnit": {
                        "!doc": "Specifies the default unit %, px, or dp when not provided for positional and dimensional properties.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "dragging": {
                        "!doc": "Specify whether the user has begun scrolling the content. This property returns true, if the user's finger is in contact with the device screen and has moved.\n@property {Boolean}\n@Available iOS, Android, and SPA platforms\n@access Read Only",
                        "!type": "bool"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "enableGpuScrolling": {
                        "!doc": "Specifies how most of the property updates and events for the FlexScrollContainer are handled.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "enableOnScrollWidgetPositionForSubwidgets": {
                        "!doc": "Enables the container to iterate through all widgets that have registered for the onScrollWidgetPosition callback.\n@property {Boolean}\n@Available Available on Android, IOS, Windows and SPA\n@access Read and Write",
                        "!type": "bool"
                    },
                    "enableScrolling": {
                        "!doc": "Specifies whether the scrolling is enabled on the container or not.\n@property {Boolean}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "forceLayout": {
                        "!doc": " This method forces layout only when layoutType configured as one kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, and kony.flex.FLEX_VERTICAL. This method asynchronously forces the layout while method returns immediately.  When called layout cycle is forced to layout the widgets of the flex container. FlexContainer does not issue layout as and when changes happen to the widgets inside FlexContainer.\n @Available iOS, Android, Windows, SPA platforms\n @access Write\n @usage <pre>\n//FlexContainer using forceLayout method.<br/>\nflexscrollcontainer1.forceLayout(); </pre>",
                        "!type": "fn()"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "horizontalScrollIndicator": {
                        "!doc": "Specifies whether the scroll indicator must be shown or not in the horizontal direction.\n@property {Boolean}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available iOS, Android, Windows, SPA platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write"
                    },
                    "isMaster": {
                        "!doc": "Specifies whether the container is a master container.\n@property {Boolean}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only after initialization",
                        "!type": "bool"
                    },
                    "isVisible": {
                        "!doc": "This property controls the visibility of a widget on the FlexForm.\n@property {Boolean}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutType": {
                        "!doc": "Specifies if the arrangement of the widgets either in free form or horizontal or vertical direction (kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, or kony.flex.FLOW_VERTICAL).\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxZoomScale": {
                        "!doc": "Specifies the maximum zoom scale factor that can be applied to the container.\n@property {Number}\n@Available This property is available on iOS platform\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minZoomScale": {
                        "!doc": "Specifies the minimum zoom scale factor that can be applied to the container.\n@property {Number}\n@Available This property is available on iOS platform\n@access Read and Write",
                        "!type": "number"
                    },
                    "onClick": {
                        "!doc": "Invokes when the user performs a click action on the FlexContainer widget.\n@param widget {widgetref} Handle to the widget instance that raised the event\n@param Context {Object} This parameter is applicable only when the FlexContainer is placed in a Segment rowTemplate or sectionTemplate.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA, Desktop Web platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onDecelerationStarted": {
                        "!doc": "An event callback is invoked by the platform when the user stops scrolling but the content still moves before the content actually stops.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Mandatory</b>\n@property {Event}\n@Available iOS platform only\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onScrollEnd": {
                        "!doc": "An event callback is invoked by the platform when the scrolling is ended. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Mandatory</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onScrollStart": {
                        "!doc": "An event callback is invoked by the platform when the user starts scrolling the content. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Mandatory</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onScrollTouchReleased": {
                        "!doc": "An event callback is invoked by the platform when the user touch is released from the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Mandatory</b>\n@property {Event}\n@Available iOS and Android platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onScrolling": {
                        "!doc": "An event callback is invoked by the platform when the scrolling is in progress. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Mandatory</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onZoomEnd": {
                        "!doc": "An event callback is invoked by the platform when the zooming has ended. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the zooming has started.<b>Mandatory</b>\n@property {Event}\n@Available Available on iOS platform\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onZoomStart": {
                        "!doc": "An event callback is invoked by the platform when the touch moves on the touch surface continuously until the movement ends. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the zooming has started.<b>Mandatory</b>\n@param widget{widgetreg} Specifies the widget that actually zooms.<b>Mandatory</b>\n@property {Event}\n@Available Available on iOS platform\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onZooming": {
                        "!doc": "An event callback is invoked by the platform when the container is zooming. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the zooming has started.<b>Mandatory</b>\n@property {Event}\n@Available Available on iOS platform\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "padding": {
                        "!doc": "Specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "pagingEnabled": {
                        "!doc": "Specifies the whether the paging is enabled for the container. If this property is set to true, the scroll view stops on multiples of the scroll view's bounds when the user scrolls.\n@property {Boolean}\n@Available iOS, Windows, and Android\n@access Read and Write",
                        "!type": "bool"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "remove": {
                        "!doc": " This method removes a widget from the container. If a new widget is removed will reflect immediately from the FlexContainer hierarchy model perspective, however the changes are displayed when the FlexContainer appears. When the widgets are added to the current visible FlexContainer, then the changes will reflect immediately.\n @param widgetref {Object} Reference of the name of the widget.<b>Mandatory</b>\n @returns The current FlexContainer handle is returned.\n @Available iOS, Android, Windows, SPA platforms\n @access Write\n @usage <pre>\n//flexContainer using remove method.<br/>\nflexscrollcontainer1.remove(okButton); // okButton is an id of button widget.</pre>",
                        "!type": "fn(widgetref: ?)"
                    },
                    "removeAll": {
                        "!doc": " This method removes all the widget on the container.\n @Available iOS, Android, Windows, SPA platforms\n @access Write\n @usage <pre>\n//Removing widgets using removeall method.<br/>\nflexscrollcontainer1.removeAll();</pre>",
                        "!type": "fn()"
                    },
                    "removeAt": {
                        "!doc": " This method removes a widget at the given index from the FlexContainer container. If a new widget is removed will reflect immediately from the FlexContainer hierarchy model perspective, however the changes are displayed when the FlexContainer appears.\n @param index {Number} Reference of the name of the widget.<b>Mandatory</b>\n @returns {Object} Reference of the name of the widget to be removed.\n @Available iOS, Android, Windows, SPA platforms\n @access Write\n @usage <pre>\n//Removing a widget using remove method at index 1.<br/>\nflexscrollcontainer1.removeAt(1);</pre>",
                        "!type": "fn(index: ?) -> ?"
                    },
                    "reverseLayoutDirection": {
                        "!doc": "Reverses layout direction of child widgets.\n@property {Boolean}\n@Available iOS, Android, Windows, SPA, Desktop Web platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "scrollDirection": {
                        "!doc": "Specifies the direction in which the FlexScrollForm should scroll. This property is supported only when the scrollingEnabled property is set to true.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "scrollToEnd": {
                        "!doc": " This method gives you the control to scroll to the end of the container.\n @Available iOS, Android, Windows, SPA platforms\n @access Write\n @usage <pre>\n//Method to scroll to the end of the form.<br/>\nflexScrollContainer1.scrollToEnd();</pre>",
                        "!type": "fn()"
                    },
                    "scrollToWidget": {
                        "!doc": " This method gives you the control to scroll to the specified widget on the container.\n @Available iOS, Android, Windows, SPA platforms\n @access Write\n @usage <pre>\n//Method to scroll to the end of the form.<br/>\nflexScrollContainer1.scrollToWidget(labelForOk);</pre>",
                        "!type": "fn()"
                    },
                    "setContentOffset": {
                        "!doc": "This method gives you the control to  offset the content from one position to another.\n@param contentOffset{Object} A JSObject with the possible keys as x, y and the values can be numbers or strings. Values can be specified in all possible units of measurement(dp, px, and %).<b>Mandatory</b>\n@param animate{Boolean} A boolean value to indicate that zooming to rectangle should happen with animation.<b>Optional</b>\n@Available iOS, Android, SPA, and Windows Platforms\n@access Write",
                        "!type": "fn(setContentOffset: ?, animate: ?)"
                    },
                    "setDefaultUnit": {
                        "!doc": " Specifies  the default unit to be used for interpretation of numbers when no qualifiers when passed to layout properties.\n @param unit {String} Specifies the position in number format. The options are kony.flex.DP, kony.flex.PX, and kony.flex.PERCENTAGE.<b>Mandatory</b>\n @Available iOS, Android, Windows, SPA platforms\n @access Write\n @usage <pre>\n//SEtting default unit value.<br/>\nflexcontainer1.setDefaultUnit(kony.flex.DP);</pre>",
                        "!type": "fn(unit: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "setZoomScale": {
                        "!doc": "This method enables you the set zoom scale with an option to animation.\n@param scale{Number} A  floating point value that specifies the current scale factor applied to the FlexScrollContainer content.<b>Mandatory</b>\n@param animate{Boolean} A boolean value to indicate that zooming to rectangle should happen with animation.<b>Optional</b>\n@Available Available on iOS Platform\n@access Write",
                        "!type": "fn(scale: ?, animate: ?)"
                    },
                    "skin": {
                        "!doc": "Specifies a background skin for FlexContainer widget.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "tracking": {
                        "!doc": "Specifies whether the user has touched the content to initiate scrolling.  This property returns true, if the user's finger is in contact with the device screen.\n@property {Boolean}\n@Available iOS, Android, and SPA platforms\n@access Read Only",
                        "!type": "bool"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "verticalScrollIndicator": {
                        "!doc": "Specifies whether the scroll indicator must be shown or not in the vertical direction.\n@property {Boolean}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "widgetToZoom": {
                        "!doc": "An event callback is invoked by the platform to return one of the child widgets of source to zoom. The returning source itself makes the complete scroll container zoomable. If a null value is returned then the container does not zoom. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the zooming has started.<b>Mandatory</b>\n@property {Event}\n@Available Available on iOS platform\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "widgets": {
                        "!doc": " This method returns an array of the widget references which are direct children of FlexContainer.\n @returns {Array} This method returns Read only array of widget references. Modifying the array and changing the position of widgets in this array doesn't reflect in the FlexContainer hierarchy, however you can get handle to the widgets through this array and modify the widgets through widget level methods as exposed by individual widgets.\n @Available iOS, Android, Windows, SPA platforms\n @access Read\n @usage <pre>\n//Defining properties of a FlexContainer.<br/>\nvar okButton = new kony.ui.Button(basicConf, layoutConf, {});<br/>\n\n//Method to return FlexContainer widgets.<br/>\nflexscrollcontainer1.widgets();</pre>",
                        "!type": "fn() -> [?]"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zoomScale": {
                        "!doc": "Specifies the current scale factor applied to the form content.\n@property {Number}\n@Available This property is available on iOS platform\n@access Read and Write",
                        "!type": "number"
                    },
                    "zooming": {
                        "!doc": "A boolean value indicates whether the content view is currently zooming in or out.\n@property {Boolean}\n@Available iOS platform\n@access Read only",
                        "!type": "bool"
                    }
                }
            },
            "Form": {
                "!doc": "Creates a new Form object.\n@class kony.ui.Form\n@returns {kony.ui.Form}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.Form",
                "prototype": {
                    "add": {
                        "!doc": " This method is used to add widgets to the form.\n @param widgetArray{Object} Specifies a list of all widgets to be added.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Procedure to create an OK button.<br/>\nvar basicConf = {id : \"buttonForOk\", text:\"OK\", isVisible:true,onClick:gotofrmNext, setEnabled:true, skin: \"btnskn\", focusSkin: \"btnfocusskn\"};<br/>\nvar layoutConf = {contentAlignment : constants.CONTENT_ALIGN_BOTTOM_RIGHT, containerWeight:100};<br/>\nvar okButton = new kony.ui.Button(basicConf, layoutConf, {});<br/>\n\n//Procedure to create a Cancel button.<br/>\nvar basicConf = {id : \"buttonForCancel\", text:\"Cancel\", isVisible:true,onClick:gotofrmPrevious, setEnabled:true, skin: \"btnskn\", focusSkin: \"btnfocusskn\"};<br/>\nvar layoutConf = {contentAlignment : constants.CONTENT_ALIGN_BOTTOM_LEFT, containerWeight:100};<br/>\nvar cancelButton = new kony.ui.Button(basicConf, layoutConf, {});<br/>\n\n//Method to add an OK and a Cancel button.<br/>\nfrmHome.add(okButton, cancelButton);</pre>",
                        "!type": "fn(widgetArray: ?)"
                    },
                    "addAt": {
                        "!doc": " This method is used to add widgets to the form container at the specified index.\n @param widgetref{Object} Reference of the name of the widget.<b>Mandatory</b>\n @param index {Number} Index number at which the widget is to be added.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Procedure to create an OK button.<br/>\nvar basicConf = {id : \"buttonForOk\", text:\"OK\", isVisible:true,onClick:gotofrmNext, setEnabled:true, skin: \"btnskn\", focusSkin: \"btnfocusskn\"};<br/>\nvar layoutConf = {contentAlignment : constants.CONTENT_ALIGN_BOTTOM_RIGHT, containerWeight:100};<br/>\nvar okButton = new kony.ui.Button(basicConf, layoutConf, {});<br/>\n\n//Method to add an OK button at index 1.<br/>\nfrmHome.addAt(okButton, 1);</pre>",
                        "!type": "fn(widgetref: ?, index: ?)"
                    },
                    "addWidgets": {
                        "!doc": "An event callback invoked by the platform when the form is accessed for first time after its construction.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "destroy": {
                        "!doc": " This method is used to destroy any unwanted forms at any point in time, and allows increasing the application life by reducing the memory usage.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining properties of a form.<br/>\nvar basicConf = {id : \"formHome\", title:\"Form Home for FORM\",addWidgets:addwidgetsfrmNew, skin:\"frmskn\"};<br/>\nvar layoutConf = {contentAlignment : constants.CONTENT_ALIGN_TOP_CENTER, containerWeight:100};<br/>\nvar pspConf = {titleBar: true, titleBarSkin: \"skntitlebar\"};<br/>\n\n//Creating a form using the properties defined above.<br/>\nvar myForm = new kony.ui.Form(basicConf,layoutConf,pspConf)<br/>\n\n//Destroying a form using destroy method.<br/>\nmyForm.destroy();</pre>",
                        "!type": "fn()"
                    },
                    "displayOrientation": {
                        "!doc": "Specifies the property to set the display orientation of the form on the device.\n@property {Number}\n@Available All Platforms\n@access Read",
                        "!type": "number"
                    },
                    "hideTitleBar": {
                        "!doc": "     This method gives you the control to hide a titlebar within a form.\n     @Available iPhone,iPad\n     @access Write\n     @usage <pre>\n\t  //Defining properties for a form.<br/>\n\t  var basicConf = {id : \"formHome\", title:\"My Form\"};<br/>\n    var layoutConf = {padding: [20,20,20,20]};<br/>\n\n    //Creating a form with the properties defined above.<br/>\n    var frmTitleBar = new kony.ui.Form(basicConf, layoutConf, {});<br/>\n\n    //Method to hide a titlebar.<br/>\n    frmTitleBar.hideTitleBar();</pre>",
                        "!type": "fn()"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "inTransitionConfig": {
                        "!doc": "Specifies the configuration to be used when the user arrives on this form. It accepts hash values.\n@property {Object}\n@Available All Platforms except Server side Mobile Web and Windows 8 platforms\n@access Read and Write"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "init": {
                        "!doc": "This event gets called only once in form life cycle that is when the form is ready with its widget hierarchy.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "menuFocusSkin": {
                        "!doc": "This is a skin property of a form level menu and it determines the look and feel of the Menu Item when focused.\n@property {String}\n@Available iPad,iPhone,Android,Android tablet,Blackberry,Window Phone 7,J2ME\n@access Write",
                        "!type": "string"
                    },
                    "menuItems": {
                        "!doc": "MenuItems represents the list of items to be displayed in the device menu control. Unlike application menu items, which are available across all the forms, these items are only available for a specific form.\n@property {Object}\n@Available All platforms except SPA platform\n@access Write",
                        "!type": "string"
                    },
                    "menuNormalSkin": {
                        "!doc": "This is a skin property and it determines the look and feel of a menu items when not in focus.\n@property {String}\n@Available All Platforms\n@access Write",
                        "!type": "string"
                    },
                    "menuPosition": {
                        "!doc": "Specifies if the application menu is shown or hidden in the application. In some platforms, form menu items appear along with app menu items.\n@property {Boolean}\n@Available Android,Android Tablet BlackBerry\n@access Read and Write",
                        "!type": "bool"
                    },
                    "onDestroy": {
                        "!doc": "Specifies an event which is triggered when the form is destroyed.\n@property {Event}\n@Available iPhone/iPad\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onDeviceBack": {
                        "!doc": "Specifies an event which is triggered when the user uses the back button on the device.\n@property {Event}\n@Available Android,Android Tablet, BlackBerry\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onDeviceMenu": {
                        "!doc": "Specifies an event which is triggered when the user uses the back button on the device.\n@property {Event}\n@Available Android, Android Tablet\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onHide": {
                        "!doc": "Specifies an Event which is triggered when a form goes completely out of view.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onOrientationChange": {
                        "!doc": "Specifies an Event which is triggered when there is a change in orientation of the form from portrait to landscape or vice versa.\n@property {Event}\n@Available All Platforms except Serverside Mobile Web and Desktop Web\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "outTransitionConfig": {
                        "!doc": "Specifies the type of transition effect to be applied when the Form is going out of view.\n@property {Object}\n@Available All Platforms except Server Side Mobile Web and Windows 8 platforms\n@access Read and Write"
                    },
                    "padding": {
                        "!doc": "Specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "postShow": {
                        "!doc": "postShow is invoked after a form is displayed. Gets called even on device back or while navigating back to the form through title bar navigation items.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "preShow": {
                        "!doc": "preShow is executed every time a form is to be displayed. This event is called even on device back or while navigating back to the form through title bar navigation items.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n\n   function onPopCallback(widget, peekForm) {\n      return peekForm;\n   }\n\n   frm1.registerForPeekAndPop(onPeekCallback, onPopCallback);\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "remove": {
                        "!doc": " This method removes a widget from the form container. If a new widget is removed will reflect immediately from the Form hierarchy model perspective, however the changes are displayed when the Form appears. When the widgets are added to the current visible Form, then the changes will reflect immediately.\n @param widgetref {Object} Reference of the name of the widget.<b>Mandatory</b>\n @returns The current Form handle is returned.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining properties of a form.<br/>\nvar basicConf = {id : \"formHome\", title:\"Form Home for FORM\",addWidgets:addwidgetsfrmNew, skin:\"frmskn\"};<br/>\nvar layoutConf = {contentAlignment : constants.CONTENT_ALIGN_TOP_CENTER, containerWeight:100};<br/>\nvar pspConf = {titleBar: true, titleBarSkin: \"skntitlebar\"};<br/>\n\n//Creating a form using the properties defined above.<br/>\nvar myForm = new kony.ui.Form(basicConf,layoutConf,pspConf)<br/>\n\n//Procedure to create an OK button.<br/>\nvar basicConf = {id : \"buttonForOk\", text:\"OK\", isVisible:true,onClick:gotofrmNext, setEnabled:true, skin: \"btnskn\", focusSkin: \"btnfocusskn\"};<br/>\nvar layoutConf = {contentAlignment : constants.CONTENT_ALIGN_BOTTOM_RIGHT, containerWeight:100};<br/>\nvar okButton = new kony.ui.Button(basicConf, layoutConf, {});<br/>\n\n//Removing a form using remove method.<br/>\nmyForm.remove(okButton);</pre>",
                        "!type": "fn(widgetref: ?)"
                    },
                    "removeAt": {
                        "!doc": " This method removes a widget at the given index from the Form container. If a new widget is removed will reflect immediately from the Form hierarchy model perspective, however the changes are displayed when the Form appears. When the widgets are added to the current visible Form, then the changes will reflect immediately.\n @param index {Number} Reference of the name of the widget.<b>Mandatory</b>\n @returns Reference of the name of the widget to be removed.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining properties of a form.<br/>\nvar basicConf = {id : \"formHome\", title:\"Form Home for FORM\",addWidgets:addwidgetsfrmNew, skin:\"frmskn\"};<br/>\nvar layoutConf = {contentAlignment : constants.CONTENT_ALIGN_TOP_CENTER, containerWeight:100};<br/>\nvar pspConf = {titleBar: true, titleBarSkin: \"skntitlebar\"};<br/>\n\n//Creating a form using the properties defined above.<br/>\nvar myForm = new kony.ui.Form(basicConf,layoutConf,pspConf)<br/>\n\n//Procedure to create an OK button.<br/>\nvar basicConf = {id : \"buttonForOk\", text:\"OK\", isVisible:true,onClick:gotofrmNext, setEnabled:true, skin: \"btnskn\", focusSkin: \"btnfocusskn\"};<br/>\nvar layoutConf = {contentAlignment : constants.CONTENT_ALIGN_BOTTOM_RIGHT, containerWeight:100};<br/>\nvar okButton = new kony.ui.Button(basicConf, layoutConf, {});<br/>\n\n//Removing a form using remove method at index 1.<br/>\nmyForm.removeAt(1);</pre>",
                        "!type": "fn(index: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy.\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "removeGestureRecognizer": {
                        "!doc": " This method allows you to remove a specified gesture recognizer for a specified widget.\n @param uniqueIdentifier{Widgetref} Indicates the type of gesture added to the form.<b>Mandatory</b>\n @Available iPhone,iPad,Android,BlackBerry,Windows phone,SPA\n @access Write\n @usage <pre>\n//The below function will get invoked when a gesture is recognized.<br/>\nfunction myTap(myWidget,gestureInfo)<br/>\n{\n  alert(\"Tap Gesture detected. gestureType :\"+gestureInfo.gestureType +\n      \", gesturePosition :\"+gestureInfo.gesturePosition);\n  //write any further logic here\n}<br/>\n\n//Setting Gesture configuration.<br/>\nvar setupTblTap = {fingers:1, taps:2};//double tap gesture<br/>\n\n//To add a TAP gesture recognizer on a form frm1<br/>\nvar tapGesture = frm1.setGestureRecognizer(1, setupTblTap, myTap)<br/>\n\n//To remove the TAP gesture recognizer on a form frm1<br/>\nfrm1.removeGestureRecognizer(tapGesture);</pre>",
                        "!type": "fn(uniqueIdentifier: ?)"
                    },
                    "scrollToBeginning": {
                        "!doc": " This method gives you the control to scroll to the beginning of the form.\n @Available All Platforms except Mobile Web\n @access Write\n @usage <pre>\n//Defining properties for a form.<br/>\nvar basicConf = {id : \"formHome\", title:\"My Form\"};<br/>\nvar layoutConf = {padding: [20,20,20,20]};<br/>\n\n//Creating a form with the properties defined above.<br/>\nvar frmScrollToBeginning= new kony.ui.Form(basicConf, layoutConf, {} );<br/>\n\n//Method to scroll to the beginning of the form.<br/>\nfrmScrollToBeginning.scrollToBeginning();</pre>",
                        "!type": "fn()"
                    },
                    "scrollToEnd": {
                        "!doc": " This method gives you the control to scroll to the end of the form.\n @Available All Platforms except Mobile Web\n @access Write\n @usage <pre>\n//Defining properties for a form.<br/>\nvar basicConf = {id : \"formHome\", title:\"My Form\"};<br/>\nvar layoutConf = {padding: [20,20,20,20]};<br/>\n\n//Creating a form with the properties defined above.<br/>\nvar frmScrollToEnd= new kony.ui.Form(basicConf, layoutConf, {} );<br/>\n\n//Method to scroll to the end of the form.<br/>\nfrmScrollToEnd.scrollToEnd(labelForOk);</pre>",
                        "!type": "fn()"
                    },
                    "scrollToWidget": {
                        "!doc": " This method gives you the control to scroll to the widget in the form.\n @param widgetref {Object} Reference of the name of the widget.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Procedure to create a label for OK button.<br/>\nvar basicConfLbl = {id : \"labelForOk\", text:\"OK\", isVisible:true};<br/>\nvar layoutConfLbl = {contentAlignment : constants.CONTENT_ALIGN_BOTTOM_RIGHT, containerWeight:100};<br/>\nvar labelForOk = new kony.ui.Label(basicConfLbl, layoutConfLbl, {});<br/>\n\n//Defining properties for a form.<br/>\nvar basicConf = {id : \"formHome\", title:\"My Form\"};<br/>\nvar layoutConf = {padding: [20,20,20,20]};<br/>\n\n//Creating a form with the properties defined above.<br/>\nvar frmScrollToWidget= new kony.ui.Form(basicConf, layoutConf, {} );<br/>\n\n//Method to scroll the form upto label.<br/>\nfrmScrollToWidget.scrollToWidget(labelForOk);</pre>",
                        "!type": "fn(widgetref: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setGestureRecognizer": {
                        "!doc": " This method allows you to set a gesture recognizer for a specified gesture for a specified widget.\n @param gestureType{Number} Indicates the type of gesture that needs to be detected on the widget.<b>Mandatory</b>\n @param setupParams {Array}Specifies an object that has the configuration parameters needed to setup a gesture recognizer.<b>Mandatory</b>\n @param gestureHandler{Function} Specifies the function that needs to be executed when a gesture is recognized.<b>Mandatory</b>\n @Available ios,Android,BlackBerry,Windows phone/Windows Kiosk,J2ME,SPA\n @access Write\n @usage <pre>\n//The below function will get invoked  when a gesture is recognized.\nfunction myTap(myWidget, gestureInfo)<br/>\n{\n  alert(\"Tap Gesture detected. gestureType :\"+gestureInfo.gestureType +\n      \", gesturePosition :\"+gestureInfo.gesturePosition);\n  //write any further logic here\n} <br/>\n\n//Setting Gesture configuration.<br/>\nvar setupTblTap = {fingers:1, taps:2};//double tap gesture<br/>\n\n//To add a TAP gesture recognizer on a form frm1<br/>\nvar tapGesture=frm1.setGestureRecognizer(1, setupTblTap, myTap);</pre>",
                        "!type": "fn(gestureType: ?, setupParams: ?, gestureHandler: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setPreviewActionItems": {
                        "!doc": "Sets the preview actions for a form to be displayed when the user swipes up the preview/peek of a form.\n@param {Array} previewActionItems - An array of preview action item configs. Each config item has: 'type' - Defines the type of the preview action item whether it is individual or group item; 'title' - required, user-visible title of the preview action item; 'style' - optional, style parameter of the preview action item. The following are the constants that can be given; 'actions' - Array of preview action items; 'onPreviewAction' - Callback function that will be called when the user selects this preview action item. Applicable only for individual preview action item. It gets previewActionConfig, previewForm as params.",
                        "!type": "fn(previewActionItems: [?])"
                    },
                    "setTitleBarLeftSideButton": {
                        "!doc": "This method enables you to set the properties for a left-side button of a titlebar.\n@Available iPhone,iPad\n@access Write",
                        "!type": "fn()"
                    },
                    "setTitleBarRightSideButton": {
                        "!doc": "This method enables you to set the properties for a right-side button of a titlebar.\n@Available iPhone,iPad\n@access Write",
                        "!type": "fn()"
                    },
                    "setTitleBarSkin": {
                        "!doc": "     This method enables you to set the skin for a titlebar of a form.\n     @Available iPhone,iPad\n     @access Write\n     @usage <pre>\n\t  //Defining properties for a form.<br/>\n\t  var basicConf = {id : \"formHome\", title:\"My Form\"};<br/>\n    var layoutConf = {padding: [20,20,20,20]};<br/>\n\n    //Creating a form with the properties defined above.<br/>\n    var frmTitleBar= new kony.ui.Form(basicConf, layoutConf, {} );<br/>\n\n    //Method to set the skin properties for a titlebar.<br/>\n    frmTitleBar.setTitleBarSkin();</pre>",
                        "!type": "fn()"
                    },
                    "show": {
                        "!doc": " This method is used to display the form on to the screen.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining properties of a form.<br/>\nvar basicConf = {id : \"formHome\", title:\"Form Home for FORM\",addWidgets:addwidgetsfrmNew, skin:\"frmskn\"};<br/>\nvar layoutConf = {contentAlignment : constants.CONTENT_ALIGN_TOP_CENTER, containerWeight:100};<br/>\nvar pspConf = {titleBar: true, titleBarSkin: \"skntitlebar\"};<br/>\n\n//Creating a form using the properties defined above.<br/>\nvar myForm = new kony.ui.Form(basicConf,layoutConf,pspConf)<br/>\n\n//Showing a form using show method.<br/>\nmyForm.show(); </pre>",
                        "!type": "fn()"
                    },
                    "showTitleBar": {
                        "!doc": "     This method gives you the control to show a titlebar within a form.\n     @Available iPhone,iPad\n     @access Write\n     @usage <pre>\n\t  //Defining properties for a form.<br/>\n\t  var basicConf = {id : \"formHome\", title:\"My Form\"};<br/>\n    var layoutConf = {padding: [20,20,20,20]};<br/>\n\n    //Creating a form with the properties defined above.<br/>\n    var frmTitleBar = new kony.ui.Form(basicConf, layoutConf, {});<br/>\n\n    //Method to show a titlebar.<br/>\n    frmTitleBar.showTitleBar();</pre>",
                        "!type": "fn()"
                    },
                    "skin": {
                        "!doc": "Specifies a background skin for Form widget.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "title": {
                        "!doc": "Specifies the form title.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "titleBar": {
                        "!doc": "Specifies the title bar must be displayed on the form.\n@property {Boolean}\n@Available iPhone,iPad,Android,BlackBerry,Windows 8\n@access Read and Write",
                        "!type": "bool"
                    },
                    "titleBarConfig": {
                        "!doc": "Specifies the position of the titleBar of the form.\n@property {Object}\n@Available iPhone,iPad\n@access Read and Write"
                    },
                    "titleBarSkin": {
                        "!doc": "Specifies the skin to be applied to the titleBar of the form.\n@property {String}\n@Available iPhone,Android,BlackBerry\n@access Read and Write",
                        "!type": "string"
                    },
                    "type": {
                        "!doc": "Specifies the possible types of the form.\n@property {Number}\n@Available All Platforms\n@access Read",
                        "!type": "number"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "widgets": {
                        "!doc": " This method returns an array of the widget references which are direct children of Form.\n @returns {array} This method returns Read only array of widget references. Modifying the array and changing the position of widgets in this array doesn't reflect in the Form hierarchy, however you can get handle to the widgets through this array and modify the widgets through widget level methods as exposed by individual widgets.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining properties of a form.<br/>\nvar basicConf = {id : \"formHome\", title:\"Form Home for FORM\",addWidgets:addwidgetsfrmNew, skin:\"frmskn\"};<br/>\nvar layoutConf = {contentAlignment : constants.CONTENT_ALIGN_TOP_CENTER, containerWeight:100};<br/>\nvar pspConf = {titleBar: true, titleBarSkin: \"skntitlebar\"};<br/>\n\n//Creating a form using the properties defined above.<br/>\nvar myForm = new kony.ui.Form(basicConf,layoutConf,pspConf)<br/>\n\n//Procedure to create an OK button.<br/>\nvar basicConf = {id : \"buttonForOk\", text:\"OK\", isVisible:true,onClick:gotofrmNext, setEnabled:true, skin: \"btnskn\", focusSkin: \"btnfocusskn\"};<br/>\nvar layoutConf = {contentAlignment : constants.CONTENT_ALIGN_BOTTOM_RIGHT, containerWeight:100};<br/>\nvar okButton = new kony.ui.Button(basicConf, layoutConf, {});<br/>\n\n//Method to return myForm widgets.<br/>\nmyForm.widgets();</pre>",
                        "!type": "fn() -> [?]"
                    }
                }
            },
            "Form2": {
                "!doc": "Creates a new Form2 object.\n@class kony.ui.Form2\n@returns {kony.ui.Form2}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.Form2",
                "prototype": {
                    "accessibilityConfig": {
                        "!doc": "Specifies the accessiblity configuration property for the widget.\n@property {Object}\n@Available iPhone, Android, and SPA-iPhone Platforms\n@access Read and Write\n@usage <pre>\n   accessibilityConfig =  {\n       \"a11yLabel\": \"Your text goes here\",\n   },"
                    },
                    "actionBarIcon": {
                        "!doc": "Specifies the image for action bar icon. It is displayed on the left side of the action bar.\n@property {String}\n@Available Android,AndroidTablet\n@access Read and Write",
                        "!type": "string"
                    },
                    "add": {
                        "!doc": " This method is used to add widgets to the form.\n @param widgetArray{Object} Comma separated list of widgets.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Create an ok button<br/>\nvar basicConf = {id : \"buttonForOk\", text:\"OK\", isVisible:true,onClick:gotofrmNext, setEnabled:true, skin: \"btnskn\", focusSkin: \"btnfocusskn\"};<br/>\nvar layoutConf = {contentAlignment : constants.CONTENT_ALIGN_BOTTOM_RIGHT, containerWeight:100};<br/>\nvar okButton = new kony.ui.Button(basicConf, layoutConf, {});<br/>\n\n//Create a cancel button<br/>\nvar basicConf = {id : \"buttonForCancel\", text:\"Cancel\", isVisible:true,onClick:gotofrmPrevious, setEnabled:true, skin: \"btnskn\", focusSkin: \"btnfocusskn\"};<br/>\nvar layoutConf = {contentAlignment : constants.CONTENT_ALIGN_BOTTOM_LEFT, containerWeight:100};<br/>\nvar cancelButton = new kony.ui.Button(basicConf, layoutConf, {});<br/>\n\n//Add ok, cancel button to the form.<br/>\nfrmHome.add(okButton, cancelButton);</pre>",
                        "!type": "fn(widgetArray: ?)"
                    },
                    "addAt": {
                        "!doc": " This method is used to add widgets to the form container at the specified index.\n @param widgetref{Object} Reference of the name of the widget.<b>Mandatory</b>\n @param index {Number} Index number at which the widget is to be added.<b>Mandatory</b>\n @param animationConfig {Object} Specifies the animation configuration object.<b> Note: This is OPTIONAL parameter and is supported only on iOS and Android platforms.</b></dd>\n    <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animEffect</b> {Object} Specifies the animation effect. Following are the available options of animation effect. <b>Optional </b></pre> </pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_EXPAND:&#160;Specifies the widget must expand gradually by increasing the height of the widget. This option is applicable only when visibility is turned on.</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_REVEAL: Specifies the widget must appear gradually by decreasing the transparency of the widget.</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_NONE:&#160;This is the default option. Specifies animation should not be applied to the widget, but layout animations are applied on the Form that may be change the current widgets layout. The animation events are not triggered when this option is set.</pre></li></pre></dd>\n\n    <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animDuration - Optional </b> {Number} Specifies the duration of the animation effect in seconds. The default value is 1. <b>Optional </b></pre> </pre></dd>\n\n    <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animDelay - Optional </b> {Number} Specifies the delay of the animation effect in seconds. The default value is 0. <b>Optional </b></pre> </pre></dd>\n\n    <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp; <b>- animCurve - Optional </b> Specifies the animation curve to be applied while playing the animation. An animation curve defines the speed of the animations at different intervals of the animation duration. Following are the available options of animation curve: </p></dd> </pre> </pre> </dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEIN:&#160;Specifies the animation to start slowly and then continues with normal speed.</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEOUT: Specifies the animation to start with normal speed and slowdown towards the end.</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEINOUT:&#160;Specifies the animation to start slowly and then continues with normal speed and then again slowdown towards the end.</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_LINEAR:&#160;This is the default value. Specifies the animation to continue with normal speed.</pre></li></pre></dd>\n\n    <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp; <b>- animCallBacks - Optional </b> It is a JS dictionary containing the events invoked by the platform during the animation life cycle. Following are the available events: </p></dd> </pre> </pre> </dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; animStarted:&#160;Invoked at the end of the animation without any parameters. Following is the signature of the event:</pre></li></pre></dd><b>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp;<b>function animStarted() </b></dd> </p></pre> </pre> </pre> </br> </pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; animEnded: Invoked at the end of the animation without any parameters. Following is the signature of the event:</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp;<b>function animEnded() </b></pre> </pre> </pre>\n\n\n @Available All Platforms\n @access Write\n @usage <pre>\n//Set animation along with addAt<br/>\nvar basicConf = {id : \"buttonForOk\", text:\"OK\", isVisible:true, onClick:gotofrmNext, setEnabled:true, skin: \"btnskn\", focusSkin: \"btnfocusskn\"};<br/>\nvar layoutConf = {contentAlignment : constants.CONTENT_ALIGN_BOTTOM_RIGHT, containerWeight:100};<br/>\nvar okButton = new kony.ui.Button(basicConf, layoutConf, {});<br/>\n\n//Method to add an OK button at index 1.<br/>\nfrmHome.addAt(okButton, 1, animationConfig);</pre>",
                        "!type": "fn(widgetref: ?, index: ?, animationConfig: ?)"
                    },
                    "addWidgets": {
                        "!doc": "An event callback invoked by the platform when the form is accessed for first time after its construction.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "allowHorizontalBounce": {
                        "!doc": "Specifies whether the scroll bounce is enabled or disabled in the horizontal direction.\n@property {Boolean}\n@Available iOS and SPA platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "allowVerticalBounce": {
                        "!doc": "Specifies whether the scroll bounce is enabled or disabled in the vertical direction.\n@property {Boolean}\n@Available iOS and SPA platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "backgroundColor": {
                        "!doc": "Specifies the background color of the widget in hex format.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "bounces": {
                        "!doc": "Specifies the whether the scroll view bounces past the edge of the content and back again. When set to true the scroll view bounce is applied.\n@property {Boolean}\n@Available Available on iOS platform only.\n@access Read and Write",
                        "!type": "bool"
                    },
                    "contentOffset": {
                        "!doc": "Specifies the x and y coordinates of the top-left of the scrollable region. When the values are set, the scroll container scrolls even if the scrolling is disabled. This will always returns the value that developer has set but never reflects the actual computed offset.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write"
                    },
                    "contentSize": {
                        "!doc": "Specifies the width and height of the container to accommodate all the widgets placed in it. This will returns the values that developer has set, but never reflects the actual computed content size.\n@property {Object}\n@Available iOS, Android, Windows platforms\n@access Read and Write"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "createAnimation": {
                        "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                        "!type": "fn(animationDef: ?)"
                    },
                    "defaultIndicatorColor": {
                        "!doc": "Specifies the color for progress indicator when it is being shown on the form.\n@property {String}\n@Available iOS and Android Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "defaultUnit": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write"
                    },
                    "destroy": {
                        "!doc": " This method is used to destroy any unwanted forms at any point in time, and allows increasing the application life by reducing the memory usage.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining properties of a form.<br/>\nvar basicConf = {id : \"formHome\", title:\"Form Home for FORM\",addWidgets:addwidgetsfrmNew, skin:\"frmskn\"};<br/>\nvar layoutConf = {contentAlignment : constants.CONTENT_ALIGN_TOP_CENTER, containerWeight:100};<br/>\nvar pspConf = {titleBar: true, titleBarSkin: \"skntitlebar\"};<br/>\n\n//Creating a form using the properties defined above.<br/>\nvar myForm = new kony.ui.Form2(basicConf,layoutConf,pspConf)<br/>\n\n//Destroying a form using destroy method.<br/>\nmyForm.destroy();</pre>",
                        "!type": "fn()"
                    },
                    "displayOrientation": {
                        "!doc": "Specifies the property to set the display orientation of the form on the device.\n@property {Number}\n@Available All Platforms\n@access Read",
                        "!type": "number"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "enableOnScrollWidgetPositionForSubwidgets": {
                        "!doc": "Enables the container to iterate through all widgets that have registered for the onScrollWidgetPosition callback.\n@property {Boolean}\n@Available Available on Android, IOS, Windows and SPA\n@access Read and Write",
                        "!type": "bool"
                    },
                    "enablePeekGesture": {
                        "!doc": "Specifies if the peek gesture must be enabled on the form.\n@property {Boolean}\n@Available Available on BlackBerry10 platform.\n@access Read and Write",
                        "!type": "bool"
                    },
                    "enableScrolling": {
                        "!doc": "Enables the scrolling of the form when containerHeight is given to the Form.\n@property {Boolean}\n@Available Available on all platforms excelt Server side Mobile Web and Desktop Web platforms.\n@access Read and Write",
                        "!type": "bool"
                    },
                    "extendBottom": {
                        "!doc": "This property enables you to configure extendBottom property. This property is supported in iOS7 and above only. This property is also applicable on the Application Level properties under Application Properties > Native > iPhone/iPad > Platform Settings. The property set at Form level takes precedence over Application level.\n@property {Boolean}\n@Available Available on iOS platform.\n@access Read and Write",
                        "!type": "bool"
                    },
                    "extendTop": {
                        "!doc": "Specifies the form content to scroll under the App Menu. This property is supported in iOS7 and above only. This property is also applicable on the Application Level properties under Application Properties > Native > iPhone/iPad > Platform Settings. The property set at Form level takes precedence over Application level.\n@property {Boolean}\n@Available Available on iOS platform.\n@access Read and Write",
                        "!type": "bool"
                    },
                    "footers": {
                        "!doc": "A footer is a section of the form that is docked at the bottom of the form (does not scroll along with the content of the form). It accepts an array of kony.ui.Box object references with horizontal orientation that are added as footer docked at the bottom of the Form. These footers can be reused across forms.\n@property {Array}\n@Available All Platforms except Desktop Web\n@access Read",
                        "!type": "[?]"
                    },
                    "forceLayout": {
                        "!doc": " This method forces layout only when layoutType configured as one kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, and kony.flex.FLEX_VERTICAL. This method asynchronously forces the layout while method returns immediately.  When called layout cycle is forced to layout the widgets of the flex container. FlexContainer does not issue layout as and when changes happen to the widgets inside FlexContainer.\n @Available iOS, Android, Windows, SPA platforms\n @access Write\n @usage <pre>\n//Flexform using forceLayout method.<br/>\nfrm1.forceLayout(); </pre>",
                        "!type": "fn()"
                    },
                    "frame": {
                        "!doc": "This property reflects the changes in position and dimensions of widget due to changes in widget layout properties. The widget layout properties are always retained when they are set but never reflect in final layout calculations. This property reflects the calculated values. A frame is a JSObject with the keys (x, y, width, and height) measured in system units.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "getTitleVerticalPositionAdjustment": {
                        "!doc": " This method is used to get vertical position adjustment of title on form navbar.\n @param adjustmentConfig{Object} Specifies barMetrics for getting the adjustment\n @returns the adjustment set for specified barMetrics\n @Available iPhone and iPad platformss\n @usage <pre>\nfrmHome.getTitleVerticalPositionAdjustment({barMetrics: constants.BAR_METRICS_COMPACT})\n</pre>",
                        "!type": "fn(adjustmentConfig: ?)"
                    },
                    "headers": {
                        "!doc": "A header is a section of the form that is docked at the top of the form (does not scroll along with the content of the form). It accepts an array of kony.ui.Box object references with horizontal orientation that are added as header docked at the top of the Form. These headers can be reused across forms.\n@property {Array}\n@Available All Platforms except Desktop Web\n@access Read",
                        "!type": "[?]"
                    },
                    "height": {
                        "!doc": "Height determines the height of the widget and measured along the y-axis (height of the parent).\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "hideTitleBar": {
                        "!doc": "     This method gives you the control to hide a titlebar within a form.\n     @Available iPhone,iPad\n     @access Write\n     @usage <pre>\n\t //Defining properties for a form.<br/>\n\tvar basicConf = {id : \"formHome\", title:\"My Form\"};<br/>\n    var layoutConf = {padding: [20,20,20,20]};<br/>\n\n    //Creating a form with the properties defined above.<br/>\n    var frmTitleBar= new kony.ui.Form2(basicConf, layoutConf, {} );<br/>\n\n    //Method to hide a titlebar.<br/>\n    frmTitleBar.hideTitleBar();</pre>",
                        "!type": "fn()"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "inTransitionConfig": {
                        "!doc": "Specifies the configuration to be used when the user arrives on this form.\n@property {Object}\n@Available All Platforms except Mobile Web Platforms\n@access Read and Write"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "init": {
                        "!doc": "This event gets called only once in form life cycle that is when the form is ready with its widget hierarchy.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "layoutType": {
                        "!doc": "Specifies if the arrangement of the widgets either in free form or horizontal or vertical direction.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only",
                        "!type": "number"
                    },
                    "maxZoomScale": {
                        "!doc": "Specifies the maximum zoom scale factor that can be applied to the form.\n@property {Number}\n@Available This property is available on iOS platform\n@access Read and Write",
                        "!type": "number"
                    },
                    "menuFocusSkin": {
                        "!doc": "This is a skin property of a form level menu and it determines the look and feel of the Menu Item when focused.\n@property {String}\n@Available iPad,iPhone,Android,Android tablet,Blackberry,Window Phone 7,J2ME\n@access Write",
                        "!type": "string"
                    },
                    "menuItems": {
                        "!doc": "menuItems represents the list of items to be displayed in the device menu control. Unlike application menu items, which are available across all the forms, these items are only available for a specific form.\n@property {Object}\n@Available All platforms except SPA platform\n@access Write"
                    },
                    "menuNormalSkin": {
                        "!doc": "This is a skin property and it determines the look and feel of a menu items when not in focus.\n@property {String}\n@Available All Platforms\n@access Write",
                        "!type": "string"
                    },
                    "menuPosition": {
                        "!doc": "Specifies if the application menu is shown or hidden in the application. In some platforms, form menu items appear along with app menu items.\n@property {Boolean}\n@Available Android,Android Tablet and BlackBerry\n@access Read and Write",
                        "!type": "bool"
                    },
                    "minZoomScale": {
                        "!doc": "Specifies the minimum zoom scale factor that can be applied to the form.\n@property {Number}\n@Available This property is available on iOS platform\n@access Read and Write",
                        "!type": "number"
                    },
                    "navigationBarColor": {
                        "!doc": "     The navigationBarColor property helps you set the color for a device's navigation bar.\n     @property {String}\n     @Available Android 5.0 and later versions\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the navigationBarColor property on an existing widget<br/>\n\t Form1.navigationBarColor = \"ffff0000\";</pre>",
                        "!type": "string"
                    },
                    "onActionBarBack": {
                        "!doc": "An event callback that is invoked by the platform when the back button is pressed on an action bar. The back button exists on the left side of the action bar with UP caret symbol. It is enabled only when onActionBarBack callback is registered on form and showActionBarIcon is set to true.\n@property {Event}\n@Available Android,AndroidTablet\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onBreakpointChange": {
                        "!doc": "Specifies an event which is triggered when there is a change in breakpoint.\n@property {Event}\n@Available {DesktopWeb}\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onDecelerationStarted": {
                        "!doc": "An event callback is invoked by the platform when the user stops scrolling but the content still moves before the content actually stops.\n@property {Event}\n@Available iOS platform only\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onDestroy": {
                        "!doc": "Specifies an event which is triggered when the FlexForm is destroyed.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onDeviceBack": {
                        "!doc": "Specifies an event which is triggered when the user uses the back button on the device.\n@property {Event}\n@Available Android,Android Tablet,BlackBerry,Desktop Web\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onDeviceMenu": {
                        "!doc": "Specifies an event which is triggered when the user uses the back button on the device.\n@property {Event}\n@Available Android,Android Tablet\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onHide": {
                        "!doc": "Specifies an Event which is triggered when a form goes completely out of view.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onOrientationChange": {
                        "!doc": "Specifies an Event which is triggered when there is a change in orientation of the form from portrait to landscape or vice versa.\n@property {Event}\n@Available All Platforms except Mobile Web platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onScrollEnd": {
                        "!doc": "An event callback is invoked by the platform when the scrolling is ended. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Mandatory</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onScrollStart": {
                        "!doc": "An event callback is invoked by the platform when the user starts scrolling the content. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Mandatory</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onScrollTouchReleased": {
                        "!doc": "An event callback is invoked by the platform when the user touch is released from the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Mandatory</b>\n@property {Event}\n@Available iOS and Android platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onScrolling": {
                        "!doc": "An event callback is invoked by the platform when the scrolling is in progress. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Mandatory</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchEnd": {
                        "!doc": "An event callback is invoked by the platform when the user touch is released from the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchMove": {
                        "!doc": "An event callback is invoked by the platform when the touch moves on the touch surface continuously until the movement ends. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchStart": {
                        "!doc": "An event callback is invoked by the platform when the user touches the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onZoomEnd": {
                        "!doc": "An event callback is invoked by the platform when the zooming has ended. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the zooming has started.<b>Mandatory</b>\n@property {Event}\n@Available Available on iOS platform\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onZoomStart": {
                        "!doc": "An event callback is invoked by the platform when the touch moves on the touch surface continuously until the movement ends. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the zooming has started.<b>Mandatory</b>\n@param widget{widgetreg} Specifies the widget that actually zooms.<b>Mandatory</b>\n@property {Event}\n@Available Available on iOS platform\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onZooming": {
                        "!doc": "An event callback is invoked by the platform when the container is zooming. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the zooming has started.<b>Mandatory</b>\n@property {Event}\n@Available Available on iOS platform\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "outTransitionConfig": {
                        "!doc": "Specifies the type of transition effect to be applied when the Form is going out of view.\n@property {Object}\n@Available All Platforms except Mobile Web platforms\n@access Read and Write"
                    },
                    "padding": {
                        "!doc": "Specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms except Mobile Web platforms.\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "pagingEnabled": {
                        "!doc": "Specifies the whether the paging is enabled for the container. If this property is set to true, the scroll view stops on multiples of the scroll view's bounds when the user scrolls.\n@property {Boolean}\n@Available iOS and Android platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "postShow": {
                        "!doc": "postShow is invoked after a form is displayed. Gets called even on device back or while navigating back to the form through title bar navigation items.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "preShow": {
                        "!doc": "preShow is executed every time a form is to be displayed. This event is called even on device back or while navigating back to the form through title bar navigation items.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "prefersStatusBarHidden": {
                        "!doc": "Specifies whether the status bar must be shown or not.\n@property {Boolean}\n@Available iOS platform only\n@access Read only",
                        "!type": "bool"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "remove": {
                        "!doc": " This method removes a widget from the form container. If a new widget is removed will reflect immediately from the Form hierarchy model perspective, however the changes are displayed when the Form appears. When the widgets are added to the current visible Form, then the changes will reflect immediately.\n @param widgetref {Object} Reference of the name of the widget.<b>Mandatory</b>\n @returns The current Form handle is returned.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining properties of a form.<br/>\nvar basicConf = {id : \"formHome\", title:\"Form Home for FORM\",addWidgets:addwidgetsfrmNew, skin:\"frmskn\"};<br/>\nvar layoutConf = {contentAlignment : constants.CONTENT_ALIGN_TOP_CENTER, containerWeight:100};<br/>\nvar pspConf = {titleBar: true, titleBarSkin: \"skntitlebar\"};<br/>\n\n//Creating a form using the properties defined above.<br/>\nvar myForm = new kony.ui.Form2(basicConf,layoutConf, pspConf)<br/>\n\n//Procedure to create an OK button.<br/>\nvar btnBasicConf = {id : \"buttonForOk\", text:\"OK\", isVisible:true,onClick:gotofrmNext, setEnabled:true, skin: \"btnskn\", focusSkin: \"btnfocusskn\"};<br/>\nvar btnLayoutConf = {contentAlignment : constants.CONTENT_ALIGN_BOTTOM_RIGHT, containerWeight:100};<br/>\nvar okButton = new kony.ui.Button(btnBasicConf, btnLayoutConf, {});<br/>\n\n//Removing a form using remove method.<br/>\nmyForm.remove(okButton);</pre>",
                        "!type": "fn(widgetref: ?)"
                    },
                    "removeAll": {
                        "!doc": " This method removes all the widget on the container.\n @Available iOS, Android, Windows, SPA platforms\n @access Write\n @usage <pre>\n//Removing widgets using removeall method.<br/>\nfrm1.removeAll();</pre>",
                        "!type": "fn()"
                    },
                    "removeAt": {
                        "!doc": " This method removes a widget at the given index from the Form container. If a new widget is removed will reflect immediately from the Form hierarchy model perspective, however the changes are displayed when the Form appears.\n @param index {Number} Reference of the name of the widget.<b>Mandatory</b>\n @param animationConfig {Object} Specifies the animation configuration object.<b> Note: This is OPTIONAL parameter and is supported only on iOS and Android platforms.</b></dd>\n    <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animEffect</b> {Object} Specifies the animation effect. Following are the available options of animation effect.<b>Optional </b></pre> </pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_COLLAPSE: Specifies the widget must collapse gradually by decreasing the height of the widget. This option is applicable only when visibility is turned on.</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_FADE: Specifies the widget must disappear gradually by increasing the transparency of the widget.</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_NONE:&#160;This is the default option. Specifies animation should not be applied to the widget, but layout animations are applied on the Form that may be change the current widgets layout. The animation events are not triggered when this option is set.</pre></li></pre></dd>\n\n    <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animDuration - Optional </b> {Number} Specifies the duration of the animation effect in seconds. The default value is 1. <b>Optional </b></pre> </pre></dd>\n\n    <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animDelay - Optional </b> {Number} Specifies the delay of the animation effect. The default value is 0.<b>Optional </b></pre> </pre></dd>\n\n    <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp; <b>- animCurve - Optional </b> Specifies the animation curve to be applied while playing the animation. An animation curve defines the speed of the animations at different intervals of the animation duration. Following are the available options of animation curve: </p></dd> </pre> </pre> </dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEIN:&#160;Specifies the animation to start slowly and then continues with normal speed.</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEOUT: Specifies the animation to start with normal speed and slowdown towards the end.</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEINOUT:&#160;Specifies the animation to start slowly and then continues with normal speed and then again slowdown towards the end.</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_LINEAR:&#160;This is the default value. Specifies the animation to continue with normal speed.</pre></li></pre></dd>\n\n    <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp; <b>- animCallBacks - Optional </b> It is a JS dictionary containing the events invoked by the platform during the animation life cycle. Following are the available events: </p></dd> </pre> </pre> </dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; animStarted:&#160;Invoked at the end of the animation without any parameters. Following is the signature of the event:</pre></li></pre></dd><b>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp;<b>function animStarted() </b></dd> </p></pre> </pre> </pre> </br> </pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; animEnded: Invoked at the end of the animation without any parameters. Following is the signature of the event:</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp;<b>function animEnded() </b></pre> </pre> </pre>\n\n @returns {Object} Reference of the name of the widget to be removed.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining properties of a form.<br/>\nvar basicConf = {id : \"formHome\", title:\"Form Home for FORM\",addWidgets:addwidgetsfrmNew, skin:\"frmskn\"};<br/>\nvar layoutConf = {contentAlignment : constants.CONTENT_ALIGN_TOP_CENTER, containerWeight:100};<br/>\nvar pspConf = {titleBar: true, titleBarSkin: \"skntitlebar\"};<br/>\n\n//Creating a form using the properties defined above.<br/>\nvar myForm = new kony.ui.Form2(basicConf,layoutConf,pspConf)<br/>\n\n//Procedure to create an OK button.<br/>\nvar btnBasicConf = {id : \"buttonForOk\", text:\"OK\", isVisible:true,onClick:gotofrmNext, setEnabled:true, skin: \"btnskn\", focusSkin: \"btnfocusskn\"};<br/>\nvar btnLayoutConf = {contentAlignment : constants.CONTENT_ALIGN_BOTTOM_RIGHT, containerWeight:100};<br/>\nvar okButton = new kony.ui.Button(btnBasicConf, btnLayoutConf, {});<br/>\n\n//Removing a form using remove method at index 1.<br/>\nmyForm.removeAt(1);</pre>",
                        "!type": "fn(index: ?, animationConfig: ?) -> ?"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "removeGestureRecognizer": {
                        "!doc": " This method allows you to remove a specified gesture recognizer for a specified widget.\n @param uniqueIdentifier{Widgetref} Indicates the type of gesture added to the form.<b>Mandatory</b>\n @Available iPhone,iPad,Android,BlackBerry,Windows phone,SPA\n @access Write\n @usage <pre>\n//The below function will get invoked when a gesture is recognized.<br/>\nfunction myTap(myWidget,gestureInfo)<br/>\n{\nalert(\" Tap Gesture detected\");\nalert(\"gestureType :\"+gestureInfo.gestureType);\nalert(\"gesturePosition :\"+gestureInfo.gesturePosition);\n//write any further logic here\n}<br/>\n\n//Setting Gesture configuration.<br/>\nlocal setupTblTap = {fingers:1,taps:2};//double tap gesture<br/>\n\n//To add a TAP gesture recognizer on a hbox with ID hbx1 placed on a form frm1<br/>\nvar tapGesture=frm1.hbx1.setGestureRecognizer(1,setupTblTap,myTap)<br/>\n\n//To remove the TAP gesture recognizer on a hbox with ID hbx1 placed on a form frm1<br/>\nfrm1.hbx1.removeGestureRecognizer(tapGesture);</pre>",
                        "!type": "fn(uniqueIdentifier: ?)"
                    },
                    "replaceAt": {
                        "!doc": " This method removes a widget and replaces with another widget in a form(Note: This method is supported only on iOS and Android platforms.). If a widget is replaced from the form, will reflect immediately from the Form hierarchy model perspective; however the changes are displayed when the Form appears.\n @param widgetref{Object} Reference of the name of the widget.<b>Mandatory</b>\n @param index {Number} Index number at which the widget is to be replaced. If the index is lessthan 0, then first widget in the container gets replaced. If the index greater than size -1, then the last widget in the container widget gets replaced. The term size refers to the number of widgets present in the container widget.<b>Mandatory</b>\n @param animationConfig {Object} Specifies the animation configuration object.<b> Optional</b></dd>\n    <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animEffect</b> {Object} Specifies the animation effect. Following are the available options of animation effect. <b>Optional </b></pre> </pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_FLIP_RIGHT: Specifies the widget must flip from right to left.</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_FLIP_LEFT: Specifies the widget must flip from left to right.</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_NONE:&#160;This is the default option. Specifies animation should not be applied to the widget, but layout animations are applied on the Form that may be change the current widgets layout. The animation events are not triggered when this option is set.</pre></li></pre></dd>\n\n    <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animDuration - Optional </b> {Number} Specifies the duration of the animation effect in seconds. The default value is 1. <b>Optional </b></pre> </pre></dd>\n\n    <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animDelay - Optional </b> {Number} Specifies the delay of the animation effect in seconds. The default value is 0. <b>Optional </b></pre> </pre></dd>\n\n    <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp; <b>- animCurve - Optional </b> Specifies the animation curve to be applied while playing the animation. An animation curve defines the speed of the animations at different intervals of the animation duration. Following are the available options of animation curve: </p></dd> </pre> </pre> </dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEIN:&#160;Specifies the animation to start slowly and then continues with normal speed.</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEOUT: Specifies the animation to start with normal speed and slowdown towards the end.</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEINOUT:&#160;Specifies the animation to start slowly and then continues with normal speed and then again slowdown towards the end.</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_LINEAR:&#160;This is the default value. Specifies the animation to continue with normal speed.</pre></li></pre></dd>\n\n    <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp; <b>- animCallBacks - Optional </b> It is a JS dictionary containing the events invoked by the platform during the animation life cycle. Following are the available events: </p></dd> </pre> </pre> </dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; animStarted:&#160;Invoked at the end of the animation without any parameters. Following is the signature of the event:</pre></li></pre></dd><b>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp;<b>function animStarted() </b></dd> </p></pre> </pre> </pre> </br> </pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; animEnded: Invoked at the end of the animation without any parameters. Following is the signature of the event:</pre></li></pre></dd>\n        <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp;<b>function animEnded() </b></pre> </pre> </pre>\n\n\n @Available iOS and Android platforms\n @access Write\n @usage <pre>\n//Procedure to create animation at replaceAt.<br/>\n\nvar basicConf = {id : \"buttonForOk\", text:\"OK\", isVisible:true,onClick:gotofrmNext, setEnabled:true, skin: \"btnskn\", focusSkin: \"btnfocusskn\"};<br/>\nvar layoutConf = {contentAlignment : constants.CONTENT_ALIGN_BOTTOM_RIGHT, containerWeight:100};<br/>\nvar okButton = new kony.ui.Button(basicConf, layoutConf, {});<br/>\n\n//Method to add an OK button at index 1.<br/>\nfrmHome.replaceAt(okButton, 1,animationConfig);</pre>",
                        "!type": "fn(widgetref: ?, index: ?, animationConfig: ?)"
                    },
                    "scrollDirection": {
                        "!doc": "Specifies the direction in which the FlexScrollForm should scroll. This property is supported only when the scrollingEnabled property is set to true.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "scrollToBeginning": {
                        "!doc": " This method gives you the control to scroll to the beginning of the form.\n @Available All Platforms except Mobile Web platforms\n @access Write\n @usage <pre>\n//Defining properties for a form.<br/>\nvar basicConf = {id : \"formHome\", title:\"My Form\"};<br/>\nvar layoutConf = {padding: [20,20,20,20]};<br/>\n\n//Creating a form with the properties defined above.<br/>\nvar frmScrollToBeginning= new kony.ui.Form2(basicConf, layoutConf, {} );<br/>\n\n//Method to scroll to the beginning of the form.<br/>\nfrmScrollToBeginning.scrollToBeginning();</pre>",
                        "!type": "fn()"
                    },
                    "scrollToEnd": {
                        "!doc": " This method gives you the control to scroll to the end of the form.\n @Available All Platforms except Mobile Web\n @access Write\n @usage <pre>\n//Defining properties for a form.<br/>\nvar basicConf = {id : \"formHome\", title:\"My Form\"};<br/>\nvar layoutConf = {padding: [20,20,20,20]};<br/>\n\n//Creating a form with the properties defined above.<br/>\nvar frmScrollToEnd= new kony.ui.Form2(basicConf, layoutConf, {} );<br/>\n\n//Method to scroll to the end of the form.<br/>\nfrmScrollToEnd.scrollToEnd(labelForOk);</pre>",
                        "!type": "fn()"
                    },
                    "scrollToWidget": {
                        "!doc": " This method gives you the control to scroll the form upto the position of selected widget.\n @param widgetref {Object} Reference of the name of the widget.<b>Mandatory</b>\n @Available All Platforms except Mobile Web platforms\n @access Write\n @usage <pre>\n//Procedure to create a label for OK button.<br/>\nvar basicConfLbl = {id : \"labelForOk\", text:\"OK\", isVisible:true};<br/>\nvar layoutConfLbl = {contentAlignment : constants.CONTENT_ALIGN_BOTTOM_RIGHT, containerWeight:100};<br/>\nvar labelForOk = new kony.ui.Label(basicConfLbl, layoutConfLbl, {});<br/>\n\n//Defining properties for a form.<br/>\nvar basicConf = {id : \"formHome\", title:\"My Form\"};<br/>\nvar layoutConf = {padding: [20,20,20,20]};<br/>\n\n//Creating a form with the properties defined above.<br/>\nvar frmScrollToWidget= new kony.ui.Form2(basicConf, layoutConf, {} );<br/>\n\n//Method to scroll the form upto label.<br/>\nfrmScrollToWidget.scrollToWidget(labelForOk);</pre>",
                        "!type": "fn(widgetref: ?)"
                    },
                    "scrollsToTop": {
                        "!doc": "This property enables you to scroll the Form to top on tapping a device's status bar.\n@property {Boolean}\n@Available Available on iPhone and iPad platforms.\n@access Read and Write",
                        "!type": "bool"
                    },
                    "setBackgroundImageForNavbar": {
                        "!doc": " Sets background image of form navigation bar on iOS platform.\n @param imageConfig{Object}  Specifies image source and barMetrics for the background image to be set\n @Available iPhone and iPad platformss\n @usage <pre>\nfrmHome.setBackgroundImageForNavbar({image:\"background.png\", barMetrics: constants.BAR_METRICS_COMPACT})\n</pre>",
                        "!type": "fn(imageConfig: ?)"
                    },
                    "setContentOffset": {
                        "!doc": "This method gives you the control to  offset the content from one position to another.\n@param contentOffset{Object} A JSObject with the possible keys as x, y and the values can be numbers or strings. Values can be specified in all possible units of measurement(dp, px, and %).<b>Mandatory</b>\n@param animate{Boolean} A boolean value to indicate that zooming to rectangle should happen with animation.<b>Optional</b>\n@Available iOS, Android, SPA, and Windows Platforms\n@access Write",
                        "!type": "fn(setContentOffset: ?, animate: ?)"
                    },
                    "setDefaultUnit": {
                        "!doc": " Specifies  the default unit to be used for interpretation of numbers when no qualifiers when passed to layout properties.\n @param unit {String} Specifies the position in number format. The options are kony.flex.DP, kony.flex.PX, and kony.flex.PERCENTAGE.<b>Mandatory</b>\n @Available iOS, Android, Windows, SPA platforms\n @access Write\n @usage <pre>\n//Setting default unit value.<br/>\nflexform1.setDefaultUnit(kony.flex.DP);</pre>",
                        "!type": "fn(index: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setGestureRecognizer": {
                        "!doc": "  This method allows you to set a gesture recognizer for a specified gesture for a specified widget.\n  @param gestureType{Number} Indicates the type of gesture that needs to be detected on the widget.<b>Mandatory</b>\n  @param setupParams {Array}Specifies an object that has the configuration parameters needed to setup a gesture recognizer.<b>Mandatory</b>\n  @param gestureHandler{Function} Specifies the function that needs to be executed when a gesture is recognized.<b>Mandatory</b>\n  @Available ios,Android,BlackBerry,Windows phone/Windows Kiosk,J2ME,SPA\n  @access Write\n  @usage <pre>\n //The below function will get invoked  when a gesture is recognized.\n function myTap(myWidget,gestureInfo)<br/>\n{\n alert(\" Tap Gesture detected\");\n alert(\"gestureType :\"+gestureInfo.gestureType);\n alert(\"gesturePosition :\"+gestureInfo.gesturePosition);\n //write any further logic here\n } <br/>\n\n //Setting Gesture configuration.<br/>\n local setupTblTap = {fingers:1,taps:2};//double tap gesture<br/>\n\n //To add a TAP gesture recognizer on a hbox with ID hbx1 placed on a form frm1<br/>\n var tapGesture=frm1.hbx1.setGgestureRecognizer(1,setupTblTap,myTap);</pre>",
                        "!type": "fn(gestureType: ?, setupParams: ?, gestureHandler: ?)"
                    },
                    "setHidesBackButton": {
                        "!doc": "Sets/ resets hidesBackButton property of form navbar with or without animation\n@param config{Object} specifies the hidesBackButton property value to be set and the animation option(true/false)\n@Available iPhone and iPad platformss\n@usage <pre>\nfrmHome.setHidesBackButton({hidesBackButton:a boolean, animated: a boolean})\n</pre>",
                        "!type": "fn(config: ?)"
                    },
                    "setLeftBarButtonItems": {
                        "!doc": "This method is used to set left barbutton items for form navbar with or without animation\n@param config{Object} specifies the barbutton items to be set and the animation option(true/false)\n@Available iPhone and iPad platforms\n@usage <pre>\nfrmHome.setLeftBarButtonItems({items:array of BarButtonItem objects, animated: a boolean})\n</pre>",
                        "!type": "fn(config: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setPreviewActionItems": {
                        "!doc": "Sets the preview actions for a form to be displayed when the user swipes up the preview/peek of a form.\n@param {Array} previewActionItems - An array of preview action item configs. Each config item has: 'type' - Defines the type of the preview action item whether it is individual or group item; 'title' - required, user-visible title of the preview action item; 'style' - optional, style parameter of the preview action item. The following are the constants that can be given; 'actions' - Array of preview action items; 'onPreviewAction' - Callback function that will be called when the user selects this preview action item. Applicable only for individual preview action item. It gets previewActionConfig, previewForm as params.",
                        "!type": "fn(previewActionItems: [?])"
                    },
                    "setRightBarButtonItems": {
                        "!doc": "This method is used to set right barbutton items for form navbar with or without animation\n@param config{Object} specifies the barbutton items to be set and the animation option(true/false)\n@Available iPhone and iPad platforms\n@usage <pre>\nfrmHome.setRightBarButtonItems({items:array of BarButtonItem objects, animated: a boolean})\n</pre>",
                        "!type": "fn(config: ?)"
                    },
                    "setTitleBarLeftSideButton": {
                        "!doc": "@deprecated This method enables you to set the properties for a left-side button of a titlebar.\n@Available iPhone,iPad\n@access Write",
                        "!type": "fn()"
                    },
                    "setTitleBarLeftSideButtonSkin": {
                        "!doc": "     @deprecated This method enables you to set the skin properties for a left-side button of a titlebar.\n     @Available iPhone,iPad\n     @access Write\n     @usage <pre>\n\t //Defining properties for a form.<br/>\n    var basicConf = {id : \"formHome\", title:\"My Form\"};<br/>\n    var layoutConf = {padding: [20,20,20,20]};<br/>\n\n    //Creating a form with the properties defined above.<br/>\n    var frmTitleBar= new kony.ui.Form2(basicConf, layoutConf, {} );<br/>\n\n    //Method to set the properties for a left-side button of a titlebar.<br/>\n    frmTitleBar.setTitleBarLeftSideButtonSkin();</pre>",
                        "!type": "fn(text: ?, skin: ?, callBack: ?)"
                    },
                    "setTitleBarRightSideButton": {
                        "!doc": "@deprecated This method enables you to set the properties for a right-side button of a titlebar.\n@Available iPhone,iPad\n@access Write",
                        "!type": "fn()"
                    },
                    "setTitleBarRightSideButtonSkin": {
                        "!doc": "     @deprecated This method enables you to set the skin properties for a right-side button of a titlebar.\n     @Available iPhone,iPad\n     @access Write\n     @usage <pre>\n\t //Defining properties for a form.<br/>\n    var basicConf = {id : \"formHome\", title:\"My Form\"};<br/>\n    var layoutConf = {padding: [20,20,20,20]};<br/>\n\n    //Creating a form with the properties defined above.<br/>\n    var frmTitleBar= new kony.ui.Form2(basicConf, layoutConf, {} );<br/>\n\n    //Method to set the properties for a right-side button of a titlebar.<br/>\n    frmTitleBar.setTitleBarRightSideButtonSkin();</pre>",
                        "!type": "fn(text: ?, skin: ?, callBack: ?)"
                    },
                    "setTitleBarSkin": {
                        "!doc": "    This method enables you to set the skin for a titlebar of a form.\n     @Available iPhone,iPad\n     @access Write\n     @usage <pre>\n\t //Defining properties for a form.<br/>\n\tvar basicConf = {id : \"formHome\", title:\"My Form\"};<br/>\n    var layoutConf = {padding: [20,20,20,20]};<br/>\n\n    //Creating a form with the properties defined above.<br/>\n    var frmTitleBar= new kony.ui.Form2(basicConf, layoutConf, {} );<br/>\n\n    //Method to set the skin properties for a titlebar.<br/>\n    frmTitleBar.setTitleBarSkin();</pre>",
                        "!type": "fn()"
                    },
                    "setTitleVerticalPositionAdjustment": {
                        "!doc": " Sets vertical position adjustment of title on form navbar.\n @param adjustmentConfig{Object} Specifies adjustment value and barMetrics on which adjustment should be applied\n @Available iPhone and iPad platformss\n @usage <pre>\n frmHome.getTitleVerticalPositionAdjustment({adjustment: 10, barMetrics: constants.BAR_METRICS_COMPACT})\n</pre>",
                        "!type": "fn(adjustmentConfig: ?)"
                    },
                    "setZoomScale": {
                        "!doc": "This method enables you the set zoom scale with an option to animation.\n@param scale{Number} A  floating point value that specifies the current scale factor applied to the FlexForm content.<b>Mandatory</b>\n@param animate{Boolean} A boolean value to indicate that zooming to rectangle should happen with animation.<b>Optional</b>\n@Available Available on iOS Platform\n@access Write",
                        "!type": "fn(scale: ?, animate: ?)"
                    },
                    "show": {
                        "!doc": " This method is used to display the form on the screen.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining properties of a form.<br/>\nvar basicConf = {id : \"formHome\", title:\"Form Home for FORM\",addWidgets:addwidgetsfrmNew, skin:\"frmskn\"};<br/>\nvar layoutConf = {contentAlignment : constants.CONTENT_ALIGN_TOP_CENTER, containerWeight:100};<br/>\nvar pspConf = {titleBar: true, titleBarSkin: \"skntitlebar\"};<br/>\n\n//Creating a form using the properties defined above.<br/>\nvar myForm = new kony.ui.Form2(basicConf,layoutConf,pspConf)<br/>\n\n//Showing a form using show method.<br/>\nmyForm.show(); </pre>",
                        "!type": "fn()"
                    },
                    "showActionBar": {
                        "!doc": "Specifies if the action bar should be displayed.\n@property {Boolean}\n@Available Android,AndroidTablet\n@access Read and Write",
                        "!type": "bool"
                    },
                    "showActionBarIcon": {
                        "!doc": "Specifies the icon to be displayed for the action bar.\n@property {Boolean}\n@Available Android,AndroidTablet\n@access Read and Write",
                        "!type": "bool"
                    },
                    "showBottomActionBar": {
                        "!doc": "Specifies if the bottom action bar must be displayed.\n@property {Boolean}\n@Available Available on BlackBerry10 platform.\n@access Read and Write",
                        "!type": "bool"
                    },
                    "showTitleBar": {
                        "!doc": "     This method gives you the control to show a titlebar within a form.\n     @Available iPhone,iPad\n     @access Write\n     @usage <pre>\n\t //Defining properties for a form.<br/>\n\tvar basicConf = {id : \"formHome\", title:\"My Form\"};<br/>\n    var layoutConf = {padding: [20,20,20,20]};<br/>\n\n    //Creating a form with the properties defined above.<br/>\n    var frmTitleBar= new kony.ui.Form2(basicConf, layoutConf, {} );<br/>\n\n    //Method to show a titlebar.<br/>\n    frmTitleBar.showTitleBar();</pre>",
                        "!type": "fn()"
                    },
                    "skin": {
                        "!doc": "Specifies a background skin for form widget.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "statusBarColor": {
                        "!doc": "The statusBarColor property helps you set the color for a device's status bar.\n@property {String}\n@Available Android and Windows\n@access Read and Write",
                        "!type": "string"
                    },
                    "statusBarForegroundColor": {
                        "!doc": "The statusBarForegroundColor property helps you set the foreground color of the status bar, such as color for any text or icon on the status bar.\n@property {String}\n@Available Windows\n@access Read and Write",
                        "!type": "string"
                    },
                    "statusBarHidden": {
                        "!doc": "Specifies the status of the status bar.\n@property {String}\n@Available This property is available on  Android/Android tablet only\n@access Read and Write",
                        "!type": "string"
                    },
                    "statusBarStyle": {
                        "!doc": "This property enables you to set the status bar style. The options are constants.STATUS_BAR_STYLE_DEFAULT or constants.STATUS_BAR_STYLE_LIGHT_CONTENT.\n@property {String}\n@Available Available on iOS platform.\n@access Read and Write",
                        "!type": "string"
                    },
                    "systemUiConfig": {
                        "!doc": "    Controls the behavior of the status and navigation bars.\n     @property {Number}\n     @Available Android\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the systemUiConfig property on an existing widget<br/>\n\t Form1.systemUiConfig = constants.IMMERSIVE_HIDE_NAVIGATION_BAR;</pre>",
                        "!type": "number"
                    },
                    "title": {
                        "!doc": "Specifies the form title.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "titleBar": {
                        "!doc": "Specifies the title bar that must be displayed on the form.\n@property {Boolean}\n@Available iPad,iPhone,Android,BlackBerry,J2ME\n@access Read and Write",
                        "!type": "bool"
                    },
                    "titleBarAttributes": {
                        "!doc": "This property contains data that supports Application bar functionality in iOS.\n@property {Object}\n@Available Available on iPhone and iPad platforms.\n@access Read and Write"
                    },
                    "titleBarConfig": {
                        "!doc": "@deprecated Specifies the position of the title bar of the form.\n@property {Object}\n@Available iPad,iPhone\n@access Read and Write"
                    },
                    "titleBarSkin": {
                        "!doc": "Specifies the skin to be applied to the titleBar of the form.\n@property {String}\n@Available iPhone,Android,BlackBerry,J2ME\n@access Read and Write",
                        "!type": "string"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "type": {
                        "!doc": "Specifies the possible types of the form.\n@property {Number}\n@Available All Platforms\n@access Read",
                        "!type": "number"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "verticalScrollIndicator": {
                        "!doc": "Specifies whether the scroll indicator must be shown or not in the vertical direction.\n@property {Boolean}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "widgetToZoom": {
                        "!doc": "An event callback is invoked by the platform to return one of the child widgets of source to zoom. The returning source itself makes the complete scroll container zoomable. If a null value is returned then the container does not zoom. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the zooming has started.<b>Mandatory</b>\n@property {Event}\n@Available Available on iOS platform\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "widgets": {
                        "!doc": " This method returns an array of the widget references which are direct children of Form.\n @returns {Array} This method returns Read only array of widget references. Modifying the array and changing the position of widgets in this array doesn't reflect in the Form hierarchy, however you can get handle to the widgets through this array and modify the widgets through widget level methods as exposed by individual widgets.\n @Available All Platforms\n @access Read\n @usage <pre>\n//Defining properties of a form.<br/>\nvar basicConf = {id : \"formHome\", title:\"Form Home for FORM\",addWidgets:addwidgetsfrmNew, skin:\"frmskn\"};<br/>\nvar layoutConf = {contentAlignment : constants.CONTENT_ALIGN_TOP_CENTER, containerWeight:100};<br/>\nvar pspConf = {titleBar: true, titleBarSkin: \"skntitlebar\"};<br/>\n\n//Creating a form using the properties defined above.<br/>\nvar myForm = new kony.ui.Form2(basicConf,layoutConf,pspConf)<br/>\n\n//Procedure to create an OK button.<br/>\nvar basicConf = {id : \"buttonForOk\", text:\"OK\", isVisible:true,onClick:gotofrmNext, setEnabled:true, skin: \"btnskn\", focusSkin: \"btnfocusskn\"};<br/>\nvar layoutConf = {contentAlignment : constants.CONTENT_ALIGN_BOTTOM_RIGHT, containerWeight:100};<br/>\nvar okButton = new kony.ui.Button(basicConf, layoutConf, {});<br/>\n\n//Method to return myForm widgets.<br/>\nmyForm.widgets();</pre>",
                        "!type": "fn() -> [?]"
                    },
                    "width": {
                        "!doc": "Specifies the width of the container.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is in front of the one with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zoomScale": {
                        "!doc": "Specifies the current scale factor applied to the form content.\n@property {Number}\n@Available This property is available on iOS platform\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "HorizontalImageStrip": {
                "!doc": "Creates a new HorizontalImageStrip object.\n@class kony.ui.HorizontalImageStrip\n@returns {kony.ui.HorizontalImageStrip}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.HorizontalImageStrip",
                "prototype": {
                    "addAll": {
                        "!doc": " This method allows you to add new images to the HorizontalImageStrip. The new images are appended to the existing images.\n @param arrayofdata{Array} Specifies array of objects having image property.<b>Mandatory</b>\n @param imageurlproperty{String} Specifies the url in the JSObject passed in the first argument whose value must be considered for the image.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for HorizontalImagestrip <br/>\nvar hISBasic={id:\"hIS\",skin:\"hISkn\", focusSkin:\"hISknFocus\", isVisible:true, selectedIndex:1, imageWhileDownloading:\"img.png\", imageWhenFailed:\"img3.png\", spaceBetweenImages:20,data:[[{\"imagekey\":\"image1.png\"}, {\"imagekey\":\"image2.png\"}, \"imagekey\"]],viewType:constants.HORIZONTAL_IMAGESTRIP_VIEW_TYPE_COVERFLOW};<br/>\nvar hISLayout={padding:[5,5,5,5], margin:[5,5,5,5], paddingInPixel:true, marginInPixel:true, referenceWidth:100, referenceHeight:100, containerWeight:100};<br/>\nvar hISPSP={};<br/>\n\n//Creating the Horizontal Image strip.<br/>\nvar hIS=new kony.ui.HorizontalImageStrip(hISBasic, hISLayout, hISPSP);<br/>\n\n//Adding new new images to the HorizontalImagestrip by addAll method, We can use external URL images or the images inside resources folder.<br/>\nhIS.addAll( [{ imageurl: \"http://chromeactions.com/i/3d-like-box.png\" },{ imageurl: \"http://www.unlockiphoneinstantly.com/wp-content/themes/unlockiphone/images/check-box.jpg\" }],\"imageurl\");</pre>",
                        "!type": "fn(arrayofdata: ?, imageurlproperty: ?)"
                    },
                    "addDataAt": {
                        "!doc": " This method allows you to add/insert a new image at a given index.\n @param imagedata{Object} Specifies the JSobject having image property.<b>Mandatory</b>\n @param index{Number} Specifies the position in number format.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for HorizontalImagestrip.<br/>\nvar hISBasic={id:\"hIS\",skin:\"hISkn\", focusSkin:\"hISknFocus\", isVisible:true, selectedIndex:1, imageWhileDownloading:\"img.png\", imageWhenFailed:\"img3.png\", spaceBetweenImages:20,data:[[{\"imagekey\":\"image1.png\"}, {\"imagekey\":\"image2.png\"}, \"imagekey\"]],viewType:constants.HORIZONTAL_IMAGESTRIP_VIEW_TYPE_COVERFLOW};<br/>\nvar hISLayout={padding:[5,5,5,5], margin:[5,5,5,5], paddingInPixel:true, marginInPixel:true, referenceWidth:100, referenceHeight:100, containerWeight:100};<br/>\nvar hISPSP={};<br/>\n\n//Creating the HorizontalImagestrip.<br/>\nvar hIS=new kony.ui.HorizontalImageStrip(hISBasic, hISLayout, hISPSP);<br/>\n\n//Adding new new image at a 1st index by addDataAt method.<br/>\nhIS.addDataAt({ imageurl: \"http://chromeactions.com/i/3d-like-box.png\" }, 1);</pre>",
                        "!type": "fn(imagedata: ?, index: ?)"
                    },
                    "containerWeight": {
                        "!doc": "The percentage of width to be allocated by its parent widget. The parent's widget space is distributed to its child widgets based on this weight factor. All  its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "data": {
                        "!doc": "Specifies the JS Object which represents the images to be rendered in HorizontalImageStrip.\n@property {Array}\n@Available All Platforms\n@access Read and write",
                        "!type": "[?]"
                    },
                    "focusSkin": {
                        "!doc": "Specifies the look and feel of the HorizontalImageStrip widget when in focus.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "hoverSkin": {
                        "!doc": "Specifies the look and feel of a widget when the cursor hovers on the widget.\n@property {String}\n@Available windows 8,Desktop Web\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the Property to set widget visibility on the form.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "onselection": {
                        "!doc": "An event callback that is invoked by the platform when an Image is selected in HorizontalImageStrip.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "padding": {
                        "!doc": "specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "referenceHeight": {
                        "!doc": "Specifies the reference image height in pixels. These are device independent Pixels specified against 163 dpi.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "referenceWidth": {
                        "!doc": "Specifies the reference image width in pixels. These are device independent Pixels specified against 163 dpi.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeAll": {
                        "!doc": " This method is used to remove all the images in the HorizontalImageStrip2.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for HorizontalImageStrip.<br/>\nvar hISBasic={id:\"hIS\",skin:\"hISkn\", focusSkin:\"hISknFocus\", isVisible:true, selectedIndex:1, imageWhileDownloading:\"img.png\", imageWhenFailed:\"img3.png\", spaceBetweenImages:20,data:[[{\"imagekey\":\"image1.png\"}, {\"imagekey\":\"image2.png\"}, \"imagekey\"]],viewType:constants.HORIZONTAL_IMAGESTRIP_VIEW_TYPE_COVERFLOW};<br/>\nvar hISLayout={padding:[5,5,5,5], margin:[5,5,5,5], paddingInPixel:true, marginInPixel:true, referenceWidth:100, referenceHeight:100, containerWeight:100};<br/>\nvar hISPSP={};<br/>\n\n//Creating the HorizontalImageStrip2.<br/>\nvar hIS=new kony.ui.HorizontalImageStrip(hISBasic, hISLayout, hISPSP);<br/>\n\n//Removing all the images inside the Horizontal Image strip using removeAll method.<br/>\nhIS.removeAll();</pre>",
                        "!type": "fn()"
                    },
                    "removeAt": {
                        "!doc": " This method removes the images at the given index in the HorizontalImageStrip.\n @param index {Number} Specifies the position in number format.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for HorizontalImagestrip.<br/>\nvar hISBasic={id:\"hIS\",skin:\"hISkn\", focusSkin:\"hISknFocus\", isVisible:true, selectedIndex:1, imageWhileDownloading:\"img.png\", imageWhenFailed:\"img3.png\", spaceBetweenImages:20,data:[[{\"imagekey\":\"image1.png\"}, {\"imagekey\":\"image2.png\"}, \"imagekey\"]],viewType:constants.HORIZONTAL_IMAGESTRIP_VIEW_TYPE_COVERFLOW};<br/>\nvar hISLayout={padding:[5,5,5,5], margin:[5,5,5,5], paddingInPixel:true, marginInPixel:true, referenceWidth:100, referenceHeight:100, containerWeight:100};<br/>\nvar hISPSP={};<br/>\n\n//Creating the HorizontalImageStrip.<br/>\nvar hIS=new kony.ui.HorizontalImageStrip(hISBasic, hISLayout, hISPSP);<br/>\n\n//Removing the image  at index 1 using removeAt method.<br/>\nhIS.removeAt(1);</pre>",
                        "!type": "fn(index: ?)"
                    },
                    "selectedIndex": {
                        "!doc": "Indicates the currently selected row in the HorizontalImageStrip. The index is with respect to the order in which data is set with data property.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "selectedItem": {
                        "!doc": "Returns the selected data object (input array) corresponding to the selected image of the HorizontalImageStrip.\n@property {Object}\n@Available All Platforms\n@access Read"
                    },
                    "setData": {
                        "!doc": " This method allows you to set new images to the HorizontalImageStrip.\n @param arrayofdata{Array} Specifies array of objects having image property.<b>Mandatory</b>\n @param imageurlproperty{String} Specifies the url in the JSObject passed in the first argument whose value must be considered for the image.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for HorizontalImageStrip.<br/>\nvar hISBasic={id:\"hIS\",skin:\"hISkn\",focusSkin:\"hISknFocus\", isVisible:true, selectedIndex:1, imageWhileDownloading:\"img.png\", imageWhenFailed:\"img3.png\", spaceBetweenImages:20, data:[[{\"imagekey\":\"image1.png\"}, {\"imagekey\":\"image2.png\"}, \"imagekey\"]], viewType:constants.HORIZONTAL_IMAGESTRIP_VIEW_TYPE_COVERFLOW};<br/>\nvar hISLayout={padding:[5,5,5,5], margin:[5,5,5,5], paddingInPixel:true, marginInPixel:true, referenceWidth:100, referenceHeight:100, containerWeight:100};<br/>\nvar hISPSP={};<br/>\n\n//Creating the HorizontalImageStrip.<br/>\nvar hIS=new kony.ui.HorizontalImageStrip(hISBasic, hISLayout, hISPSP);<br/>\n\n//Replacing existing images with the new images using setData method,We can use external URL images or the images inside resources folder.<br/>\nhIS.setData([{ imageurl: \"http://chromeactions.com/i/3d-like-box.png\" },\n{ imageurl: \"http://chromeactions.com/i/3d-like-box.png1\" },\n{ imageurl: \"http://www.unlockiphoneinstantly.com/wp-content/themes/unlockiphone/images/check-box.jpg\" },\n{ imageurl: \"http://chromeactions.com/i/3d-like-box.png1\" },\n{ imageurl: \"image2.png\"}],\"imageurl\"\n);</pre>",
                        "!type": "fn(arrayofdata: ?, imageurlproperty: ?)"
                    },
                    "setDataAt": {
                        "!doc": " This method allows you to set a new image at a given index.\n @param imagedata{Object} Specifies JSObject having image property.<b>Mandatory</b>\n @param index{Number} Specifies the position in number format.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for HorizontalImagestrip.<br/>\nvar hISBasic={id:\"hIS\", skin:\"hISkn\", focusSkin:\"hISknFocus\", isVisible:true, selectedIndex:1, imageWhileDownloading:\"img.png\", imageWhenFailed:\"img3.png\", spaceBetweenImages:20, data:[[{\"imagekey\":\"image1.png\"}, {\"imagekey\":\"image2.png\"}, \"imagekey\"]], viewType:constants.HORIZONTAL_IMAGESTRIP_VIEW_TYPE_COVERFLOW};<br/>\nvar hISLayout={padding:[5,5,5,5], margin:[5,5,5,5], paddingInPixel:true, marginInPixel:true, referenceWidth:100, referenceHeight:100, containerWeight:100};<br/>\nvar hISPSP={};<br/>\n\n//Creating the HorizontalImageStrip.<br/>\nvar hIS=new kony.ui.HorizontalImageStrip(hISBasic, hISLayout, hISPSP);<br/>\n\n//set a new image at a 1st index by setDataAt method<br/>\nhIS.setDataAt({ imageurl: \"http://chromeactions.com/i/3d-like-box.png\" }, 1);</pre>",
                        "!type": "fn(imagedata: ?, index: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms.\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "skin": {
                        "!doc": "Specifies the look and feel of the HorizontalImageStrip when not in focus.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "toolTip": {
                        "!doc": "Specifies the hint text when the cursor hovers over a widget.\n@property {String}\n@Available windows 8\n@access Read and Write",
                        "!type": "string"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "viewConfig": {
                        "!doc": "Specifies the view configuration for different viewtypes in the HorizontalImagestrip.\n@property {Object}\n@Available All Platforms except Mobile Web platforms.\n@access Read and write"
                    }
                }
            },
            "HorizontalImageStrip2": {
                "!doc": "Creates a new HorizontalImageStrip2 object.\n@class kony.ui.HorizontalImageStrip2\n@returns {kony.ui.HorizontalImageStrip2}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.HorizontalImageStrip2",
                "prototype": {
                    "accessibilityConfig": {
                        "!doc": "Specifies the accessibility configuration property for the widget.\n@property {Object}\n@Available iPhone, Android, SPA-iPhone, and SPA-Android Platforms\n@access Read and Write\n@usage <pre>\n   accessibilityConfig =  {\n       \"a11yHidden\": false,\n       \"a11yValue\": \"Your text goes here\",\n       \"a11yLabel\": \"Your text goes here\",\n       \"a11yHint\": \"Your text goes here\"\n   }</pre>"
                    },
                    "addAll": {
                        "!doc": " This method allows you to add new images to the HorizontalImageStrip2. The new images are appended to the existing images.\n @param arrayofdata{Array} Specifies array of objects having image property.<b>Mandatory</b>\n @param imageurlproperty{String} Specifies the url in the JSObject passed in the first argument whose value must be considered for the image.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for HorizontalImagestrip <br/>\nvar hISBasic={id:\"hIS\",skin:\"hISkn\", focusSkin:\"hISknFocus\", isVisible:true, selectedIndex:1, imageWhileDownloading:\"img.png\", imageWhenFailed:\"img3.png\", spaceBetweenImages:20,data:[[{\"imagekey\":\"image1.png\"}, {\"imagekey\":\"image2.png\"}, \"imagekey\"]],viewType:constants.HORIZONTAL_IMAGESTRIP_VIEW_TYPE_COVERFLOW};<br/>\nvar hISLayout={padding:[5,5,5,5], margin:[5,5,5,5], paddingInPixel:true, marginInPixel:true, referenceWidth:100, referenceHeight:100, containerWeight:100};<br/>\nvar hISPSP={};<br/>\n\n//Creating the Horizontal Image strip.<br/>\nvar hIS=new kony.ui.HorizontalImageStrip2(hISBasic, hISLayout, hISPSP);<br/>\n\n//Adding new new images to the HorizontalImagestrip by addAll method, We can use external URL images or the images inside resources folder.<br/>\nhIS.addAll( [{ imageurl: \"http://chromeactions.com/i/3d-like-box.png\" },{ imageurl: \"http://www.unlockiphoneinstantly.com/wp-content/themes/unlockiphone/images/check-box.jpg\" }],\"imageurl\");</pre>",
                        "!type": "fn(arrayofdata: ?, imageurlproperty: ?)"
                    },
                    "addDataAt": {
                        "!doc": " This method allows you to add/insert a new image at a given index.\n @param imagedata{Object} Specifies the JSobject having image property.<b>Mandatory</b>\n @param index{Number} Specifies the position in number format.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for HorizontalImagestrip2.<br/>\nvar hISBasic={id:\"hIS\",skin:\"hISkn\", focusSkin:\"hISknFocus\", isVisible:true, selectedIndex:1, imageWhileDownloading:\"img.png\", imageWhenFailed:\"img3.png\", spaceBetweenImages:20,data:[[{\"imagekey\":\"image1.png\"}, {\"imagekey\":\"image2.png\"}, \"imagekey\"]],viewType:constants.HORIZONTAL_IMAGESTRIP_VIEW_TYPE_COVERFLOW};<br/>\nvar hISLayout={padding:[5,5,5,5], margin:[5,5,5,5], paddingInPixel:true, marginInPixel:true, referenceWidth:100, referenceHeight:100, containerWeight:100};<br/>\nvar hISPSP={};<br/>\n\n//Creating the HorizontalImagestrip2.<br/>\nvar hIS=new kony.ui.HorizontalImageStrip2(hISBasic, hISLayout, hISPSP);<br/>\n\n//Adding new new image at a 1st index by addDataAt method.<br/>\nhIS.addDataAt({ imageurl: \"http://chromeactions.com/i/3d-like-box.png\" }, 1);</pre>",
                        "!type": "fn(imagedata: ?, index: ?)"
                    },
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "containerWeight": {
                        "!doc": "The percentage of width to be allocated by its parent widget. The parent's widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "createAnimation": {
                        "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                        "!type": "fn(animationDef: ?)"
                    },
                    "data": {
                        "!doc": "Specifies the JS Object which represents the images to be rendered in HorizontalImageStrip.\n@property {Array}\n@Available All Platforms\n@access Read and write",
                        "!type": "[?]"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "focusSkin": {
                        "!doc": "Specifies the look and feel of the HorizontalImageStrip widget when in focus.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "hoverSkin": {
                        "!doc": "Specifies the look and feel of a widget when the cursor hovers on the widget.\n@property {String}\n@Available windows 8,Desktop Web\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the Property to set widget visibility on the form.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms except Mobile Web (basic).\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onselection": {
                        "!doc": "An event callback that is invoked by the platform when an Image is selected in HorizontalImageStrip.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "padding": {
                        "!doc": "specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms except Mobile Web (basic).\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "referenceHeight": {
                        "!doc": "Specifies the reference image height in pixels. These are device independent Pixels specified against 163 dpi.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "referenceWidth": {
                        "!doc": "Specifies the reference image width in pixels. These are device independent Pixels specified against 163 dpi.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeAll": {
                        "!doc": " This method is used to remove all the images in the HorizontalImageStrip2.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for HorizontalImageStrip2.<br/>\nvar hISBasic={id:\"hIS\",skin:\"hISkn\", focusSkin:\"hISknFocus\", isVisible:true, selectedIndex:1, imageWhileDownloading:\"img.png\", imageWhenFailed:\"img3.png\", spaceBetweenImages:20,data:[[{\"imagekey\":\"image1.png\"}, {\"imagekey\":\"image2.png\"}, \"imagekey\"]],viewType:constants.HORIZONTAL_IMAGESTRIP_VIEW_TYPE_COVERFLOW};<br/>\nvar hISLayout={padding:[5,5,5,5], margin:[5,5,5,5], paddingInPixel:true, marginInPixel:true, referenceWidth:100, referenceHeight:100, containerWeight:100};<br/>\nvar hISPSP={};<br/>\n\n//Creating the HorizontalImageStrip2.<br/>\nvar hIS=new kony.ui.HorizontalImageStrip2(hISBasic, hISLayout, hISPSP);<br/>\n\n//Removing all the images inside the Horizontal Image strip using removeAll method.<br/>\nhIS.removeAll();</pre>",
                        "!type": "fn()"
                    },
                    "removeAt": {
                        "!doc": " This method removes the images at the given index in the HorizontalImageStrip2.\n @param index {Number} Specifies the position in number format.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for HorizontalImagestrip2.<br/>\nvar hISBasic={id:\"hIS\",skin:\"hISkn\", focusSkin:\"hISknFocus\", isVisible:true, selectedIndex:1, imageWhileDownloading:\"img.png\", imageWhenFailed:\"img3.png\", spaceBetweenImages:20,data:[[{\"imagekey\":\"image1.png\"}, {\"imagekey\":\"image2.png\"}, \"imagekey\"]],viewType:constants.HORIZONTAL_IMAGESTRIP_VIEW_TYPE_COVERFLOW};<br/>\nvar hISLayout={padding:[5,5,5,5], margin:[5,5,5,5], paddingInPixel:true, marginInPixel:true, referenceWidth:100, referenceHeight:100, containerWeight:100};<br/>\nvar hISPSP={};<br/>\n\n//Creating the HorizontalImageStrip2.<br/>\nvar hIS=new kony.ui.HorizontalImageStrip2(hISBasic, hISLayout, hISPSP);<br/>\n\n//Removing the image  at index 1 using removeAt method.<br/>\nhIS.removeAt(1);</pre>",
                        "!type": "fn(index: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "selectedIndex": {
                        "!doc": "Indicates the currently selected row in the HorizontalImageStrip. The index is with respect to the order in which data is set with data property.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "selectedItem": {
                        "!doc": "Returns the selected data object (input array) corresponding to the selected image of the HorizontalImageStrip.\n@property {Object}\n@Available All Platforms\n@access Read"
                    },
                    "setData": {
                        "!doc": " This method allows you to set new images to the HorizontalImageStrip2.\n @param arrayofdata{Array} Specifies array of objects having image property.<b>Mandatory</b>\n @param imageurlproperty{String} Specifies the url in the JSObject passed in the first argument whose value must be considered for the image.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for HorizontalImageStrip2.<br/>\nvar hISBasic={id:\"hIS\",skin:\"hISkn\",focusSkin:\"hISknFocus\", isVisible:true, selectedIndex:1, imageWhileDownloading:\"img.png\", imageWhenFailed:\"img3.png\", spaceBetweenImages:20, data:[[{\"imagekey\":\"image1.png\"}, {\"imagekey\":\"image2.png\"}, \"imagekey\"]], viewType:constants.HORIZONTAL_IMAGESTRIP_VIEW_TYPE_COVERFLOW};<br/>\nvar hISLayout={padding:[5,5,5,5], margin:[5,5,5,5], paddingInPixel:true, marginInPixel:true, referenceWidth:100, referenceHeight:100, containerWeight:100};<br/>\nvar hISPSP={};<br/>\n\n//Creating the HorizontalImageStrip.<br/>\nvar hIS=new kony.ui.HorizontalImageStrip2(hISBasic, hISLayout, hISPSP);<br/>\n\n//Replacing existing images with the new images using setData method,We can use external URL images or the images inside resources folder.<br/>\nhIS.setData([{ imageurl: \"http://chromeactions.com/i/3d-like-box.png\" },\n{ imageurl: \"http://chromeactions.com/i/3d-like-box.png1\" },\n{ imageurl: \"http://www.unlockiphoneinstantly.com/wp-content/themes/unlockiphone/images/check-box.jpg\" },\n{ imageurl: \"http://chromeactions.com/i/3d-like-box.png1\" },\n{ imageurl: \"image2.png\"}],\"imageurl\"\n);</pre>",
                        "!type": "fn(arrayofdata: ?, imageurlproperty: ?)"
                    },
                    "setDataAt": {
                        "!doc": " This method allows you to set a new image at a given index.\n @param imagedata{Object} Specifies JSObject having image property.<b>Mandatory</b>\n @param index{Number} Specifies the position in number format.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for HorizontalImagestrip2.<br/>\nvar hISBasic={id:\"hIS\", skin:\"hISkn\", focusSkin:\"hISknFocus\", isVisible:true, selectedIndex:1, imageWhileDownloading:\"img.png\", imageWhenFailed:\"img3.png\", spaceBetweenImages:20, data:[[{\"imagekey\":\"image1.png\"}, {\"imagekey\":\"image2.png\"}, \"imagekey\"]], viewType:constants.HORIZONTAL_IMAGESTRIP_VIEW_TYPE_COVERFLOW};<br/>\nvar hISLayout={padding:[5,5,5,5], margin:[5,5,5,5], paddingInPixel:true, marginInPixel:true, referenceWidth:100, referenceHeight:100, containerWeight:100};<br/>\nvar hISPSP={};<br/>\n\n//Creating the HorizontalImageStrip.<br/>\nvar hIS=new kony.ui.HorizontalImageStrip2(hISBasic, hISLayout, hISPSP);<br/>\n\n//set a new image at a 1st index by setDataAt method<br/>\nhIS.setDataAt({ imageurl: \"http://chromeactions.com/i/3d-like-box.png\" }, 1);</pre>",
                        "!type": "fn(imagedata: ?, index: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms.\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "skin": {
                        "!doc": "Specifies the look and feel of the HorizontalImageStrip when not in focus.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "toolTip": {
                        "!doc": "Specifies the hint text when the cursor hovers over a widget.\n@property {String}\n@Available windows 8\n@access Read and Write",
                        "!type": "string"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "viewConfig": {
                        "!doc": "Specifies the view configuration properties such as projectionAngle, imageItemRotationAngle, and isCircular as applicable when the viewType is set as HORIZONTAL_IMAGESTRIP_VIEW_TYPE_COVERFLOW. The properties Fling Velocity, Flip Interval, and Scroll Distance are configurable properties when the viewType is set as HORIZONTAL_IMAGESTRIP_VIEW_TYPE_SLOTVIEW. The property enableScrollBounce is applicable when viewType is set as HORIZONTAL_IMAGESTRIP_VIEW_TYPE_STRIPVIEW\n@property {Object}\n@Available Available on All platforms except Server side Mobile Web platform.\n@access Read and Write"
                    }
                }
            },
            "Image": {
                "!doc": "Creates a new Image object.\n@class kony.ui.Image\n@returns {kony.ui.Image}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.Image",
                "prototype": {
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "base64": {
                        "!doc": "Returns the base64 encoded string of the image raw bytes.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "compress": {
                        "!doc": "Compresses an image by the specified compression ratio.\n@param compressionRatio - A floating point value  that specifies the amount of compression to use.\n@Available iOS, Android, Windows, SPA\n@access Write",
                        "!type": "fn()"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget widget. The parent widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "contextMenu": {
                        "!doc": "Specifies the array of menu items that are displayed when the Image is selected.\n@property {Array}\n@Available Desktop Web\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "createAnimation": {
                        "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                        "!type": "fn(animationDef: ?)"
                    },
                    "cropToRect": {
                        "!doc": "This method crops the bitmap contained by the Image widget to the size of the input rectangle.\n@param array - An array of integers specifying the cropping rectangle in the order (x,y,width,height).\n@Available iOS, Android, Windows, SPA\n@access Write",
                        "!type": "fn()"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "getBadge": {
                        "!doc": " This method enables you to read the badge value (if any) attached to the given widget.\n @returns String - Reference to the gesture is returned\n @Available iPhone,iPad\n @access Write\n @usage <pre>\n//To get a badge value on a image with id img1 placed on a form frm1, use the following code:<br/>\nvar badgeVal = frm1.img1.getBadge();<br/>\nalert(\"badge value is::\"+badgeVal);</pre>",
                        "!type": "fn()"
                    },
                    "getImageAsRawBytes": {
                        "!doc": "Retrieves the image height as an integer.\n@param encodingFormat - A constant from the Image Format Constants in the kony.image namespace that specifies the format of the bitmap image.\n@returns - The Image widget's bitmap in RawBytes format if an image format is specified. If not, this method returns the RawBytes data in a platform-specific formats.\n@Available iOS, Android, Windows, SPA\n@access Write",
                        "!type": "fn()"
                    },
                    "getImageHeight": {
                        "!doc": "Retrieves the image height as an integer.\n@returns - An integer that specifies the height of the Image.\n@Available iOS, Android, Windows, SPA\n@access Write",
                        "!type": "fn()"
                    },
                    "getImageWidth": {
                        "!doc": "Retrieves the image width as an integer.\n@returns - An integer that specifies the widget of the Image.\n@Available iOS, Android, Windows, SPA\n@access Write",
                        "!type": "fn()"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "imageScaleMode": {
                        "!doc": "Specifies how the rendered image’s width and height are identified when those of the source image varies from the Image widget itself.\n@property {Number}\n@Available All Platforms except Mobile Web, Symbian and SPA.\n@access Read and Write",
                        "!type": "number"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the visibility of the widget.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "padding": {
                        "!doc": "Specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "rawBytes": {
                        "!doc": "Represents the images raw bytes.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "scale": {
                        "!doc": "Scales the bitmap in the current Image widget to a larger or smaller size.\n@param scaleFactor - A floating point number that is used to scale the bitmap to a larger or smaller size.\n@Available iOS, Android, Windows, SPA\n@access Write",
                        "!type": "fn()"
                    },
                    "setBadge": {
                        "!doc": " This method enables you to set the badge value to the given widget at the upper, right corner of the widget.\n @param badgeText{String} Specifies the Text value that appears within the badge.<b>Mandatory</b>\n @param skin{String}Specifies the background color for the badge.\n @Available iPhone,iPad\n @access Write\n @usage <pre>\n//To set a badge value with skin \"badgeSkin\" on a image with id img1 placed on a form frm1, use the following code:<br/>\nfrm1.img1.setBadge(\"2\",\"badgeSkin\");</pre>",
                        "!type": "fn(badgeText: ?, skin: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "skin": {
                        "!doc": "Specifies a background skin for Image widget.\n@property {Boolean}\n@Available BlackBerry,J2ME,Windows phone7,Windows phone6.x,Symbian,iPhone\n@access Read and Write",
                        "!type": "bool"
                    },
                    "src": {
                        "!doc": "Specifies the source of the image to be displayed. You can specify an image from the resources folder or specify a URL of the image.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "toolTip": {
                        "!doc": "Specifies the hint text when the cursor hovers over a widget.\n@property {String}\n@Available windows 8,Desktop Web\n@access Read and Write",
                        "!type": "string"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    }
                }
            },
            "Image2": {
                "!doc": "Creates a new Image2 object.\n@class kony.ui.Image2\n@returns {kony.ui.Image2}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.Image2",
                "prototype": {
                    "accessibilityConfig": {
                        "!doc": "Specifies the accessibility configuration property for the widget.\n@property {Object}\n@Available iPhone, Android, SPA-iPhone, and SPA-Android Platforms\n@access Read and Write\n@usage <pre>\n   var accessibilityConfig = {\n       \"a11yHidden\": false,\n       \"a11yValue\": \"Your text goes here\",\n       \"a11yLabel\": \"Your text goes here\",\n       \"a11yHint\": \"Your text goes here\"\n   }</pre>"
                    },
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "base64": {
                        "!doc": "Returns the base64 encoded string of the image raw bytes.\n@property {Object}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write"
                    },
                    "blur": {
                        "!doc": "Enables blur\n@property blur {{enabled: Boolean, value: Number}}\n@Available iOS, Android, Windows, SPA\n@access Read and Write\n@usage <pre>\n   var blur = {\n       \"enabled\": true,\n       \"value\": 50\n   }</pre>"
                    },
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "cacheConfig": {
                        "!doc": "Configures the cachePolicy and storagePolicy of the responses for the request.\n@property cacheConfig {{cachePolicy: constant, cacheStoragePolicy: constant}}\n@Available iOS\n@access Read and Write\n@usage <pre>\n   var cacheConfig = {\n       \"cachePolicy\": kony.net.cache.USE_PROTOCOL_CACHE_POLICY,\n       \"cacheStoragePolicy\": kony.net.cache.DISK_AND_MEMORY\n   }\n</pre>"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "clipView": {
                        "!doc": "     Defines a shape to clip the widget view.\n     @property {JSObject}\n\t @param shape {constant} A key-value pair represents a shape of the clipping. You can clip a view as follows:\n\t VIEW_CLIP_SHAPE_RECTANGLE: Appears the widget view in rectangular shape. By default, this value is set.\n\t VIEW_CLIP_SHAPE_ROUNDED_RECTANGLE: Appears the widget view in rectangular shape with rounded corners.\n\t VIEW_CLIP_SHAPE_CIRCLE: Appears the widget view in circular shape.\n\t @param bounds {Array} A key-value pair represents the bounds of the shape to clip a view. Specify the bounds as an array of integers [left, top, right, bottom].\n\t @param boundsInPixel {Boolean} Defines whether the units of specified bounds should be in pixels or in percentage. The property takes the Boolean value.\n\t @param radius {constant} Specifies the radius of the clipping shape. Represents the corner radius of the rounded rectangular shape when clipping shape is VIEW_CLIP_SHAPE_ROUNDED_RECTANGLE or represents the radius of circle when clipping shape is VIEW_CLIP_SHAPE_CIRCLE.\n     @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the clipView property<br/>\n\t form1.Img1.clipView  = {\n\t\t shape: constants.VIEW_CLIP_SHAPE_CIRCLE,\n\t\t bounds: [5, 5, 5, 5],\n\t\t boundsInPixel: true,\n\t\t radius: 10\n        };</pre>"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget widget. The parent widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "contextMenu": {
                        "!doc": "Specifies the array of menu items that are displayed when the Image is selected.\n@property {Array}\n@Available Desktop Web\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "createAnimation": {
                        "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                        "!type": "fn(animationDef: ?)"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "getBadge": {
                        "!doc": " This method enables you to read the badge value (if any) attached to the given widget.\n @returns String - Reference to the gesture is returned.\n @Available iPhone,iPad\n @access Write\n @usage <pre>\n//To get a badge value on a image with id img1 placed on a form frm1, use the following code:<br/>\nvar badgeVal = frm1.img1.getBadge();<br/>\nalert(\"badge value is::\"+badgeVal);</pre>",
                        "!type": "fn()"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "imageScaleMode": {
                        "!doc": "Specifies how the rendered image’s width and height are identified when those of the source image varies from the Image widget itself.\n@property {Number}\n@Available All Platforms except Mobile Web,Symbian and SPA.\n@access Read and Write",
                        "!type": "number"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the visibility of the widget.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "layoutType": {
                        "!doc": "Specifies if the arrangement of the widgets either in free form or horizontal or vertical direction (kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, or kony.flex.FLOW_VERTICAL).\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onTouchEnd": {
                        "!doc": "An event callback is invoked by the platform when the user touch is released from the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchMove": {
                        "!doc": "An event callback is invoked by the platform when the touch moves on the touch surface continuously until the movement ends. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchStart": {
                        "!doc": "An event callback is invoked by the platform when the user touches the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "padding": {
                        "!doc": "Specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "rawBytes": {
                        "!doc": "Represents the images raw bytes.\n@property {Object}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write"
                    },
                    "referenceHeight": {
                        "!doc": "Specifies the reference image height in pixels. These are device independent Pixels specified against 163 dpi.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "referenceWidth": {
                        "!doc": "Specifies the reference image width in pixels. These are device independent Pixels specified against 163 dpi.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "setBadge": {
                        "!doc": " This method enables you to set the badge value to the given widget at the upper, right corner of the widget.\n @param badgeText{String} Specifies the Text value that appears within the badge.<b>Mandatory</b>\n @param skin{String}Specifies the background color for the badge.\n @Available iPhone,iPad\n @access Write\n @usage <pre>\n//To set a badge value with skin \"badgeSkin\" on a image with id img1 placed on a form frm1, use the following code:<br/>\nfrm1.img1.setBadge(\"2\",\"badgeSkin\");</pre>",
                        "!type": "fn(badgeText: ?, skin: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@param animationConfig {Object} Specifies the animation configuration object.<b> Note: This is OPTIONAL parameter and is supported only on iOS and Android platforms.</b></dd>\n   <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animEffect</b> {Object} Specifies the animation effect. Following are the available options of animation effect. <b>Optional </b></pre> </pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_EXPAND:&#160;Specifies the widget must expand gradually by increasing the height of the widget. This option is applicable only when visibility is turned on.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_REVEAL: Specifies the widget must appear gradually by decreasing the transparency of the widget.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_COLLAPSE: This is applicable when the visibility is turned off. Specifies the widget must collapse gradually by decreasing the height of the widget.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_FADE: This is applicable when the visibility is turned off. Specifies the widget must disappear gradually by increasing the transparency of the widget.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_NONE:&#160;This is the default option. Specifies animation should not be applied to the widget, but layout animations are applied on the Form that may be change the current widgets layout. The animation events are not triggered when this option is set.</pre></li></pre></dd>\n\n   <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animDuration - Optional </b> {Number} Specifies the duration of the animation effect in seconds. The default value is 1. <b>Optional </b></pre> </pre></dd>\n\n   <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animDelay - Optional </b> {Number} Specifies the delay of the animation effect in seconds. The default value is 0. <b>Optional </b></pre> </pre></dd>\n\n   <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp; <b>- animCurve - Optional </b> Specifies the animation curve to be applied while playing the animation. An animation curve defines the speed of the animations at different intervals of the animation duration. Following are the available options of animation curve: </p></dd> </pre> </pre> </dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEIN:&#160;Specifies the animation to start slowly and then continues with normal speed.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEOUT: Specifies the animation to start with normal speed and slowdown towards the end.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEINOUT:&#160;Specifies the animation to start slowly and then continues with normal speed and then again slowdown towards the end.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_LINEAR:&#160;This is the default value. Specifies the animation to continue with normal speed.</pre></li></pre></dd>\n\n   <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp; <b>- animCallBacks - Optional </b> It is a JS dictionary containing the events invoked by the platform during the animation life cycle. Following are the available events: </p></dd> </pre> </pre> </dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; animStarted:&#160;Invoked at the end of the animation without any parameters. Following is the signature of the event:</pre></li></pre></dd><b>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp;<b>function animStarted() </b></dd> </p></pre> </pre> </pre> </br> </pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; animEnded: Invoked at the end of the animation without any parameters. Following is the signature of the event:</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp;<b>function animEnded() </b></pre> </pre> </pre>\n\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?, animationConfig: ?)"
                    },
                    "shadowDepth": {
                        "!doc": "     Defines the depth of the shadow effect applied to the Widget.\n     @property {Number}\n\t @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the shadowDepth property<br/>\n\t form1.Img1.shadowDepth = 10;</pre>",
                        "!type": "number"
                    },
                    "shadowType": {
                        "!doc": "     Sets a type of the shadow effect to apply to the Widget.\n     @property {Number}\n\t @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the shadowType property<br/>\n\t form1.Img1.shadowType = constants.VIEW_BOUNDS_SHADOW;</pre>",
                        "!type": "number"
                    },
                    "skin": {
                        "!doc": "Specifies the look and feel of the Image.\n@property {Boolean}\n@Available BlackBerry,J2ME,Windows phone7/Windows Kiosk,Windows phone6.x,Symbian,iPhone\n@access Read and Write",
                        "!type": "bool"
                    },
                    "src": {
                        "!doc": "Specifies the source of the image to be displayed. You can specify an image from the resources folder or specify a URL of the image.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "toolTip": {
                        "!doc": "Specifies the hint text when the cursor hovers over a widget.\n@property {String}\n@Available windows 8,Desktop Web\n@access Read and Write",
                        "!type": "string"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "ImageGallery": {
                "!doc": "Creates a new ImageGallery object.\n@class kony.ui.ImageGallery\n@returns {kony.ui.ImageGallery}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.ImageGallery",
                "prototype": {
                    "addAll": {
                        "!doc": " This method is used to add new images to the Image Gallery. The new images are appended to the existing images.\n @param array_of_data {Array}   Specifies the list of images. The new images are appended to the existing images. If the ImageGallery has no images, the new images are placed in the ImageGallery.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//creating ImageGallery\nvar imgGalBasic = { id: \"imgGallery\", isVisible: true, skin: \"gradroundfocusbtn\", focusSkin: \"gradroundfocusbtn\", imageWhileDownloading: \"ApplicationIcon.png\", imageWhenFailed: \"AppIcon.png\", selectedIndex:3, spaceBetweenImages: 50};<br/>\nvar imgGalLayout = {containerWeight: 100};<br/>\nvar imgGalPSP = {itemsPerRow: 3, preOnclickJS: function() {}};<br/>\n\n//Creating the ImageGallery.<br/>\nvar imgGallery = new kony.ui.ImageGallery(imgGalBasic, imgGalLayout, imgGalPSP);<br/>\n\n//Adding new new images to the Image Gallery by addAll method,We can use external URL images or the images inside resources folder<br/>\nimgGallery.addAll([{ imageurl: \"http://chromeactions.com/i/3d-like-box.png\" },<br/>\n{ imageurl: \"http://www.unlockiphoneinstantly.com/wp-content/themes/unlockiphone/images/check-box.jpg\" }],\n\"imageurl\" );</pre>",
                        "!type": "fn(array_of_data: ?)"
                    },
                    "addDataAt": {
                        "!doc": "     This method Allows you to add/insert a new image at a given index. In case the index is not valid and not falling in range 0 <= index <= N, where N is the total number of records image is added at the end of the ImageGallery.\n     @param imagedata {Object} Specifies the JSObject having image property. The image property name must be the one set in setData and addAll methods.<b>Mandatory</b>\n     @param index{Number}Specifies the position in number format.<b>Mandatory</b>\n     @Available All Platforms\n     @access Write\n     @usage <pre>\n\t //Defining the properties for ImageGallery\n    var imgGalBasic = { id: \"imgGallery\", isVisible: true, skin: \"gradroundfocusbtn\", focusSkin: \"gradroundfocusbtn\", imageWhileDownloading: \"ApplicationIcon.png\", imageWhenFailed: \"AppIcon.png\", selectedIndex:3, spaceBetweenImages: 50};<br/>\n    var imgGalLayout = {containerWeight: 100};<br/>\n    var imgGalPSP = {itemsPerRow: 3, preOnclickJS: function() {}};<br/>\n\n    //Creating the ImageGallery.<br/>\n    var imgGallery = new kony.ui.ImageGallery(imgGalBasic, imgGalLayout, imgGalPSP);<br/>\n\n    //Adding image data at index 1<br/>\n    imgGallery.setData([{ imageurl: \"http://chromeactions.com/i/3d-like-box.png\" },<br/>\n    { imageurl: \"http://chromeactions.com/i/3d-like-box.png1\" },;<br/>\n    { imageurl: \"http://www.unlockiphoneinstantly.com/wp-content/themes/unlockiphone/images/check-box.jpg\" },;<br/>\n    { imageurl: \"http://chromeactions.com/i/3d-like-box.png1\" },;<br/>\n    { imageurl: \"image2.png\"}],;<br/>\n    1\n    );</pre>",
                        "!type": "fn(imagedata: ?, index: ?)"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget widget. The parent widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "data": {
                        "!doc": "Specifies the JS Object which represents the images to be rendered in ImageGallery.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "focusSkin": {
                        "!doc": "This is a skin property and it determines the look and feel of the widget when focused.\n@property {String}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the visibility of the widget on the form.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "onSelection": {
                        "!doc": "An event callback that is invoked by the platform when an Image is selected in ImageGallery.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "referenceHeight": {
                        "!doc": "Specifies the reference image height in pixels. These are device independent Pixels specified against 163 dpi.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "referenceWidth": {
                        "!doc": "Specifies the reference image width in pixels. These are device independent Pixels specified against 163 dpi.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeAll": {
                        "!doc": " This method is used to remove all the images in the Image Gallery.\n @param widgetid{Object} Handle to the widget instance.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for ImageGallery.<br/>\nvar imgGalBasic = { id: \"imgGallery\", isVisible: true, skin: \"gradroundfocusbtn\", focusSkin: \"gradroundfocusbtn\", imageWhileDownloading: \"ApplicationIcon.png\", imageWhenFailed: \"AppIcon.png\", selectedIndex:3, spaceBetweenImages: 50};<br/>\nvar imgGalLayout = {containerWeight: 100};<br/>\nvar imgGalPSP = {itemsPerRow: 3, preOnclickJS: function() {}};<br/>\n\n//Creating the ImageGallery.<br/>\nvar imgGallery = new kony.ui.ImageGallery(imgGalBasic, imgGalLayout, imgGalPSP);<br/>\n\n//Removing all the images inside the imageGallery by removeAll method<br/>\nimgGallery.removeAll();</pre>",
                        "!type": "fn(widgetid: ?)"
                    },
                    "removeAt": {
                        "!doc": " This method removes the image at the given index in the Image gallery.\n @param index {Number}Specifies the position in number format.<b>Mandatory</b>\n @param widgetid{Object} Handle to the widget instance.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for ImageGallery <br/>\nvar imgGalBasic = { id: \"imgGallery\", isVisible: true,skin: \"gradroundfocusbtn\", focusSkin: \"gradroundfocusbtn\", imageWhileDownloading: \"ApplicationIcon.png\", imageWhenFailed: \"AppIcon.png\", selectedIndex:3, spaceBetweenImages: 50};<br/>\nvar imgGalLayout = {containerWeight: 100};<br/>\nvar imgGalPSP = {itemsPerRow: 3, preOnclickJS: function() {}};<br/>\n\n//Creating the ImageGallery.<br/>\nvar imgGallery = new kony.ui.ImageGallery(imgGalBasic, imgGalLayout, imgGalPSP);<br/>\n\n//Removing the image  at index 1 by removeAt method<br/>\nimgGallery.removeAt(1);</pre>",
                        "!type": "fn(index: ?, widgetid: ?)"
                    },
                    "selectedIndex": {
                        "!doc": "Indicates the currently selected image in the ImageGallery. The index is with respect to the order in which data is set with data property.\n@property {Number}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x.\n@access Read and Write",
                        "!type": "number"
                    },
                    "selectedItem": {
                        "!doc": "Returns the selected data object(input array) corresponding to the selected image.If no image is selected,null/nil is returned.\n@property {Object}\n@Available All Platforms\n@access Read"
                    },
                    "setData": {
                        "!doc": " This method is used to set new images to the Image Gallery. The existing image will be replaced with the new image.\n @param array_of_data {Array}   Array of objects having image property.<b>Mandatory</b>\n @param image_url_property {String} Specifies the url as an the array passed in the first argument whose value must be considered for the image.<b>Mandatory</b>\n @param widgetid(Object)Handle to the widget instance.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for ImageGallery\nvar imgGalBasic = { id: \"imgGallery\", isVisible: true, skin: \"gradroundfocusbtn\", focusSkin: \"gradroundfocusbtn\", imageWhileDownloading: \"ApplicationIcon.png\", imageWhenFailed: \"AppIcon.png\", selectedIndex:3, spaceBetweenImages: 50};<br/>\nvar imgGalLayout = {containerWeight: 100};<br/>\nvar imgGalPSP = {itemsPerRow: 3, preOnclickJS: function() {}};<br/>\n\n//Creating the ImageGallery.<br/>\nvar imgGallery = new kony.ui.ImageGallery(imgGalBasic, imgGalLayout, imgGalPSP);<br/>\n\n//Replacing existing images with the new images by setData method. We can use external URL images or the images inside resources folder.<br/>\nimgGallery.setData([{ imageurl: \"http://chromeactions.com/i/3d-like-box.png\" },<br/>\n{ imageurl: \"http://chromeactions.com/i/3d-like-box.png1\" },;<br/>\n{ imageurl: \"http://www.unlockiphoneinstantly.com/wp-content/themes/unlockiphone/images/check-box.jpg\" },;<br/>\n{ imageurl: \"http://chromeactions.com/i/3d-like-box.png1\" },;<br/>\n{ imageurl: \"image2.png\"}],;<br/>\n\"imageurl\"\n);</pre>",
                        "!type": "fn(array_of_data: ?, image_url_property: ?, widgetid: ?)"
                    },
                    "setDataAt": {
                        "!doc": " This method is used to set new images to the Image Gallery at a given index. The existing image will be replaced with the new image. In case the index is not valid,the operation is ignored.\n @param imagedata {Object} Specifies the JSObject having image property.<b>Mandatory</b>\n @param index {Number} Specifies the position in number format.<b>Mandatory</b>\n @param widgetid{Object} Handle to the widget instance.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for ImageGallery <br/>\nvar imgGalBasic = { id: \"imgGallery\", isVisible: true, skin: \"gradroundfocusbtn\", focusSkin: \"gradroundfocusbtn\", imageWhileDownloading: \"ApplicationIcon.png\", imageWhenFailed: \"AppIcon.png\", selectedIndex:3, spaceBetweenImages: 50};<br/>\nvar imgGalLayout = {containerWeight: 100};<br/>\nvar imgGalPSP = {itemsPerRow: 3, preOnclickJS: function() {}};<br/>\n\n//Creating the ImageGallery<br/>\nvar imgGallery = new kony.ui.ImageGallery(imgGalBasic, imgGalLayout, imgGalPSP);<br/>\n\n//set a new image at a 1st index by setDataAt method<br/>\nimgGallery.setDataAt({ imageurl: \"http://chromeactions.com/i/3d-like-box.png\" }, 1);</pre>",
                        "!type": "fn(imagedata: ?, index: ?, widgetid: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "skin": {
                        "!doc": "Specifies a background skin for ImageGallery widget.\n@property {String}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x.\n@access Read and Write",
                        "!type": "string"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "viewConfig": {
                        "!doc": "Specifies the view configuration for different viewtypes.\n@property {Object}\n@Available Desktop Web\n@access Read and Write"
                    },
                    "viewType": {
                        "!doc": "Specifies the view type of imageGallery should display.\n@property {Number}\n@Available Desktop Web\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "ImageGallery2": {
                "!doc": "Creates a new ImageGallery2 object.\n@class kony.ui.ImageGallery2\n@returns {kony.ui.ImageGallery2}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.ImageGallery2",
                "prototype": {
                    "addAll": {
                        "!doc": " This method is used to add new images to the Image Gallery. The new images are appended to the existing images.\n @param array_of_data {Array}Array of objects having image property. The image property name must be passed as second argument.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//creating ImageGallery\nvar imgGalBasic = { id: \"imgGallery\", isVisible: true, skin: \"gradroundfocusbtn\", focusSkin: \"gradroundfocusbtn\", imageWhileDownloading: \"ApplicationIcon.png\", imageWhenFailed: \"AppIcon.png\", selectedIndex:3, spaceBetweenImages: 50};<br/>\nvar imgGalLayout = {containerWeight: 100};<br/>\nvar imgGalPSP = {itemsPerRow: 3, preOnclickJS: function() {}};<br/>\n\n//Creating the ImageGallery.<br/>\nvar imgGallery = new kony.ui.ImageGallery2(imgGalBasic, imgGalLayout, imgGalPSP);<br/>\n\n//Adding new images to the Image Gallery by addAll method. We can use external URL images or the images inside resources folder<br/>\nimgGallery.addAll([{ imageurl: \"http://chromeactions.com/i/3d-like-box.png\" },<br/>\n{ imageurl: \"http://www.unlockiphoneinstantly.com/wp-content/themes/unlockiphone/images/check-box.jpg\" }],\n\"imageurl\");</pre>",
                        "!type": "fn(array_of_data: ?)"
                    },
                    "addDataAt": {
                        "!doc": "     This method Allows you to add/insert a new image at a given index. In case the index is not valid and not falling in range 0 <= index <= N, where N is the total number of records image is added at the end of the ImageGallery.\n     @param imagedata {Object} Specifies the JSObject having image property. The image property name must be the one set in setData and addAll methods.<b>Mandatory</b>\n     @param index{Number}Specifies the position in number format.<b>Mandatory</b>\n     @Available All Platforms\n     @access Write\n     @usage <pre>\n\t //Defining the properties for ImageGallery\n    var imgGalBasic = { id: \"imgGallery\", isVisible: true, skin: \"gradroundfocusbtn\", focusSkin: \"gradroundfocusbtn\", imageWhileDownloading: \"ApplicationIcon.png\", imageWhenFailed: \"AppIcon.png\", selectedIndex:3, spaceBetweenImages: 50};<br/>\n    var imgGalLayout = {containerWeight: 100};<br/>\n    var imgGalPSP = {itemsPerRow: 3, preOnclickJS: function() {}};<br/>\n\n    //Creating the ImageGallery.<br/>\n    var imgGallery = new kony.ui.ImageGallery2(imgGalBasic, imgGalLayout, imgGalPSP);<br/>\n\n\t//Adding the image data at index 1<br/>\n\timgGallery.setData([{ imageurl: \"http://chromeactions.com/i/3d-like-box.png\" },<br/>\n    { imageurl: \"http://chromeactions.com/i/3d-like-box.png1\" },;<br/>\n    { imageurl: \"http://www.unlockiphoneinstantly.com/wp-content/themes/unlockiphone/images/check-box.jpg\" },;<br/>\n    { imageurl: \"http://chromeactions.com/i/3d-like-box.png1\" },;<br/>\n    { imageurl: \"image2.png\"}],;<br/>\n    1\n    );</pre>",
                        "!type": "fn(imagedata: ?, index: ?)"
                    },
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget widget. The parent widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "createAnimation": {
                        "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                        "!type": "fn(animationDef: ?)"
                    },
                    "data": {
                        "!doc": "Specifies the JS Object which represents the images to be rendered in ImageGallery.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "focusSkin": {
                        "!doc": "This is a skin property and it determines the look and feel of the widget when focused.\n@property {String}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the visibility of the widget on the form.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onSelection": {
                        "!doc": "An event callback that is invoked by the platform when an Image is selected in ImageGallery.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "referenceHeight": {
                        "!doc": "Specifies the reference image height in pixels. These are device independent Pixels specified against 163 dpi.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "referenceWidth": {
                        "!doc": "Specifies the reference image width in pixels. These are device independent Pixels specified against 163 dpi.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeAll": {
                        "!doc": " This method is used to remove all the images in the Image Gallery.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for ImageGallery.<br/>\nvar imgGalBasic = { id: \"imgGallery\", isVisible: true, skin: \"gradroundfocusbtn\", focusSkin: \"gradroundfocusbtn\", imageWhileDownloading: \"ApplicationIcon.png\", imageWhenFailed: \"AppIcon.png\", selectedIndex:3, spaceBetweenImages: 50};<br/>\nvar imgGalLayout = {containerWeight: 100};<br/>\nvar imgGalPSP = {itemsPerRow:3, preOnclickJS: function() {}};<br/>\n\n//Creating the ImageGallery.<br/>\nvar imgGallery = new kony.ui.ImageGallery2(imgGalBasic, imgGalLayout, imgGalPSP);<br/>\n\n//Removing all the images inside the imageGallery by removeAll method<br/>\nimgGallery.removeAll();</pre>",
                        "!type": "fn()"
                    },
                    "removeAt": {
                        "!doc": " This method removes the image at the given index in the Image gallery. In JavaScript, the Index is '0' based and in Lua, it is '1' based.\n @param index {Number}Specifies the position in number format.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for ImageGallery <br/>\nvar imgGalBasic = { id: \"imgGallery\", isVisible: true,skin: \"gradroundfocusbtn\", focusSkin: \"gradroundfocusbtn\", imageWhileDownloading: \"ApplicationIcon.png\", imageWhenFailed: \"AppIcon.png\", selectedIndex:3, spaceBetweenImages: 50};<br/>\nvar imgGalLayout = {containerWeight: 100};<br/>\nvar imgGalPSP = {itemsPerRow: 3, preOnclickJS: function() {}};<br/>\n\n//Creating the ImageGallery2.<br/>\nvar imgGallery = new kony.ui.ImageGallery2(imgGalBasic, imgGalLayout, imgGalPSP);<br/>\n\n//Removing the image  at index 1 by removeAt method<br/>\nimgGallery.removeAt(1);</pre>",
                        "!type": "fn(index: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "selectedIndex": {
                        "!doc": "Indicates the currently selected image in the ImageGallery. The index is with respect to the order in which data is set with data property.\n@property {Number}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x.\n@access Read and Write",
                        "!type": "number"
                    },
                    "selectedItem": {
                        "!doc": "Returns the selected data object(input array) corresponding to the selected image of the ImageGallery.If no image is selected,null/nil is returned.\n@property {Object}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x.\n@access Read"
                    },
                    "setData": {
                        "!doc": " This method is used to set new images to the Image Gallery. The existing images will be replaced with the new images.\n @param array_of_data {Array} Array of objects having image property. The image property name must be passed as second argument.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for ImageGallery\nvar imgGalBasic = { id: \"imgGallery\", isVisible: true, skin: \"gradroundfocusbtn\", focusSkin: \"gradroundfocusbtn\", imageWhileDownloading: \"ApplicationIcon.png\", imageWhenFailed: \"AppIcon.png\", selectedIndex:3, spaceBetweenImages: 50};<br/>\nvar imgGalLayout = {containerWeight: 100};<br/>\nvar imgGalPSP = {itemsPerRow: 3, preOnclickJS: function() {}};<br/>\n\n//Creating the ImageGallery.<br/>\nvar imgGallery = new kony.ui.ImageGallery2(imgGalBasic, imgGalLayout, imgGalPSP);<br/>\n\n//Replacing existing images with the new images by setData method,We can use external URL images or the images inside resources folder.<br/>\nimgGallery.setData([{ imageurl: \"http://chromeactions.com/i/3d-like-box.png\" },<br/>\n{ imageurl: \"http://chromeactions.com/i/3d-like-box.png1\" },;<br/>\n{ imageurl: \"http://www.unlockiphoneinstantly.com/wp-content/themes/unlockiphone/images/check-box.jpg\" },;<br/>\n{ imageurl: \"http://chromeactions.com/i/3d-like-box.png1\" },;<br/>\n{ imageurl: \"image2.png\"}],;<br/>\n\"imageurl\"\n);</pre>",
                        "!type": "fn(array_of_data: ?)"
                    },
                    "setDataAt": {
                        "!doc": " This method is used to set new images to the Image Gallery at a given index. The existing image will be replaced with the new image. In case the index is not valid,the operation is ignored.\n @param imagedata {Object} Specifies the JSObject having image property.<b>Mandatory</b>\n @param index {Number} Specifies the position in number format.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for ImageGallery <br/>\nvar imgGalBasic = { id: \"imgGallery\", isVisible: true, skin: \"gradroundfocusbtn\", focusSkin: \"gradroundfocusbtn\", imageWhileDownloading: \"ApplicationIcon.png\", imageWhenFailed: \"AppIcon.png\", selectedIndex:3, spaceBetweenImages: 50};<br/>\nvar imgGalLayout = {containerWeight: 100};<br/>\nvar imgGalPSP = {itemsPerRow: 3, preOnclickJS: function() {}};<br/>\n\n//Creating the ImageGallery<br/>\nvar imgGallery = new kony.ui.ImageGallery2(imgGalBasic, imgGalLayout, imgGalPSP);<br/>\n\n//set a new image at a 1st index by setDataAt method<br/>\nimgGallery.setDataAt({ imageurl: \"http://chromeactions.com/i/3d-like-box.png\" }, 1);</pre>",
                        "!type": "fn(imagedata: ?, index: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "skin": {
                        "!doc": "Specifies the look and feel of the ImageGallery widget when not in focus.\n@property {String}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x.\n@access Read and Write",
                        "!type": "string"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "viewConfig": {
                        "!doc": "Specifies the view configuration for different viewtypes.\n@property {Object}\n@Available Desktop Web\n@access Read and Write"
                    },
                    "viewType": {
                        "!doc": "Specifies the view type of imageGallery should display.\n@property {Number}\n@Available Desktop Web\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "Label": {
                "!doc": "Creates a new Label object.\n@class kony.ui.Label\n@returns {kony.ui.Label}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.Label",
                "prototype": {
                    "accessibilityConfig": {
                        "!doc": "Specifies the accessibility configuration property for the widget.\n@property {Object}\n@Available iPhone, Android, and SPA-Android Platforms\n@access Read and Write\n@usage <pre>\n   var accessibilityConfig = {\n       \"a11yHidden\": false,\n       \"a11yValue\": \"Your text goes here\",\n       \"a11yLabel\": \"Your text goes here\",\n       \"a11yHint\": \"Your text goes here\"\n   }</pre>"
                    },
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "backgroundColor": {
                        "!doc": "Specifies the background color of the widget in hex format.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "blur": {
                        "!doc": "Enables blur\n@property blur {{enabled: Boolean, value: Number}}\n@Available iOS, Android, Windows, SPA\n@access Read and Write\n@usage <pre>\n   var blur = {\n       \"enabled\": true,\n       \"value\": 50\n   }</pre>"
                    },
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "clipView": {
                        "!doc": "     Defines a shape to clip the widget view.\n     @property {JSObject}\n\t @param shape {constant} A key-value pair represents a shape of the clipping. You can clip a view as follows:\n\t VIEW_CLIP_SHAPE_RECTANGLE: Appears the widget view in rectangular shape. By default, this value is set.\n\t VIEW_CLIP_SHAPE_ROUNDED_RECTANGLE: Appears the widget view in rectangular shape with rounded corners.\n\t VIEW_CLIP_SHAPE_CIRCLE: Appears the widget view in circular shape.\n\t @param bounds {Array} A key-value pair represents the bounds of the shape to clip a view. Specify the bounds as an array of integers [left, top, right, bottom].\n\t @param boundsInPixel {Boolean} Defines whether the units of specified bounds should be in pixels or in percentage. The property takes the Boolean value.\n\t @param radius {constant} Specifies the radius of the clipping shape. Represents the corner radius of the rounded rectangular shape when clipping shape is VIEW_CLIP_SHAPE_ROUNDED_RECTANGLE or represents the radius of circle when clipping shape is VIEW_CLIP_SHAPE_CIRCLE.\n     @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the clipView property<br/>\n\t form1.lbl1.clipView  = {\n\t\t shape: constants.VIEW_CLIP_SHAPE_CIRCLE,\n\t\t bounds: [5, 5, 5, 5],\n\t\t boundsInPixel: true,\n\t\t radius: 10\n        };</pre>"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget widget. The parent widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "contentAlignment": {
                        "!doc": "Specifies the alignment of the text on the Label with respect to its boundaries.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "createAnimation": {
                        "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                        "!type": "fn(animationDef: ?)"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "fontMetrics": {
                        "!doc": "Returns information about the metrics (ascent, descent, bottom, top, leading...etc) for font used on the widget.\n@property {Object}\n@Available iOS, Android platforms\n@access Read Only"
                    },
                    "getBadge": {
                        "!doc": " This method enables you to read the badge value (if any) attached to the given widget.\n @returns String - Reference to the gesture is returned\n @Available iPhone,iPad\n @access Write\n @usage <pre>\n//To get a badge value on a label with id lbl1 placed on a form frm1, use the following code:<br/>\nvar badgeVal = frm1.lbl1.getBadge();<br/>\nalert(\"badge value is::\"+badgeVal);</pre>",
                        "!type": "fn()"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "hoverSkin": {
                        "!doc": "Specifies the look and feel of a widget when the cursor hovers on the widget.\n@property {String}\n@Available windows 8,Desktop Web\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the visibility of the widget.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "layoutType": {
                        "!doc": "Specifies if the arrangement of the widgets either in free form or horizontal or vertical direction (kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, or kony.flex.FLOW_VERTICAL).\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onTouchEnd": {
                        "!doc": "An event callback is invoked by the platform when the user touch is released from the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchMove": {
                        "!doc": "An event callback is invoked by the platform when the touch moves on the touch surface continuously until the movement ends. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchStart": {
                        "!doc": "An event callback is invoked by the platform when the user touches the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "padding": {
                        "!doc": "Specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "pasteboardType": {
                        "!doc": "This property enables an application to share data within the application or with another application using system-wide or application-specific pasteboards.\n@property {Number}\n@Available iOS, SPA, and Android Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "setBadge": {
                        "!doc": " This method enables you to set the badge value to the given widget at the upper, right corner of the widget.\n @param badgeText{String} Specifies the Text value that appears within the badge.<b>Mandatory</b>\n @param skin{String}Specifies the background color for the badge.\n @Available iPhone,iPad\n @access Write\n @usage <pre>\n//To set a badge value with skin \"badgeSkin\" on a label with id lbl1 placed on a form frm1, use the following code:<br/>\nfrm1.lbl1.setBadge(\"2\",\"badgeSkin\");</pre>",
                        "!type": "fn(badgeText: ?, skin: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget forSPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@param animationConfig {Object} Specifies the animation configuration object.<b> Note: This is OPTIONAL parameter and is supported only on iOS and Android platforms.</b></dd>\n   <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animEffect</b> {Object} Specifies the animation effect. Following are the available options of animation effect. <b>Optional </b></pre> </pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_EXPAND:&#160;Specifies the widget must expand gradually by increasing the height of the widget. This option is applicable only when visibility is turned on.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_REVEAL: Specifies the widget must appear gradually by decreasing the transparency of the widget.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_COLLAPSE: This is applicable when the visibility is turned off. Specifies the widget must collapse gradually by decreasing the height of the widget.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_FADE: This is applicable when the visibility is turned off. Specifies the widget must disappear gradually by increasing the transparency of the widget.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_NONE:&#160;This is the default option. Specifies animation should not be applied to the widget, but layout animations are applied on the Form that may be change the current widgets layout. The animation events are not triggered when this option is set.</pre></li></pre></dd>\n\n   <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animDuration - Optional </b> {Number} Specifies the duration of the animation effect in seconds. The default value is 1. <b>Optional </b></pre> </pre></dd>\n\n   <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animDelay - Optional </b> {Number} Specifies the delay of the animation effect in seconds. The default value is 0. <b>Optional </b></pre> </pre></dd>\n\n   <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp; <b>- animCurve - Optional </b> Specifies the animation curve to be applied while playing the animation. An animation curve defines the speed of the animations at different intervals of the animation duration. Following are the available options of animation curve: </p></dd> </pre> </pre> </dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEIN:&#160;Specifies the animation to start slowly and then continues with normal speed.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEOUT: Specifies the animation to start with normal speed and slowdown towards the end.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEINOUT:&#160;Specifies the animation to start slowly and then continues with normal speed and then again slowdown towards the end.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_LINEAR:&#160;This is the default value. Specifies the animation to continue with normal speed.</pre></li></pre></dd>\n\n   <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp; <b>- animCallBacks - Optional </b> It is a JS dictionary containing the events invoked by the platform during the animation life cycle. Following are the available events: </p></dd> </pre> </pre> </dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; animStarted:&#160;Invoked at the end of the animation without any parameters. Following is the signature of the event:</pre></li></pre></dd><b>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp;<b>function animStarted() </b></dd> </p></pre> </pre> </pre> </br> </pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; animEnded: Invoked at the end of the animation without any parameters. Following is the signature of the event:</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp;<b>function animEnded() </b></pre> </pre> </pre>\n\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?, animationConfig: ?)"
                    },
                    "shadowDepth": {
                        "!doc": "     Defines the depth of the shadow effect applied to the Widget.\n     @property {Number}\n\t @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the shadowDepth property<br/>\n\t form1.lbl1.shadowDepth = 10;</pre>",
                        "!type": "number"
                    },
                    "shadowType": {
                        "!doc": "     Sets a type of the shadow effect to apply to the Widget.\n     @property {Number}\n\t @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the shadowType property<br/>\n\t form1.lbl1.shadowType = constants.VIEW_BOUNDS_SHADOW;</pre>",
                        "!type": "number"
                    },
                    "skin": {
                        "!doc": "Specifies the look and feel of the Label widget when not in focus.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "text": {
                        "!doc": "Specifies a general or descriptive text for Label widget.\n@property {String|Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "textCopyable": {
                        "!doc": "This property enables you to copy a text from a Label widget when the widget is enabled state.\n@property {Boolean}\n@Available iOS, SPA, and Android Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "textStyle": {
                        "!doc": "The textStyle property enables apps to get and set values that control the appearance of the Label widget's text.\n@property {Object}\n@Available iOS, Android platforms\n@access Read and Write"
                    },
                    "toolTip": {
                        "!doc": "Specifies the hint text when the cursor hovers over a widget.\n@property {String}\n@Available windows 8,Desktop Web\n@access Read and Write",
                        "!type": "string"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "Line": {
                "!doc": "Creates a new Line object.\n@class kony.ui.Line\n@returns {kony.ui.Line}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.Line",
                "prototype": {
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the visibility of the widget on the form.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms except Mobile Web (basic).\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onTouchEnd": {
                        "!doc": "An event callback is invoked by the platform when the user touch is released from the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchMove": {
                        "!doc": "An event callback is invoked by the platform when the touch moves on the touch surface continuously until the movement ends. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchStart": {
                        "!doc": "An event callback is invoked by the platform when the user touches the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "skin": {
                        "!doc": "Specifies the look and feel of the Line widget when not in focus.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "thickness": {
                        "!doc": "Specifies the thickness of the widget in pixels. The pixel values are scaled to density specific pixels by the respective platforms.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "toolTip": {
                        "!doc": "Specifies the hint text when the cursor hovers over a widget.\n@property {String}\n@Available windows 8\n@access Read and Write",
                        "!type": "string"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    }
                }
            },
            "Link": {
                "!doc": "Creates a new Link object.\n@class kony.ui.Link\n@returns {kony.ui.Link}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.Link",
                "prototype": {
                    "accessibilityConfig": {
                        "!doc": "Specifies the accessibility configuration property for the widget.\n@property {Object}\n@Available iPhone, Android, SPA-iPhone, and SPA-Android Platforms\n@access Read and Write\n@usage <pre>\n   accessibilityConfig =  {\n       \"a11yHidden\": false,\n       \"a11yValue\": \"Your text goes here\",\n       \"a11yLabel\": \"Your text goes here\",\n       \"a11yHint\": \"Your text goes here\"\n   }</pre>"
                    },
                    "backgroundColor": {
                        "!doc": "Specifies the background color of the widget in hex format.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "blockedUISkin": {
                        "!doc": "Specifies the skin that must be used to block the interface until the action in progress (for example, a service call) is completed.\n@property {String}\n@Available Mobile Web(Advanced),SPA(iPhone/Android/BlackBerry/Windows NTH)/Playbook\n@access Read and Write",
                        "!type": "string"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget. The parent widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "contextMenu": {
                        "!doc": "A context menu is a menu that appears upon clicking a widget. A context menu typically offers a limited set of choices that are applicable for that widget.\n@property {Array}\n@Available Android,Android Tablet,BlackBerry,Windows Phone/Windows Kiosk\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "focusSkin": {
                        "!doc": "Specifies the look and feel of the Link when in focus.\n@property {String}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "string"
                    },
                    "hoverSkin": {
                        "!doc": "Specifies the look and feel of a widget when the cursor hovers on the widget.\n@property {String}\n@Available windows 8, Desktop Web\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "specifies the property to set widget visibility.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "onClick": {
                        "!doc": "An event callback is invoked by the platform when the user performs a click action on the widget.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "padding": {
                        "!doc": "specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms except Mobile Web (basic).\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "skin": {
                        "!doc": "Specifies the look and feel of the Link when not in focus.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "text": {
                        "!doc": "Specifies a general or descriptive Link for the widget.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "toolTip": {
                        "!doc": "Specifies the hint text when the cursor hovers over a widget.\n@property {String}\n@Available windows 8, Desktop Web\n@access Read and Write",
                        "!type": "string"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    }
                }
            },
            "ListBox": {
                "!doc": "Creates a new ListBox object.\n@class kony.ui.ListBox\n@returns {kony.ui.ListBox}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.ListBox",
                "prototype": {
                    "accessibilityConfig": {
                        "!doc": "Specifies the accessibility configuration property for the widget.\n@property {Object}\n@Available iPhone, Android, SPA-iPhone, and SPA-Android Platforms\n@access Read and Write\n@usage <pre>\n   var accessibilityConfig = {\n       \"a11yHidden\": false,\n       \"a11yValue\": \"Your text goes here\",\n       \"a11yLabel\": \"Your text goes here\",\n       \"a11yHint\": \"Your text goes here\"\n   }</pre>"
                    },
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "backgroundColor": {
                        "!doc": "Specifies the background color of the widget in hex format.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "blockedUISkin": {
                        "!doc": "Specifies the skin that must be used to block the interface until the action in progress (for example, a service call) is completed.\n@property {String}\n@Available Mobile Web (Advanced),SPA (iPhone/Android/BlackBerry/Windows NTH)PlayBook\n@access Read and Write",
                        "!type": "string"
                    },
                    "blur": {
                        "!doc": "Enables blur\n@property blur {{enabled: Boolean, value: Number}}\n@Available iOS, Android, Windows, SPA\n@access Read and Write\n@usage <pre>\n   var blur =  {\n       \"enabled\": true,\n       \"value\": 50\n   }</pre>"
                    },
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget widget. The parent widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms except Win Mobile 6x.\n@access Read and Write",
                        "!type": "number"
                    },
                    "contentAlignment": {
                        "!doc": "Specifies the alignment of the text on the Listbox with respect to its boundaries.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "createAnimation": {
                        "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                        "!type": "fn(animationDef: ?)"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "enableHapticFeedback": {
                        "!doc": "This property allows you to enable or disable haptic feedback.\n@property {Boolean}\n@Available iOS, Android, Windows platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "focusSkin": {
                        "!doc": "This is a skin property and it determines the look and feel of the ListBox widget when in focus .\n@property {String}\n@Available All Platforms except on Mobile Web platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "hoverSkin": {
                        "!doc": "Specifies the look and feel of a widget when the cursor hovers on the widget.\n@property {String}\n@Available windows 8, Desktop web\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identify ListBox widget within an application.\n@property {String}\n@Mandatory {Yes}\n@Available All Platforms\n@access {Read}",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the visibility of the widget on the form.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "layoutType": {
                        "!doc": "Specifies if the arrangement of the widgets either in free form or horizontal or vertical direction (kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, or kony.flex.FLOW_VERTICAL).\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms except Mobile Web (basic)\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "masterData": {
                        "!doc": "Specifies the set of values that must be displayed for the user to make a selection from the available choices.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "masterDataMap": {
                        "!doc": "Specifies the set of values from which you can make selections.You must specify a key and a value in a master data map.\n@property {Array}\n@Available All Platforms except Mobile Web (basic) and win Mobile6x.\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "multiSelectRows": {
                        "!doc": "Specifies no of rows that the list box can display.\n@property {Number}\n@Available Desktop Web\n@access Read and Write",
                        "!type": "number"
                    },
                    "nativeListFieldFocusSkin": {
                        "!doc": "Specifies the skin that is applied to a focused item in the native popup that appears when you click on the ListBox.\n@property {String}\n@Available Android,Android Tablet,BlackBerry,J2ME\n@access Read and Write",
                        "!type": "string"
                    },
                    "nativeListFieldSkin": {
                        "!doc": "Specifies the skin that is applied to each item in the native popup that appears when you click on the ListBox.\n@property {String}\n@Available Android,Android Tablet,BlackBerry,J2ME\n@access Read and Write",
                        "!type": "string"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onSelection": {
                        "!doc": "An event callback that is invoked by the platform when an item is selected or deselected.\n@property {Event}\n@Available All Platforms except Mobile Web platforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onTouchEnd": {
                        "!doc": "An event callback is invoked by the platform when the user touch is released from the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchMove": {
                        "!doc": "An event callback is invoked by the platform when the touch moves on the touch surface continuously until the movement ends. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchStart": {
                        "!doc": "An event callback is invoked by the platform when the user touches the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "padding": {
                        "!doc": "Specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "placeholder": {
                        "!doc": "Specifies the temporary or substitute text that must be displayed on the ListBox until the actual selection is made.\n@property {String}\n@Available iPhone,iPad,Android,Android Tablet,Windows Phone/Windows Kiosk,BlackBerry,J2ME\n@access Read and Write",
                        "!type": "string"
                    },
                    "placeholderSkin": {
                        "!doc": "This property reads the font color set in the skin and ignores the other attributes. Android does not support setting a background color for a placeholder.\n@property {String}\n@Available Android, Android Tablet\n@access Read and Write",
                        "!type": "string"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "selectedKey": {
                        "!doc": "Represents the key that is shown as selected.\n@property {String}\n@Available All Platforms except Mobile Web(basic) and Win Mobile6x\n@access Read and Write",
                        "!type": "string"
                    },
                    "selectedKeyValue": {
                        "!doc": "Returns the array of selected key-value pair.\n@property {Array}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x\n@access Read",
                        "!type": "[?]"
                    },
                    "selectedKeyValues": {
                        "!doc": "Returns the key,value pairs from the masterdata representing the selected key value.\n@property {String}\n@Available Desktop Web\n@access Read and Write",
                        "!type": "string"
                    },
                    "selectedKeys": {
                        "!doc": "Returns the keys from the masterdata representing the selected keys.\n@property {String}\n@Available Desktop Web\n@access Read and Write",
                        "!type": "string"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except onMap widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "shadowDepth": {
                        "!doc": "     Defines the depth of the shadow effect applied to the Widget.\n     @property {Number}\n\t @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the shadowDepth property<br/>\n\t form1.LstBx1.shadowDepth = 10;</pre>",
                        "!type": "number"
                    },
                    "shadowType": {
                        "!doc": "     Sets a type of the shadow effect to apply to the Widget.\n     @property {Number}\n\t @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the shadowType property<br/>\n\t form1.LstBx1.shadowType = constants.VIEW_BOUNDS_SHADOW;</pre>",
                        "!type": "number"
                    },
                    "skin": {
                        "!doc": "Specifies a background skin for ListBox Widget.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "toolTip": {
                        "!doc": "Specifies the hint text when the cursor hovers over a widget.\n@property {String}\n@Available windows 8\n@access Read and Write",
                        "!type": "string"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "viewConfig": {
                        "!doc": "Specifies the view configuration for different viewtypes. You can set the configuration for toggle view.\n@property {Object}\n@Available iPad,iPhone\n@access Read and Write"
                    },
                    "viewType": {
                        "!doc": "Specifies the view type of the ListBox.\n@property {Number}\n@Available iPhone,iPad,Android,Android Tablet ( only Spinner view is available for the platform)\n@access Read and Write",
                        "!type": "number"
                    },
                    "wheelBackgroundColor": {
                        "!doc": "Specifies the background color for the wheel that is displayed when you click the ListBox. This property is applicable only when you set the viewType as LISTBOX_VIEW_TYPE_ONSCREENWHEEL.\n@property {Boolean}\n@Available iOS\n@access Read and Write",
                        "!type": "bool"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "Map": {
                "!doc": "Creates a new Map object.\n@class kony.ui.Map\n@returns {kony.ui.Map}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.Map",
                "prototype": {
                    "addCircle": {
                        "!doc": "This method allows you to add Circle to map widget.\n@param circleData {JSObject} Specifies the location data for which the circle is drawn on the map\n@Parameters of the circledata are as follows:\n    @param id {String} [Mandatory] : Specifies the unique identifier to represent the circle\n    @param centerLocation {JSObject} [Mandatory] : Specifies the center location for circle\n    @param radius {Number} [Mandatory] : Specifies the radius in meters\n    @param navigateAndZoom {Boolean} [Optional] : Boolean value to indicate whether the map should be navigated to the circle area and zoom the map to fit the bounds of circle\n    @param showCenterPin {Boolean} [Optional] : Indicates whether to show pin image for Circle center location\n    @param circleConfig {JSObject} [Optional] : Specifies an object with predefined configuration keys , The following is the list configuration keys:\n        @param lineColor {String} [All]: Specifies the color of the circle border line in RBGA hex format\n        @param fillColor {String} [All]: Specifies the color that circle area is filled with in RBGA hex format\n        @param lineWidth {Number} [All]: Specifies the width of the polyline in screen independent pixels\n        @param lineDashPattern {Array} [iOS] : An array of numbers specifying the dash pattern to use for the path\n@Available iPhone, android, ipad, andriodtab\n@Returns None",
                        "!type": "fn(circleData: ?)"
                    },
                    "addPin": {
                        "!doc": " Adds/appends a single pin to map\n @param pin {Object} An object with possible keys as id, lat, lon, name, desc, etc. <b>Mandatory</b>\n @Available iOS, Android, Windows\n @access Write\n @usage <pre>\nvar startPt = {\n    id : “pin id”,\n    lat: \"17.4947934\",\n    lon: \"78.3996441\",\n    name: \"KPHB\",\n    desc: \"Kukatpally\",\n    showCallout : true,\n    meta: {\n            color: \"green\",\n            label: \"A\"\n    }\n};\nmap.addPin( startPt );</pre>",
                        "!type": "fn(pin: ?)"
                    },
                    "addPins": {
                        "!doc": " Adds/appends multiple pins to map\n @param pins {Array} An array of pin objects <b>Mandatory</b>\n @Available iOS, Android, Windows\n @access Write\n @usage <pre>\nvar startPt = {\n    id : “pin id”,\n    lat: \"17.4947934\",\n    lon: \"78.3996441\",\n    name: \"KPHB\",\n    desc: \"Kukatpally\",\n    showCallout : true,\n    meta: {\n            color: \"green\",\n            label: \"A\"\n    }\n};\nmap.addPins( [startPt] );</pre>",
                        "!type": "fn(pin: ?)"
                    },
                    "addPolygon": {
                        "!doc": "This method allows you to add a polygon to the map widget.\n@param polygonData {Object} Specifies the location data for which the polygon is drawn on the map\n@Parameters of the polygonData are as follows:\n   @param id {String} [Mandatory]: Specifies the unique identifier to represent the polygon and if a polygon already exists with the same identifier, then it gets replacesd by the new id\n   @param locations {Array} [Mandatory] : Specifies the list of all the locations as an array\n   @param navigateAndZoom {Boolean} [Optional] : Boolean value to indicate whether the map should be navigated to the polygon area and zoom the map to fit the bounds of polygon.\n   @param polygonConfig {JSObject} [Optional] : Specifies an object with predefined configuration keys, The following is the list configuration keys:\n       @param lineColor {String} [All] : Specifies the color of the polygon border line in RBGA hex format, Default line color in RGBA is FF0000FF (RED)\n       @param fillColor {String} [All] : Specifies the color that polygon area is filled with in RBGA hex format, The format could be 0xRGBA or RGBA and No fill color is applied by default\n       @param lineWidth {Number} [All]: Specifies the width of the polygon in screen independent pixels, Default line width is 3 dp\n       @param innerPolygons {Array} [Android, iOS]: Specifies the list of all the locations as an array to draw inner polygon without fill color\n       @param lineDashPattern {Array} [iOS] : An array of numbers specifying the dash pattern to use for the path\n\n@Available iPhone, android, ipad, andriodtab\n@Returns None",
                        "!type": "fn(polygonData: ?)"
                    },
                    "addPolyline": {
                        "!doc": "This method is used to add a polyline to the map widget with the given location data. You can add multiple polylines to the map widget using this method.\n@param locationData {Object}Specifies the location data for which the polyline is drawn on the map. <b>Mandatory</b>\n@Available Available on iOS and Android platforms only.\n@access Write",
                        "!type": "fn(locationData: ?)"
                    },
                    "address": {
                        "!doc": "Map enables you to navigates to the specified address.\n@property {Object}\n@Available Android/Android Tablet,Windows Phone/Windows Kiosk ,Mobile Web(Basic),Mobile Web(BJS),Mobile Web(Advanced),SPA(iPhone/Android/BlackBerry/Windows NTH)/Playbook\n@access Read and Write"
                    },
                    "anchor": {
                        "!doc": "Provides the extended capability of anchoring the pin image to desired position.\n@property {String}\n@Available iPhone,iPad,Android, Android Tablet\n@access Read and Write",
                        "!type": "string"
                    },
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "calloutTemplate": {
                        "!doc": "Accepts reference to a box widget which represents a UI template for a custom callout. If not provided, it should fallback to the platform specific default callout for backward compatibility.\n@property {kony.ui.Box}\n@Available All Platforms\n@access Read and Write"
                    },
                    "calloutWidth": {
                        "!doc": "Specifies the width of the callout on the map. It accepts a number between 1 to 100 in percentage relative to the map widget width. For example, 100% value means, callout width should fill its map widget width. If the\nvalue specified is less than 1 or more than 100, it should fallback to 80%.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "clear": {
                        "!doc": "This method is used to clear all the data associated with map widget which including locationData and polylines.\n@Available Available on iOS and Android platforms only.\n@access Write",
                        "!type": "fn()"
                    },
                    "clone": {
                        "!doc": "When this method is used on a container widget, then all the widgets inside the container are cloned. This method takes an optional parameter. If the widgetid is not passed then the cloned copy will have the same id as original widget.\n@param widgetId {String} -[Optional] Reference of the name of the widget.\n@Available iOS, Android, Android Tablet, Windows, SPA\n@Returns Cloned copy of the widget.",
                        "!type": "fn(widgetId: ?)"
                    },
                    "containerHeight": {
                        "!doc": "Specifies the available height of the container in terms of percentage. The percentage is with reference to the value of containerHeightReference property.\n@property {Number}\n@Available Available on all platforms except on all Server side Mobile Web and Desktop Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "containerHeightReference": {
                        "!doc": "Specifies the reference for the height of the container based on option that you set for containerHeight. The container height percentage is calculated based on eigher CONTAINER_HEIGHT_BY_FORM_REFERENCE or CONTAINER_HEIGHT_BY_PARENT_WIDTH.\n@property {Number}\n@Available Available on all platforms except on all Server side Mobile Web and Desktop Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "containerWeight": {
                        "!doc": "Specifies the percentage of width to be allocated by its parent widget. The parent's widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "containsLocation": {
                        "!doc": "This method allows you to find whether a perticular location is inside or on a perticular shape.\n@param shapeType {Number}[Mandatory] : A constant that defines the shape\n@param location {Object} [Mandatory]: location object which contains lat and lon values\n@param shapeData {Object} [Mandatory] : A key-value pair object that defines the shape\n@param shapeData supports the following keys,\n    @param locations {Array} : List of locations that defines a given shape\n    @param radius {Number}: Radius that is needed to define circle shape\n    @param tolerance {Number} [Android]: Specify tolerance in meters when user is interacting with polyline\n@Available iPhone, android, ipad, andriodtab\n@Returns {Boolean value that indicates whether given location is on the shape}",
                        "!type": "fn(shapeType: ?, location: ?, shapeData: ?)"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "createAnimation": {
                        "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                        "!type": "fn(animationDef: ?)"
                    },
                    "decode": {
                        "!doc": "This method allows you to decode the encoded polyline points which are provided in search route results.\n@param encodedPolylinePoints {String} Encoded polyline points given in search results\n@Available iPhone, android, ipad, andriodtab\n@Returns {an Array of Objects which contains only lat/lon values}",
                        "!type": "fn(encodedPolylinePoints: ?)"
                    },
                    "defaultPinImage": {
                        "!doc": "The default map pin image to be used to indicate a location on map.\n@property {string}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "dismissCallout": {
                        "!doc": " This method is used to dismiss the custom callout for a given location. If location is an optional argument and if not passed, this method dismisses all the opened callouts in the map.\n @param locationData {Object}Specifies the location data of a single location following the data format of the \"locationData\" property on the map widget <b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for Map\nvar mapBasicConf = {id: \"map1\", provider:constants.MAP_PROVIDER_GOOGLE, mapKey:\"0z5UtaSPUYj42f5qX0VAwmDGLX39Qxgbtcra0TA\", defaultPinImage: \"kmpin.png\", isVisible:true, locationData:[{lat :\"17.445775\", lon :\"78.3731\", name: \"Campus 1\", desc: \"My Office Campus\"}]};<br/>\nvar mapLayoutConf={margin: [20,40,50,20], containerWeight: 100};<br/>\nvar mapPSPConf={};<br/>\n\n//Creating the Map.\nvar map = new kony.ui.Map(mapBasicConf, mapLayoutConf, mapPSPConf);<br/>\n\nmap.dismissCallout = function(location) {<br/>\n  //logic to handle callout location<br/>\n}</pre>",
                        "!type": "fn(locationData: ?)"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "enableMultipleCallouts": {
                        "!doc": "This will enable the feature of multiple callouts.\n   1.  If set to false then default behavior of maps are shown\n   2.  If set to true then callout’s visibility should be controlled with setCalloutVisibility method.\n@param enable {Boolean} <b>Mandatory</b>\n@Available iOS, Android, Windows\n@access Write\n@usage <pre>\nmap.enableMultipleCallouts(true);</pre>",
                        "!type": "fn(enable: ?)"
                    },
                    "getBounds": {
                        "!doc": "This method returns the currently visible map boundaries as an object. The predefined keys for the object are center,northeast,southwest,latspan, and lonspan.\n@Available Available on iOS and Android platforms only.\n@access Write",
                        "!type": "fn()"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "imageSourceType": {
                        "!doc": "An optional property that specifies the source of the image for pins on the map.\n@property {Constant}\n@Available All Platforms\n@access Read"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the visibility of the widget on the form.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "layoutType": {
                        "!doc": "Specifies if the arrangement of the widgets either in free form or horizontal or vertical direction (kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, or kony.flex.FLOW_VERTICAL).\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "loadRawResourceStyle": {
                        "!doc": " This API helps to provide custom styling for map. With style options you can customize the presentation of the standard Google map styles, changing the visual display of features like roads, parks, businesses, and other points of interest.\n @param fileName {String} Name of the JSON file added in raw folder of Native Android(resources/Mobile/Native/Android/raw).\n @param stylingCallback {Function} Callback to be invoked.\n @Available Android\n @usage <pre> var mapObject = new kony.ui.Map(basicProperties, layoutProperties, platformSpecificPropertie);\n mapObject.loadRawResourceStyle(fileName, stylingCallback);\n\n function stylingCallback(booleanFlag, resource){\n   //booleanFlag - Returns true in callback if the style was successfully parsed\n   //              else false if problems were detected with the MapStyleOptions.\n   //resource - Name of the resource file (JSON) passed to the API is returned to call back function.\n   if(booleanFlag == true) {\n       kony.print(\"Styling is successful\" + resource);\n   } else {\n       kony.print(\"Styling failes\" + resource);\n   }\n }\n</pre>",
                        "!type": "fn(fileName: ?, stylingCallback: ?)"
                    },
                    "locationData": {
                        "!doc": "The location data to be highlighted on the map widget.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "mode": {
                        "!doc": "Specifies the map viewing mode.\n@property {Number}\n@Available Android,iPhone,iPad,SPA (iPhone/Android/BlackBerry/Windows NTH)/Playbook,Mobile Web(Basic),Mobile Web(BJS),Mobile Web(Advanced),Windows 7\n@access Read and Write",
                        "!type": "number"
                    },
                    "navigateTo": {
                        "!doc": " This method helps to navigate programmatically from one index to other index in the given list of locations shown on the map view.\n @param index {Number} Specifies the index of the pin to which the map should navigate to.<b>Mandatory</b>\n @param showcallout {Boolean} Indicates whether to show the callout on the pinafter navigating to the pin at the given index.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Creating the map\nvar mapBasicConf = {id: \"map1\", provider:constants.MAP_PROVIDER_GOOGLE, mapKey:\"0z5UtaSPUYj42f5qX0VAwmDGLX39Qxgbtcra0TA\", defaultPinImage: \"kmpin.png\", isVisible:true, locationData:[{lat: \"17.445775\", lon: \"78.3731\", name: \"Campus 1\", desc: \"My Office Campus\"}]};<br/>\nvar mapLayoutConf={margin:[20,40,50,20], containerWeight:100};<br/>\nvar mapPSPConf={};<br/>\n\n//Creating the Map\nvar map = new kony.ui.Map(mapBasicConf, mapLayoutConf, mapPSPConf);\n\n//navigateTo method call\nmap.navigateTo(0, true);</pre>",
                        "!type": "fn(index: ?, showcallout: ?)"
                    },
                    "navigateToLocation": {
                        "!doc": " This method allows you to navigate programmatically to the specified location. Based on the parameters passed it also displays the dropPin and callout.\n @param locationData{Object} Specifies the location data of a single location following the data format of the \"locationdata\" property on the map widget. <b>Mandatory</b>\n @param showcallout{Boolean} Indicates whether to show the callout on the pinafter navigating to the pin at the given index.\n @param dropPin{Boolean}Indicates whether to drop the pin at the given location or not.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Creating the map\nvar mapBasicConf = {id: \"map1\", provider:constants.MAP_PROVIDER_GOOGLE,mapKey:\"0z5UtaSPUYj42f5qX0VAwmDGLX39Qxgbtcra0TA\", defaultPinImage: \"kmpin.png\", isVisible:true};<br/>\nvar mapLayoutConf={margin: [20,40,50,20], containerWeight: 100};<br/>\nvar mapPSPConf={};<br/>\nvar map = new kony.ui.Map(mapBasicConf, mapLayoutConf, mapPSPConf);<br/>\nvar locationData = {lat: \"17.433451\",lon: \"78.432061\",name: \"Kids Park\",desc: \"Kids Park Near My Home in DownTown\"};<br/>\n//navigateToLocation method call\nmap.navigateToLocation(locationData, true, true);</pre>",
                        "!type": "fn(locationData: ?, showcallout: ?, dropPin: ?)"
                    },
                    "onBoundsChanged": {
                        "!doc": "This event callback is called when ever there is a change in content of map\n@param Map Widget {Widget}\n@param boundaryLocations {Object}\n@property {Event}\n@Available iOS, Android, Windows\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onClick": {
                        "!doc": "An event callback invoked by the platform when the user performs a click action on the map and location data with \"latitude\" and \"longitude\" are passed to the callback. This event is not raised if the user clicks on map pin and callout.\n@property {Event}\n@Available All Platforms except Server side Mobile Web\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onMapLoaded": {
                        "!doc": "This event callback will be called when the map rendering is complete\n@param Map Widget {Widget}\n@property {Event}\n@Available iOS, Android, Windows\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onPinClick": {
                        "!doc": "An event callback invoked by the platform when a map pin is clicked,passing the selected location data to the callback.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onSelection": {
                        "!doc": "An event callback invoked by the platform when the user clicks on a callout of the Map.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeCircle": {
                        "!doc": "This method is used to remove a Circle from the map.\n@param circleId {String} -[Mandatory] Specifies the id of the circle what is used while adding a polyline\n@Available iPhone, android, ipad, andriodtab\n@Returns None",
                        "!type": "fn(circleId: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "removePin": {
                        "!doc": " Removes an existing pin\n @param pin {Object} An existing pin object with possible keys as id, lat, lon, name, desc, etc. <b>Mandatory</b>\n @Available iOS, Android, Windows\n @access Write\n @usage <pre>\nvar pt = {\n    id : “pin id”,\n    lat: \"17.4947934\",\n    lon: \"78.3996441\",\n    name: \"KPHB\",\n    desc: \"Kukatpally\",\n    showCallout : true,\n    meta: {\n            color: \"green\",\n            label: \"A\"\n    }\n};\nmap.removePin( pt );</pre>",
                        "!type": "fn(pin: ?)"
                    },
                    "removePins": {
                        "!doc": " Removes the given existing pins\n @param pins {Array} An array of existing pin objects <b>Mandatory</b>\n @Available iOS, Android, Windows\n @access Write\n @usage <pre>\nvar pt = {\n    id : “pin id”,\n    lat: \"17.4947934\",\n    lon: \"78.3996441\",\n    name: \"KPHB\",\n    desc: \"Kukatpally\",\n    showCallout : true,\n    meta: {\n            color: \"green\",\n            label: \"A\"\n    }\n};\nmap.removePins( [pt] );</pre>",
                        "!type": "fn(pin: ?)"
                    },
                    "removePolygon": {
                        "!doc": "This method is used to remove a polygon from the map.\n@param polygonId {String} [Mandatory] Specifies the id of the polygon what is used while adding a polyline\n@Available iPhone, android, ipad, andriodtab\n@Returns None",
                        "!type": "fn(polygonId: ?)"
                    },
                    "removePolyline": {
                        "!doc": "This method is used to remove a polyline from the map.\n@param polylineID {String}Specifies the id of the polyline that is used while adding a polyline. This method is ignored if the given id is incorrect or not found. <b>Mandatory</b>\n@Available Available on iOS and Android platforms only.\n@access Write",
                        "!type": "fn(polylineID: ?)"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "searchRoutes": {
                        "!doc": "This method enables you to search routes between source & destination along with couple of configuration parameters and allows you to draw the routes on map widget using polyline api.\n@param searchCriteria {JSObject} A JSObject with set of search request configuration parameters that defines the search criteria for routes request\n@param successCallback {Function}  callback function that receives the search results when search request succeeds\n@param errorCallback {Function} Optional callback function that gets called when search request fails\n@Available iPhone, android, ipad, andriodtab\n@Returns Void",
                        "!type": "fn(searchCriteria: ?, successCallback: ?, errorCallback: ?)"
                    },
                    "setCalloutVisibility": {
                        "!doc": " Can show/hide the list of callouts\n @param visible {Boolean} Visibility to set <b>Mandatory</b>\n @param pins {Array} An array of existing pin objects <b>Mandatory</b>\n @Available iOS, Android, Windows\n @access Write\n @usage <pre>\nvar pt = {\n    id : “pin id”,\n    lat: \"17.4947934\",\n    lon: \"78.3996441\",\n    name: \"KPHB\",\n    desc: \"Kukatpally\",\n    showCallout : true,\n    meta: {\n            color: \"green\",\n            label: \"A\"\n    }\n};\nmap.setCalloutVisibility( true, [pt]);</pre>",
                        "!type": "fn(visible: ?, pins: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "updatePin": {
                        "!doc": " Updates an existing pin\n @param pin {Object} An existing pin object with possible keys as id, lat, lon, name, desc, etc. <b>Mandatory</b>\n @Available iOS, Android, Windows\n @access Write\n @usage <pre>\nvar pt = {\n    id : “pin id”,\n    lat: \"17.4947934\",\n    lon: \"78.3996441\",\n    name: \"KPHB\",\n    desc: \"Kukatpally\",\n    showCallout : true,\n    meta: {\n            color: \"green\",\n            label: \"A\"\n    }\n};\nmap.updatePin( pt );</pre>",
                        "!type": "fn(pin: ?)"
                    },
                    "updatePins": {
                        "!doc": " Updates the existing pins\n @param pins {Array} An array of existing pin objects <b>Mandatory</b>\n @Available iOS, Android, Windows\n @access Write\n @usage <pre>\nvar pt = {\n    id : “pin id”,\n    lat: \"17.4947934\",\n    lon: \"78.3996441\",\n    name: \"KPHB\",\n    desc: \"Kukatpally\",\n    showCallout : true,\n    meta: {\n            color: \"green\",\n            label: \"A\"\n    }\n};\nmap.updatePins( [pt] );</pre>",
                        "!type": "fn(pin: ?)"
                    },
                    "widgetDataMapForCallout": {
                        "!doc": "Specifies the mapping between the widget identifiers and data identifiers. The map must contain all widget data map referred across multiple templates, including the dynamic templates for each map location, if any.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zoomLevel": {
                        "!doc": "Sets the zoom level for the current map view. The range varies from platform to platform.\n@property {Number}\n@Available Android,iPhone,iPad\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "MenuContainer": {
                "!doc": "Creates a new MenuContainer object.\n@class kony.ui.MenuContainer\n@returns {kony.ui.MenuContainer}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.MenuContainer",
                "prototype": {
                    "addAll": {
                        "!doc": "     This method allows you to add new data to the menu container widget. The new data is appended to the existing data.\n     @param data{Array}Specifies an array to represent data as key value pairs.<b>Mandatory</b>\n     @access write\n     @Available Desktop Web Platform\n     @usage <pre>\n    //Defining the properties for a MenuContainer.\nvar mnuBasic = {id:\"menu1\", hoverSkin:\"mnuhovSkin\", activeSkin: \"mnuactSkin\",\ndata:[{template: hbox2,\n     label2: {text: \"News\", isVisble: false},\n     image2: \"btn.png\",\n     children: []\n  },\n  {template: hbox2,\n     label2: {text: \"Science\"},\n     image2: \"btn.png\",\n     children: []\n  },\n  {template: hbox2,\n     label2: {text: \"Sports\"},\n     image2: \"btn.png\",\n     children: [\n         {template: hbox2,\n               label2: {text: \"Football\"},\n               image2: \"btn.png\"\n         },\n         {template: hbox2,\n               label2: {text: \"Cricket\"},\n               image2: \"btn.png\",\n               children: [\n             {template: hbox2,\n                        label2: {text: \"India\"},\n                        image2: \"btn.png\",\n                        children: [\n                  {template: hbox2,\n                                label2: {text: \"Test Match\"},\n                                image2: \"btn.png\"\n                  },\n                  {template: hbox2,\n                                label2: {text: \"One Day Match\"},\n                                image2: \"btn.png\"\n                  }\n                   ]\n             },\n                 {template: hbox2,\n                        label2: {text: \"England\"},\n                        image2: \"btn.png\"\n                 },\n             {template: hbox2,\n                        label2: {text: \"Australia\"},\n                        image2: \"btn.png\"\n             }\n         }        ]\n   }\n], isVisible:true, menuItemTemplate: hbox2, skin: \"mnuSkin\", viewType: constants.MENU_CONTAINER_VIEW_DROPDOWNVIEW, isVisible: true, widgetDataMap: {label2: \"label2\", image2: \"image2\"} };\nvar mnuLayout = {padding:[5,5,5,5], margin:[5,5,5,5], containerWeight:100, paddingInPixel:true, marginInPixel:true, widgetAlignment:constants.WIDGET_ALIGN_TOP_LEFT};\nvar mnuPSP ={};\n\n//Creating the MenuContainer.\nvar menu1 = new kony.ui.MenuContainer(mnuBasic, mnuLayout, mnuPSP);\n\n//addAll method call.\nmenu1.addAll ([ {template: hbox2,\n           label2:{text: \"Politics\"},\n              image2: \"btn.png\",\n              children: []\n          }]);</pre>",
                        "!type": "fn(data: ?)"
                    },
                    "addDataAt": {
                        "!doc": "     This method allows you to add an array of menu items at a given index. The new data is placed before the index.\n     @param data{Object} Specifies the JSObject to represent data as key value pairs.<b>Mandatory</b>\n     @param index {Array} Specifies an array representing the index at which the menu item data needs to be added.<b>Mandatory</b>\n     @access write\n     @Available Desktop Web Platform\n     @usage <pre>\n    //Defining the properties for a MenuContainer.\nvar mnuBasic = {id:\"menu1\", hoverSkin:\"mnuhovSkin\", activeSkin: \"mnuactSkin\",\ndata:[{template: hbox2,\n     label2: {text: \"News\", isVisble: false},\n     image2: \"btn.png\",\n     children: []\n  },\n  {template: hbox2,\n     label2: {text: \"Science\"},\n     image2: \"btn.png\",\n     children: []\n  },\n  {template: hbox2,\n     label2: {text: \"Sports\"},\n     image2: \"btn.png\",\n     children: [\n         {template: hbox2,\n               label2: {text: \"Football\"},\n               image2: \"btn.png\"\n         },\n         {template: hbox2,\n               label2: {text: \"Cricket\"},\n               image2: \"btn.png\",\n               children: [\n             {template: hbox2,\n                        label2: {text: \"India\"},\n                        image2: \"btn.png\",\n                        children: [\n                  {template: hbox2,\n                                label2: {text: \"Test Match\"},\n                                image2: \"btn.png\"\n                  },\n                  {template: hbox2,\n                                label2: {text: \"One Day Match\"},\n                                image2: \"btn.png\"\n                  }\n                   ]\n             },\n                 {template: hbox2,\n                        label2: {text: \"England\"},\n                        image2: \"btn.png\"\n                 },\n             {template: hbox2,\n                        label2: {text: \"Australia\"},\n                        image2: \"btn.png\"\n             }\n         }        ]\n   }\n], isVisible:true, menuItemTemplate: hbox2, skin: \"mnuSkin\", viewType: constants.MENU_CONTAINER_VIEW_DROPDOWNVIEW, isVisible: true, widgetDataMap: {label2: \"label2\", image2: \"image2\"} };\nvar mnuLayout = {padding:[5,5,5,5], margin:[5,5,5,5], containerWeight:100, paddingInPixel:true, marginInPixel:true, widgetAlignment:constants.WIDGET_ALIGN_TOP_LEFT};\nvar mnuPSP ={};\n\n//Creating the MenuContainer.\nvar menu1 = new kony.ui.MenuContainer(mnuBasic, mnuLayout, mnuPSP);\n\n//addDataAt method call.\nmenu1.addDataAt ( {template: hbox2,\n              label2: {text: \"Politics\"},\n                 image2: \"btn.png\",\n                 children: []\n             }, 3);</pre>",
                        "!type": "fn(data: ?, Index: ?)"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget widget.The parent's widget space is distributed to its child widgets based on this weight factor.All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms except Win Mobile 6x.\n@access Read and Write",
                        "!type": "number"
                    },
                    "data": {
                        "!doc": "JS object which represents the actual menu item to be rendered in each row.\n@property {Object}\n@Available Desktop Web\n@access Read and Write"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "specifies the property to set menuContainer's visibility.\n@property {Boolean}\n@Available Desktop Web\n@access Read and Write",
                        "!type": "bool"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms except Mobile Web (basic).\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "menuItemTemplate": {
                        "!doc": "Indicates the common template to be used for each menu item while creating the menu items and filling the data.\n@property {Object}\n@Available Desktop Web\n@access Read and Write"
                    },
                    "onClick": {
                        "!doc": "An event callback which gets invoked when a menuitem is clicked.\n@property {Event}\n@Available Desktop Web\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "padding": {
                        "!doc": "specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeAll": {
                        "!doc": "     This method is used to remove all the menu items and sub menus from the menu container.\n     @access write\n     @Available Desktop Web Platform\n     @usage <pre>\n\n    //Defining the properties for a MenuContainer.\nvar mnuBasic = {id:\"menu1\", hoverSkin:\"mnuhovSkin\", activeSkin: \"mnuactSkin\",\ndata:[{template: hbox2,\n     label2: {text: \"News\", isVisble: false},\n     image2: \"btn.png\",\n     children: []\n  },\n  {template: hbox2,\n     label2: {text: \"Science\"},\n     image2: \"btn.png\",\n     children: []\n  },\n  {template: hbox2,\n     label2: {text: \"Sports\"},\n     image2: \"btn.png\",\n  }\n], isVisible:true, menuItemTemplate: hbox2, skin: \"mnuSkin\", viewType: constants.MENU_CONTAINER_VIEW_DROPDOWNVIEW, isVisible: true, widgetDataMap: {label2: \"label2\", image2: \"image2\"} };\nvar mnuLayout = {padding:[5,5,5,5], margin:[5,5,5,5], containerWeight:100, paddingInPixel:true, marginInPixel:true, widgetAlignment:constants.WIDGET_ALIGN_TOP_LEFT};\nvar mnuPSP ={};\n\n//Creating the MenuContainer.\nvar menu1 = new kony.ui.MenuContainer(mnuBasic, mnuLayout, mnuPSP);\n\n//removeAll method call.\nmenu1.removeAll ();</pre>",
                        "!type": "fn()"
                    },
                    "removeAt": {
                        "!doc": "     This method is used to remove the menu item from hierarchy based on the index provided.\n     *@param rowIndex{Number} Specifies an array representing the Index at which the menu item data needs to be removed.<b>Mandatory</b>\n     @access write\n     @Available Desktop Web Platform\n     @usage <pre>\n    //Defining the properties for a MenuContainer.\nvar mnuBasic = {id:\"menu1\", hoverSkin:\"mnuhovSkin\", activeSkin: \"mnuactSkin\",\ndata:[{template: hbox2,\n     label2: {text: \"News\", isVisble: false},\n     image2: \"btn.png\",\n     children: []\n  },\n  {template: hbox2,\n     label2: {text: \"Science\"},\n     image2: \"btn.png\",\n     children: []\n  },\n  {template: hbox2,\n     label2: {text: \"Sports\"},\n     image2: \"btn.png\",\n     children: [\n         {template: hbox2,\n               label2: {text: \"Football\"},\n               image2: \"btn.png\"\n         },\n         {template: hbox2,\n               label2: {text: \"Cricket\"},\n               image2: \"btn.png\"\n            }\n}       ]\n\n], isVisible:true, menuItemTemplate: hbox2, skin: \"mnuSkin\", viewType: constants.MENU_CONTAINER_VIEW_DROPDOWNVIEW, isVisible: true, widgetDataMap: {label2: \"label2\", image2: \"image2\"} };\nvar mnuLayout = {padding:[5,5,5,5], margin:[5,5,5,5], containerWeight:100, paddingInPixel:true, marginInPixel:true, widgetAlignment:constants.WIDGET_ALIGN_TOP_LEFT};\nvar mnuPSP ={};\n\n//Creating the MenuContainer.\nvar menu1 = new kony.ui.MenuContainer(mnuBasic, mnuLayout, mnuPSP);\n\n//removeAt method call.\nmenu1.removeAt ([0,1]);</pre>",
                        "!type": "fn(rowIndex: ?)"
                    },
                    "selectedMenuIndex": {
                        "!doc": "Indicates the selected Menu Item.Index start from 0.\n@property {Array}\n@Available Desktop Web\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "selectedMenuItem": {
                        "!doc": "Returns the selected menu item present at the selectedMenuIndex.\n@property {Array}\n@Available Desktop Web\n@access Read",
                        "!type": "[?]"
                    },
                    "setData": {
                        "!doc": "     This method allows you to set new data to the menuContainer widget. When you set new data, the existing data will be replaced with the new data.\n     *@param menubarRef{Array} Specifies an array of menu items.<b>Mandatory</b>\n     @access write\n     @Available Desktop Web Platform\n     @usage <pre>\n    //Defining the properties for a MenuContainer.\nvar mnuBasic = {id:\"menu1\", hoverSkin:\"mnuhovSkin\", activeSkin: \"mnuactSkin\",\ndata:[{template: hbox2,\n     label2: {text: \"Weather\"},\n     image2: \"btn.png\",\n     children: []\n  }\n], isVisible:true, menuItemTemplate: hbox2, skin: \"mnuSkin\", viewType: constants.MENU_CONTAINER_VIEW_DROPDOWNVIEW, widgetDataMap: {label2: \"label2\", image2: \"image2\"}  };\nvar mnuLayout = {padding:[5,5,5,5], margin:[5,5,5,5], containerWeight:100, paddingInPixel:true, marginInPixel:true, widgetAlignment:constants.WIDGET_ALIGN_TOP_LEFT};\nvar mnuPSP ={};\n\n//Creating the MenuContainer.\nvar menu1 = new kony.ui.MenuContainer(mnuBasic, mnuLayout, mnuPSP);\n\n//setData method call.\nmenu1.setData [\n  {template: hbox2,\n     label2: {text: \"News\", isVisble: false},\n     image2: \"btn.png\",\n     children: []\n  },\n  {template: hbox2,\n     label2: {text: \"Science\"},\n     image2: \"btn.png\",\n     children: []\n  },\n  {template: hbox2,\n     label2: {text: \"Sports\"},\n     image2: \"btn.png\",\n     children: [\n         {template: hbox2,\n               label2: {text: \"Football\"},\n               image2: \"btn.png\"\n         },\n         {template: hbox2,\n               label2: {text: \"Cricket\"},\n               image2: \"btn.png\",\n               children: [\n             {template: hbox2,\n                        label2: {text: \"India\"},\n                        image2: \"btn.png\",\n                        children: [\n                  {template: hbox2,\n                                label2: {text: \"Test Match\"},\n                                image2: \"btn.png\"\n                  },\n                  {template: hbox2,\n                                label2: {text: \"One Day Match\"},\n                                image2: \"btn.png\"\n                  }\n                   ]\n             },\n                 {template: hbox2,\n                        label2: {text: \"England\"},\n                        image2: \"btn.png\"\n                 },\n             {template: hbox2,\n                        label2: {text: \"Australia\"},\n                        image2: \"btn.png\"\n             }\n         }        ]\n   }\n];  </pre>",
                        "!type": "fn(menubarRef: ?)"
                    },
                    "setDataAt": {
                        "!doc": "     This method allows you to set/modify the menu item at a particular index in the hierarchy with in the menuContainer.\n     @param data{Object} Specifies the JSObject to represent data as key value pairs.<b>Mandatory</b>\n     @param index{Array} Specifies an array representing the index at which the menu item data needs to be added.<b>Mandatory</b>\n     @access write\n     @Available Desktop Web Platform\n     @usage <pre>\n    //Defining the properties for a MenuContainer.\nvar mnuBasic = {id:\"menu1\", hoverSkin:\"mnuhovSkin\", activeSkin: \"mnuactSkin\",\ndata:[{template: hbox2,\n     label2: {text: \"News\", isVisble: false},\n     image2: \"btn.png\",\n     children: []\n  },\n  {template: hbox2,\n     label2: {text: \"Science\"},\n     image2: \"btn.png\",\n     children: []\n  },\n  {template: hbox2,\n     label2: {text: \"Sports\"},\n     image2: \"btn.png\",\n     children: [\n         {template: hbox2,\n               label2: {text: \"Football\"},\n               image2: \"btn.png\"\n         },\n         {template: hbox2,\n               label2: {text: \"Cricket\"},\n               image2: \"btn.png\",\n               children: [\n             {template: hbox2,\n                        label2: {text: \"India\"},\n                        image2: \"btn.png\",\n                        children: [\n                  {template: hbox2,\n                                label2: {text: \"Test Match\"},\n                                image2: \"btn.png\"\n                  },\n                  {template: hbox2,\n                                label2: {text: \"One Day Match\"},\n                                image2: \"btn.png\"\n                  }\n                   ]\n             },\n                 {template: hbox2,\n                        label2: {text: \"England\"},\n                        image2: \"btn.png\"\n                 },\n             {template: hbox2,\n                        label2: {text: \"Australia\"},\n                        image2: \"btn.png\"\n             }\n         }        ]\n   }\n], isVisible:true, menuItemTemplate: hbox2, skin: \"mnuSkin\", viewType: constants.MENU_CONTAINER_VIEW_DROPDOWNVIEW, widgetDataMap: {label2: \"label2\", image2: \"image2\"} };\nvar mnuLayout = {padding:[5,5,5,5], margin:[5,5,5,5], containerWeight:100, paddingInPixel:true, marginInPixel:true, widgetAlignment:constants.WIDGET_ALIGN_TOP_LEFT};\nvar mnuPSP ={};\n\n//Creating the MenuContainer.\nvar menu1 = new kony.ui.MenuContainer(mnuBasic, mnuLayout, mnuPSP);\n\n//addDataAt method call.\nmenu1.setDataAt ( {template: hbox2,\n              label2: {text: \"Politics\"},\n                 image2: \"btn.png\" ,\n                 children: []\n             }, [0,3);</pre>",
                        "!type": "fn(data: ?, index: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "skin": {
                        "!doc": "Specifies the skin for the menuContainer widget.\n@property {String}\n@Available Desktop Web\n@access Read and Write",
                        "!type": "string"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "viewType": {
                        "!doc": "Specifies the viewType of the menuContainer should display.\n@property {Number}\n@Available Desktop Web\n@access Read and Write",
                        "!type": "string"
                    },
                    "widgetDataMap": {
                        "!doc": "JS object which indicates the mapping between widget identifiers and data identifiers.\n@property {Object}\n@Available Desktop Web\n@access Read and Write"
                    }
                }
            },
            "NativeContainer": {
                "!doc": "Creates a new NativeContainer object.\n@class kony.ui.NativeContainer\n@returns {kony.ui.NativeContainer}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.NativeContainer",
                "prototype": {
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "getContainerView": {
                        "!doc": "This method returns the NativeContainer layout view.\n@param NativeContainer View\n@Available iOS and Android\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available iOS and Android\n@access Read",
                        "!type": "string"
                    },
                    "isVisible": {
                        "!doc": "Specifies the visibility of the widget on the form.\n@property {Boolean}\n@Available iOS and Android\n@access Read and Write",
                        "!type": "bool"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "onCleanup": {
                        "!doc": "Using the onCleanup event, you can clean up the views/widgets created using the onCreated event, when the form is being hidden. That is, when the form transition happens from one form to another..\n@param NativeContainer View to which children are added.\n@Available iOS and Android\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onCreated": {
                        "!doc": "The onCreated callback event allows you to create and add native widgets/views to the NativeContainer, which is passed as a parameter to this callback.\n@param NativeContainer View to which children can be added.\n@Available iOS and Android\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onDidMoveToParentViewController": {
                        "!doc": "This callback event is invoked after the view controller is added or removed from the view controller container.\n@Available iOS and Android\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onLayoutSubviews": {
                        "!doc": "Using this callback, you can lay out all sub views.\n@Available iOS and Android\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onOrientationChange": {
                        "!doc": "This event allows you to change the orientation of the form from portrait to landscape and vice versa.\n@param Constants.DEVICE_ORIENTATION_PORTRAIT {} On the device the form is always displayed such that the horizontal sides are shorter than vertical sides.\n@param Constants.DEVICE_ORIENTATION_LANDSCAPE {} On the device the form is always turned sideways so that the height of the screen becomes width.\n@Available iOS and Android\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onViewDidAppear": {
                        "!doc": "This callback event is invoked when the native layout view has appeared.\n@Available iOS and Android\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onViewDidDisappear": {
                        "!doc": "This callback event is invoked when the native layout view is disappeared.\n@Available iOS and Android\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onViewDidLoad": {
                        "!doc": "This callback event is invoked when the native layout view is disappeared.\n@Available iOS and Android\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onViewWillAppear": {
                        "!doc": "This callback event is invoked when the native layout view is about to appear on the screen.\n@Available iOS and Android\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onViewWillDisppear": {
                        "!doc": "This callback is invoked when the actual view is about to get disappear.\n@Available iOS and Android\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onWillMoveToParentViewController": {
                        "!doc": "This callback is invoked when the actual view is about to get disappear.\n@Available iOS and Android\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "type": {
                        "!doc": "Denotes the type of the NativeContainer Widget in the JS layer.\n@property {String}\n@Available iOS and Android\n@access Read and Write",
                        "!type": "string"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "ObjectSelector3D": {
                "!doc": "Creates a new ObjectSelector3D object.\n@class kony.ui.ObjectSelector3D\n@returns {kony.ui.ObjectSelector3D}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.ObjectSelector3D",
                "prototype": {
                    "addModel": {
                        "!doc": " This method allows you to add a new model to the widget's working set of models.\n @param modelId{Number}User defined identifier which can be used to refer to this model.<b>Mandatory</b>\n @param resourceName{String} Specifies the name of the resource to load model data.<b>Mandatory</b>\n @param scale{Number}Specifies the scale factor to reduce/increase the size of the loaded model.<b>Mandatory</b>\n @Available Windows Phone (Mango)\n @access Write\n @usage <pre>\n//Defining the properties for ObjectSelector3D.<br/>\nvar objBasic = {id:\"objThreeD\",skin:\"ObjSkin\",focusSkin:\"ObjFSkin\",text:\"Seat reservation\",isVisible:true};<br/>\nvar objLayout = {widgetAlignment:constants.WIDGET_ALIGN_CENTER, padding:[5,5,5,5], margin:[5,5,5,5], contentAlignment:constants.CONTENT_ALIGN_CENTER, containerWeight:99, paddingInPixel:true, marginInPixel:true, hExpand:false, vExpand:false};<br/>\n\n//Creating the ObjectSelector3D.<br/>\nvar objThreeD =new kony.ui.ObjectSelector3D(objBasic, objLayout, {}) ;<br/>\n\n//addModel method call.<br/>\nobjThreeD.addModel(1, \"Flight_Down_Up_01\", 0.371);</pre>",
                        "!type": "fn(modelID: ?, resourceName: ?, scale: ?)"
                    },
                    "clearAllData": {
                        "!doc": " This method allows you to clear all the data set on the widget.\n @Available Windows Phone (Mango)\n @access Write\n @usage <pre>\n//Defining the properties for ObjectSelector3D<br/>\nvar objBasic = {id:\"objThreeD\", skin:\"ObjSkin\", focusSkin:\"ObjFSkin\", text:\"Seat reservation\", isVisible:true};<br/>\nvar objLayout = {widgetAlignment:constants.WIDGET_ALIGN_CENTER, padding:[5,5,5,5], margin:[5,5,5,5], contentAlignment:constants.CONTENT_ALIGN_CENTER, containerWeight:99, paddingInPixel:true, marginInPixel:true, hExpand:false, vExpand:false};<br/>\n\n//Creating the ObjectSelector3D.<br/>\nvar objThreeD =new kony.ui.ObjectSelector3D(objBasic, objLayout, {}) ;<br/>\n\n//clearAllData method call.<br/>\nobjThreeD.clearAllData();</pre>",
                        "!type": "fn()"
                    },
                    "containerWeight": {
                        "!doc": "The percentage of width to be allocated by its parent widget. The parent's widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox\n@property {Number}\n@Available Windows Phone (Mango)\n@access Read and Write",
                        "!type": "number"
                    },
                    "defineSpecialModels": {
                        "!doc": " This method allows you to define the models to the widget.\n @param unselectedModelId{Number}Specifies the model which represents unselected items.<b>Mandatory</b>\n @param selectedModelId {Number} Specifies the name of the resource to load model data.<b>Mandatory</b>\n @Available Windows Phone (Mango)\n @access Write\n @usage <pre>\n//Defining the properties for ObjectSelector3D<br/>\nvar objBasic = {id:\"objThreeD\", skin:\"ObjSkin\", focusSkin:\"ObjFSkin\", text:\"Seat reservation\", isVisible:true};<br/>\nvar objLayout = {widgetAlignment:constants.WIDGET_ALIGN_CENTER, padding:[5,5,5,5], margin:[5,5,5,5], contentAlignment:constants.CONTENT_ALIGN_CENTER, containerWeight:99, paddingInPixel:true, marginInPixel:true, hExpand:false, vExpand:false};<br/>\n\n//Creating the ObjectSelector3D.<br/>\nvar objThreeD =new kony.ui.ObjectSelector3D(objBasic, objLayout, {}) ;<br/>\n\n//DefineSpecialModels method call<br/>\nobjThreeD.defineSpecialModels(3, 4);</pre>",
                        "!type": "fn(unselectedModelID: ?, selectedModelId: ?)"
                    },
                    "focusSkin": {
                        "!doc": "Specifies the look and feel of the ObjectSelector3D when in focus.\n@property {String}\n@Available Windows Phone (Mango)\n@access Read and Write",
                        "!type": "string"
                    },
                    "getSelectedCells": {
                        "!doc": " This method allows you to retrieve the cells that are currently selected in the widget.\n @Available Windows Phone (Mango)\n @access Write\n @usage <pre>\n//Defining the properties for ObjectSelector3D.<br/>\nvar objBasic = {id:\"objThreeD\", skin:\"ObjSkin\", focusSkin:\"ObjFSkin\", text:\"Seat reservation\", isVisible:true};<br/>\nvar objLayout = {widgetAlignment:constants.WIDGET_ALIGN_CENTER, padding:[5,5,5,5], margin:[5,5,5,5], contentAlignment:constants.CONTENT_ALIGN_CENTER, containerWeight:99, paddingInPixel:true, marginInPixel:true, hExpand:false, vExpand:false};<br/>\n\n//Creating the ObjectSelector3D.<br/>\nvar objThreeD =new kony.ui.ObjectSelector3D(objBasic, objLayout, {}) ;<br/>\n\n//getSelectedCells method call<br/>\nvar result=objThreeD.getSelectedCells();</pre>",
                        "!type": "fn()"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available Windows Phone (Mango)\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available Windows Phone (Mango)\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "This property controls the visibility of a widget on the form.\n@property {Boolean}\n@Available Windows Phone (Mango)\n@access Read and Write",
                        "!type": "bool"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available Windows Phone (Mango)\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "onSelectionDone": {
                        "!doc": "An event callback that is invoked by the platform when an Image is selected in ObjectSelector3D.\n@property {Event}\n@Available Windows Phone (Mango)\n@access  Read and Write",
                        "!type": "fn()"
                    },
                    "padding": {
                        "!doc": "specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available Windows Phone (Mango)\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "setCameraProperties": {
                        "!doc": " This method allows you to set the properties of the camera while in walk-through mode.\n @param movementSpeed{Number}Specifies the speed at which the camera should move(in seconds).<b>Mandatory</b>\n @param height{Number} Specifies the height at which the camera will be placed above the XZ plane.<b>Mandatory</b>\n @param entryLocations {Object}Specifies the list of cell locations in the format (row, column).<b>Mandatory</b>\n @Available Windows Phone (Mango)\n @access Write\n @usage <pre>\n//Defining the properties for ObjectSelector3D.<br/>\nvar objBasic = {id:\"objThreeD\", skin:\"ObjSkin\", focusSkin:\"ObjFSkin\", text:\"Seat reservation\", isVisible:true};<br/>\nvar objLayout = {widgetAlignment:constants.WIDGET_ALIGN_CENTER, padding:[5,5,5,5], margin:[5,5,5,5], contentAlignment:constants.CONTENT_ALIGN_CENTER, containerWeight:99, paddingInPixel:true, marginInPixel:true, hExpand:false, vExpand:false};<br/>\n\n//Creating the ObjectSelector3D.<br/>\nvar objThreeD =new kony.ui.ObjectSelector3D(objBasic, objLayout, {}) ;<br/>\n\n//setCameraProperties method call\nobjThreeD.setCameraProperties(1.5, 2.5, [ [1,4] ]);</pre>",
                        "!type": "fn(movementSpeed: ?, height: ?, entryLocations: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available Windows Phone (Mango)\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available Windows Phone (Mango)\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setMapData": {
                        "!doc": " This method allows you to define the map of objects which will be presented to the user for selecting the items.\n @param rows{Number}Specifies the number of rows of the map.<b>Mandatory</b>\n @param columns{Number} Specifies the number of columns of the map.<b>Mandatory</b>\n @param cellWidth{Number}Specifies the the width (in world units) for each object.<b>Mandatory</b>\n @param cellDepth{Number}Specifies the depth (in world units) for each object.<b>Mandatory</b>\n @param data{Object}Specifies a two-dimensional array which specifies which model is present in each cell of the map.<b>Mandatory</b>\n @Available Windows Phone (Mango)\n @access Write\n @usage <pre>\n//Defining the properties for ObjectSelector3D.<br/>\nvar objBasic = {id:\"objThreeD\", skin:\"ObjSkin\", focusSkin:\"ObjFSkin\", text:\"Seat reservation\", isVisible:true};<br/>\nvar objLayout = {widgetAlignment:constants.WIDGET_ALIGN_CENTER, padding:[5,5,5,5], margin:[5,5,5,5], contentAlignment:constants.CONTENT_ALIGN_CENTER, containerWeight:99, paddingInPixel:true, marginInPixel:true, hExpand:false, vExpand:false};<br/>\n\n//Creating the ObjectSelector3D.<br/>\nvar objThreeD =new kony.ui.ObjectSelector3D(objBasic, objLayout, {}) ;<br/>\n\n//setMapData method call<br/>\nobjThreeD.setMapData(12, 7, 1, 1.774,[\n0, 6, 6, 7, 6, 6, 0,\n5, 3, 2, 1, 2, 3, 5,\n5, 3, 3, 1, 3, 3, 5,\n5, 3, 3, 1, 3, 3, 5,\n5, 3, 3, 1, 3, 3, 5,\n5, 3, 3, 1, 3, 3, 5,\n5, 3, 3, 1, 3, 3, 5,\n5, 3, 3, 1, 3, 3, 5,\n5, 3, 3, 1, 3, 3, 5,\n5, 3, 3, 1, 3, 3, 5,\n5, 3, 3, 1, 3, 3, 5,\n5, 2, 2, 1, 2, 2, 5,]);</pre>",
                        "!type": "fn(rows: ?, columns: ?, cellWidth: ?, cellDepth: ?, data: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setRequiredSelectionsCount": {
                        "!doc": " This method allows you to define the number of objects the user must select for the selection process to be considered complete.\n @param count{Number}Specifies the number of objects the user must select.<b>Mandatory</b>\n @Available Windows Phone (Mango)\n @access Write\n @usage <pre>\n//Defining the properties for ObjectSelector3D.<br/>\nvar objBasic = {id:\"objThreeD\", skin:\"ObjSkin\", focusSkin:\"ObjFSkin\", text:\"Seat reservation\", isVisible:true};<br/>\nvar objLayout = {widgetAlignment:constants.WIDGET_ALIGN_CENTER, padding:[5,5,5,5], margin:[5,5,5,5], contentAlignment:constants.CONTENT_ALIGN_CENTER, containerWeight:99, paddingInPixel:true, marginInPixel:true, hExpand:false, vExpand:false};<br/>\n\n//Creating the ObjectSelector3D.<br/>\nvar objThreeD =new kony.ui.ObjectSelector3D(objBasic, objLayout, {}) ;<br/>\n\n//setRequiredSelectionsCount method call.<br/>\nobjThreeD.setRequiredSelectionsCount(3);</pre>",
                        "!type": "fn(count: ?)"
                    },
                    "setSelectedCells": {
                        "!doc": " This method allows you to identify the cells that are initially selected in the map.\n @param array{Object}Contains a list of cell locations with the format{ row, column}.<b>Mandatory</b>\n @Available Windows Phone (Mango)\n @access Write\n @usage <pre>\n//Defining the properties for ObjectSelector3D.<br/>\nvar objBasic = {id:\"objThreeD\", skin:\"ObjSkin\", focusSkin:\"ObjFSkin\", text:\"Seat reservation\", isVisible:true};<br/>\nvar objLayout = {widgetAlignment:constants.WIDGET_ALIGN_CENTER, padding:[5,5,5,5], margin:[5,5,5,5], contentAlignment:constants.CONTENT_ALIGN_CENTER, containerWeight:99, paddingInPixel:true, marginInPixel:true, hExpand:false, vExpand:false};<br/>\n\n//Creating the ObjectSelector3D.<br/>\nvar objThreeD =new kony.ui.ObjectSelector3D(objBasic, objLayout, {}) ;<br/>\n\n//setSelectedCells method call<br/>\nobjThreeD.setSelectedCells([ [4, 3], [5, 5] ] );</pre>",
                        "!type": "fn(array: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available Windows Phone (Mango)\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "skin": {
                        "!doc": "Specifies a background skin for ObjectSelector3D widget.\n@property {String}\n@Available Windows Phone (Mango)\n@access Read and Write",
                        "!type": "string"
                    },
                    "text": {
                        "!doc": "Specifies a general or descriptive text for the ObjectSelector3D widget.\n@property {String}\n@Available Windows Phone (Mango)\n@access Read and Write",
                        "!type": "string"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    }
                }
            },
            "Phone": {
                "!doc": "Creates a new Phone object.\n@class kony.ui.Phone\n@returns {kony.ui.Phone}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.Phone",
                "prototype": {
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget. The parent widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "contentAlignment": {
                        "!doc": "Specifies the alignment of the text on the Phone with respect to its boundaries.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "focusSkin": {
                        "!doc": "Specifies the look and feel of the Phone when in focus.\n@property {String}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "string"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "isVisible": {
                        "!doc": "Specifies the visibility of the widget on the form.\n@property {Boolean}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "bool"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "padding": {
                        "!doc": "Specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "rawBytes": {
                        "!doc": "Specifies the rawbytes representing an Image (usually the image captured from the camera) that can be used as a background for the Call.\n@property {Object}\n@Available All Platforms except on all Mobile Web platforms\n@access Read and write"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "skin": {
                        "!doc": "Specifies the look and feel of the Phone when not in focus.\n@property {String}\n@Available All Platforms except on all Mobile Web platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "text": {
                        "!doc": "Specifies a general or descriptive text for the Phone widget.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "PickerView": {
                "!doc": "Creates a new PickerView object.\n@class kony.ui.PickerView\n@returns {kony.ui.PickerView}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.PickerView",
                "prototype": {
                    "accessibilityConfig": {
                        "!doc": "Specifies the accessibility configuration property for the widget.\n@property {Object}\n@Available iPhone, Android, SPA-iPhone, and SPA-Android Platforms\n@access Read and Write\n@usage <pre>\n   accessibilityConfig =  {\n       \"a11yHidden\": false,\n       \"a11yValue\": \"Your text goes here\",\n       \"a11yLabel\": \"Your text goes here\",\n       \"a11yHint\": \"Your text goes here\"\n   }</pre>"
                    },
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget. The parent widget space is distributed to its child widgets based on this weight factor.All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms except on all Server side Mobile Web, Windows, SPA, and Desktop Web platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "createAnimation": {
                        "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                        "!type": "fn(animationDef: ?)"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "enableHapticFeedback": {
                        "!doc": "This property allows you to enable or disable haptic feedback.\n@property {Boolean}\n@Available iOS, Android, Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "focusSkin": {
                        "!doc": "Specifies the look and feel of the PickerView widget when it is in focus.\n@property {String}\n@Available All Platforms except iOS, Desktop Web, Windows, SPA, and on all Server side Mobile Web platforms.\n@access Read and Write",
                        "!type": "string"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms except on all Server side Mobile Web, Windows, SPA, and Desktop Web platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms except on all Server side Mobile Web, Windows, SPA, and Desktop Web platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies a property to set widget visibility.\n@property {Boolean}\n@Available All Platforms except on all Server side Mobile Web, Windows, SPA, and Desktop Web platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "layoutType": {
                        "!doc": "Specifies if the arrangement of the widgets either in free form or horizontal or vertical direction (kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, or kony.flex.FLOW_VERTICAL).\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms except on all Server side Mobile Web, Windows, SPA, and Desktop Web platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "masterData": {
                        "!doc": "Specifies the set of values that must be displayed for the user to make a selection from the available choices.\n@property {Array}\n@Available All Platforms except on all Server side Mobile Web, Windows, SPA, and Desktop Web platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "masterDataMap": {
                        "!doc": "Specifies the set of values from which you can make one or more selections. You must set the values from the code.\n@property {Array}\n@Available All Platforms except on all Server side Mobile Web, Windows, SPA, and Desktop Web platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onSelection": {
                        "!doc": "An event callback that is invoked by the platform when the component selection changes.\n@property {Event}\n@Available All Platforms except on all Server side Mobile Web, Windows, SPA, and Desktop Web platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchEnd": {
                        "!doc": "An event callback is invoked by the platform when the user touch is released from the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchMove": {
                        "!doc": "An event callback is invoked by the platform when the touch moves on the touch surface continuously until the movement ends. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchStart": {
                        "!doc": "An event callback is invoked by the platform when the user touches the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "selectedKeyValues": {
                        "!doc": "Returns the array of selected key-value pairs selected from the masterdata representing the selected key value.\n@property {Array}\n@Available All Platforms except on all Server side Mobile Web, Windows, SPA, and Desktop Web platforms\n@access Read",
                        "!type": "[?]"
                    },
                    "selectedKeys": {
                        "!doc": "If you create a PickerView with multiple values, you can choose to show specific values as selected when the PickerView is rendered. This returns the array of selected keys from the masterdata representing the selected key.\n@property {Array}\n@Available All Platforms except on all Server side Mobile Web, Windows, SPA, and Desktop Web platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "setComponentData": {
                        "!doc": " This method Provides the ability to set the data for a given component with in the pickerview.\n @param componentIndex{Number} Specifies the component data to be set to the pickerview.<b>Mandatory</b>\n @param ArrayofRows{Array} Specifies the data in array format.<b>Mandatory</b>\n @Available All Platforms except on all Server side Mobile Web, Windows, SPA, and Desktop Web platforms\n @access Write\n @usage <pre>\n//Defining the properties for a PickerView with id:\"picker\"</br>\nvar pickerBasic = {id:\"picker\",info:{key:\"PickerView\"}, skin:\"pickerSkin\", focusSkin:\"pickerFSkin\", masterData:[[[\"y1\",\"2009\"], [\"y2\",\"2010\"],[\"y3\",\"2011\"], 40],[[\"m1\",\"Jan\"], [\"m2\", \"Feb\"],[\"m3\",\"Mar\"], [\"m4\",\"Apr\"], [\"m5\",\"May\"],[\"m6\",\"Jun\"], [\"m7\",\"Jul\"], 60]], isVisible:true, selectedKeys:[\"y2\",\"m1\"] };</br>\nvar pickerLayout = {margin:[5,5,5,5], marginInPixel:true, widgetAlignment:constants.WIDGET_ALIGN_CENTER, hExpand:true, containerWeight:99};</br>\n\n//Creating the PickerView.</br>\nvar picker = new kony.ui.PickerView(pickerBasic, pickerLayout, {});</br>\n\n//setComponentData method call\npicker.setComponentData(2,[[\"1\",\"2008\"] , [\"2\",\"2009\"] , [\"3\",\"2010\"], [\"4\", \"2011\"],[\"5\", \"2012\"]]);</pre>",
                        "!type": "fn(componentIndex: ?, Arrayofrows: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on all Server side Mobile Web, Windows, SPA, and Desktop Web platforms\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Server side Mobile Web, Windows, SPA, and Desktop Web platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setSelectedKeyInComponent": {
                        "!doc": " This method allows you to set a particular value in the component data of a PickerView widget as selected.\n @param key{String} Specifies the key of the component.<b>Mandatory</b>\n @param componentIndex{Number} Specifies the component data to be set to the pickerview.<b>Mandatory</b>\n @Available All Platforms except on all Server side Mobile Web, Windows, SPA, and Desktop Web platforms\n @access Write\n @usage <pre>\n//Defining the properties for a PickerView with id:\"picker\".</br>\nvar pickerBasic = {id:\"picker\",info:{key:\"PickerView\"}, skin:\"pickerSkin\", focusSkin:\"pickerFSkin\", masterData:[[[\"y1\",\"2009\"],[\"y2\",\"2010\"], [\"y3\",\"2011\"], 40],[[\"m1\",\"Jan\"], [\"m2\", \"Feb\"],[\"m3\",\"Mar\"], [\"m4\",\"Apr\"], [\"m5\",\"May\"],[\"m6\",\"Jun\"], [\"m7\",\"Jul\"], 60]], isVisible:true, selectedKeys:[\"y2\",\"m1\"] };</br>\nvar pickerLayout = {margin:[5,5,5,5], marginInPixel:true, widgetAlignment:constants.WIDGET_ALIGN_CENTER, hExpand:true, containerWeight:70};</br>\n\n//Creating the PickerView.</br>\nvar picker = new kony.ui.PickerView(pickerBasic, pickerLayout, {});</br>\n\n//setSelectedKeyInComponent method call</br>\npicker.setSelectedKeyInComponent (\"m2\", 2);</pre>",
                        "!type": "fn(key: ?, componentIndex: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Server side Mobile Web, Windows, SPA, and Desktop Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "skin": {
                        "!doc": "Specifies the look and feel of the skin which is applied at the widget level.\n@property {String}\n@Available All Platforms except on all Server side Mobile Web, Windows, SPA, and Desktop Web platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "viewType": {
                        "!doc": "Facilitates to select a view of the PickerView Widget.\n@property {String}\n@Available Android\n@access Read and Write",
                        "!type": "string"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "Popup": {
                "!doc": "Creates a new Popup object.\n@class kony.ui.Popup\n@returns {kony.ui.Popup}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.Popup",
                "prototype": {
                    "accessibilityConfig": {
                        "!doc": "Specifies the accessibility configuration property for the widget.\n@property {Object}\n@Available iPhone, Android, and SPA-iPhone Platforms\n@access Read and Write\n@usage <pre>\n   var accessibilityConfig = {\n       \"a11yLabel\": \"Your text goes here\",\n   }</pre>"
                    },
                    "add": {
                        "!doc": " This method is used to add widgets to the popup container.\n @param widgets {Object} Specifies a list of all widgets to be added.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining properties for a Popup.<br/>\nvar popBasic = {id:\"popUp\", title:\"PopUP\",skin:\"popSkin\",isModal:true, transparencyBehindThePopup:100};<br/>\nvar popLayout = {containerWeight:100, padding:[5,5,5,5]};<br/>\nvar popPSP = {};<br/>\n\n//Creating the Popup <br/>\nvar popUp = new kony.ui.Popup(popBasic, popLayout, popPSP);<br/>\n\n//Adding a label and a button widgets to the popUp. Here label and button widgets should be created already and made accessible<br/>\npopUp.add(lbl, btn);</pre>",
                        "!type": "fn(widgets: ?)"
                    },
                    "addAt": {
                        "!doc": " This method is used to add widgets to the popup container at the specified index.\n @param widgetref {Object} Reference of the name of the widget.<b>Mandatory</b>\n @param index {Number} Index number at which the widget is to be added.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining properties for a Popup.<br/>\nvar popBasic = {id:\"popUp\", title:\"PopUP\", skin:\"popSkin\", isModal:true, transparencyBehindThePopup:100};<br/>\nvar popLayout ={containerWeight:100, padding:[5,5,5,5]};<br/>\nvar popPSP = {};<br/>\n\n//Creating the Popup<br/>\nvar popUp = new kony.ui.Popup(popBasic, popLayout, popPSP);<br/>\n\n//Adding label to the popUp at 15th index Position. Here label should be created already and made accessible.<br/>\npopUp.addAt(lbl,15);</pre>",
                        "!type": "fn(widgetref: ?, index: ?)"
                    },
                    "addWidgets": {
                        "!doc": "An event callback invoked by the platform when show method of popup is called for first time after its construction.\n@property {Event}\n@Available All Platforms\n@access  Write",
                        "!type": "fn()"
                    },
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "bounces": {
                        "!doc": "Specifies the whether the scroll view bounces past the edge of the content and back again. When set to true the scroll view bounce is applied.\n@property {Boolean}\n@Available Available on iOS platform only.\n@access Read and Write",
                        "!type": "bool"
                    },
                    "containerHeight": {
                        "!doc": "Specifies the available height of the container in terms of percentage. The percentage is with reference to the value of containerHeightReference property.\n@property {Number}\n@Available Available on all platforms except on all Server side Mobile Web and Desktop Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "containerHeightReference": {
                        "!doc": "Specifies the reference for the height of the container based on option that you set for containerHeight. The container height percentage is calculated based on eigher CONTAINER_HEIGHT_BY_FORM_REFERENCE or CONTAINER_HEIGHT_BY_PARENT_WIDTH.\n@property {Number}\n@Available Available on all platforms except on all Server side Mobile Web and Desktop Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be occupied by the Popup with respect to its parent form width.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "createAnimation": {
                        "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                        "!type": "fn(animationDef: ?)"
                    },
                    "destroy": {
                        "!doc": " This method is used to destroy any unwanted Popups at any point in time, and allows increasing the application life by reducing the memory usage.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining properties for a Popup<br/>\nvar popBasic = {id:\"popUp\", title:\"PopUP\", skin:\"popSkin\", isModal:true, transparencyBehindThePopup:100};<br/>\nvar popLayout = {containerWeight:100, padding:[5,5,5,5]};<br/>\nvar popPSP = {};<br/>\n\n//Creating the Popup<br/>\nvar popUp = new kony.ui.Popup(popBasic, popLayout, popPSP);<br/>\n\n//destroy method call<br/>\npopUp.destroy();</pre>",
                        "!type": "fn()"
                    },
                    "dismiss": {
                        "!doc": " This method is used to dismiss the popup on which this method is called.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining properties for a Popup<br/>\nvar popBasic = {id:\"popUp\", title:\"PopUP\", skin:\"popSkin\", isModal:true, transparencyBehindThePopup:100};<br/>\nvar popLayout = {containerWeight:100,padding:[5,5,5,5]};<br/>\nvar popPSP = {};<br/>\n\n//Creating the Popup.<br/>\nvar popUp = new kony.ui.Popup(popBasic, popLayout, popPSP);<br/>\n\n//dismiss method call<br/>\npopUp.dismiss();</pre>",
                        "!type": "fn()"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "enableScrolling": {
                        "!doc": "Enables the scrolling of the form when containerHeight is given to the popup.\n@property {Boolean}\n@Available Available on all platforms excelt Server side Mobile Web and Desktop Web platforms.\n@access Read and Write",
                        "!type": "bool"
                    },
                    "extendTop": {
                        "!doc": "Specifies the popup content to scroll under the App Menu. This property is supported in iOS7 and above only. This property is also applicable on the Application Level properties under Application Properties > Native > iPhone/iPad > Platform Settings. The property set at Form level takes precedence over Application level.\n@property {Boolean}\n@Available Available on iOS platform.\n@access Read and Write",
                        "!type": "bool"
                    },
                    "footers": {
                        "!doc": "A footer is a section of the popup that is docked at the bottom of the popup (does not scroll along with the content of the popup). It accepts an array of kony.ui.Box object references with horizontal orientation that are added as footer docked at the bottom of the popup. These footers can be reused across forms.\n@property {Array}\n@Available All Platforms\n@access Read",
                        "!type": "[?]"
                    },
                    "headers": {
                        "!doc": "A header is a section of the Popup that is docked at the top of the Popup (does not scroll along with the content of the Popup). It accepts an array of kony.ui.Box object references with horizontal orientation that are added as header docked at the top of the Popup. These headers can be reused across Popups.\n@property {Array}\n@Available All Platforms\n@access Read",
                        "!type": "[?]"
                    },
                    "hideTitleBar": {
                        "!doc": " This method gives you the control to hide a titlebar within a popup.\n @Available Available on iOS platform only\n @access Write\n @usage <pre>\n//Defining properties for a Popup.<br/>\nvar popBasic = {id:\"popUp\", title:\"PopUP\",skin:\"popSkin\",isModal:true, transparencyBehindThePopup:100};<br/>\nvar popLayout = {containerWeight:100, padding:[5,5,5,5]};<br/>\nvar popPSP = {};<br/>\n\n//Creating the Popup <br/>\nvar popUp = new kony.ui.Popup(popBasic, popLayout, popPSP);<br/>\n\n//hideTitleBar method call<br/>\npopUp.hideTitleBar();</pre>",
                        "!type": "fn()"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "inTransitionConfig": {
                        "!doc": "Specifies the configuration to be used when the user arrives on this form. It accepts hash values.\n@property {Object}\n@Available All Platforms except Mobile Web platforms.\n@access Read and Write"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "init": {
                        "!doc": "This event gets called only once in popup life cycle that is when the popup is ready with its widget hierarchy.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "isModal": {
                        "!doc": "In user interface design, a modal window, which is a child window that requires users to interact with it before they can return to operating the parent application, thus preventing the workflow on the application main window.\n@property {Boolean}\n@Available All Platforms except Mobile Web platforms.\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "navigateTo": {
                        "!doc": " This method is used to navigate from one popup to other popup. The popup on which this method is called remains displayed while the content of the popup changes from current popup to given popup. This method is applicable only when the popupStyle is set as POPUP_TYPE_NATIVE_STYLE.\n @param popupinstance {Object} - Reference to anonther popup instance<b>Mandatory</b>.\n @param config {Object} - Specifies a list of widgets to be added <b>Optional</b>.\n @Available Available on iPad Platform only\n @access Write\n @usage <pre>\n//Defining properties for a Popup.<br/>\nvar popBasic = {id:\"popUp\", title:\"PopUP\",skin:\"popSkin\",isModal:true, transparencyBehindThePopup:100};<br/>\nvar popLayout = {containerWeight:100, padding:[5,5,5,5]};<br/>\nvar popPSP = {};<br/>\n\n//Creating the Popup <br/>\nvar popUp = new kony.ui.Popup(popBasic, popLayout, popPSP);<br/>\n\n//Navigate to method call<br/>\npopUp.navigateTo(popUp2);</pre>",
                        "!type": "fn(popupinstance: ?, config: ?)"
                    },
                    "onDeviceBack": {
                        "!doc": "Specifies an event which is triggered when the user uses the back button on the device.\n@property {Event}\n@Available Android,Android Tablet,BlackBerry\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onHide": {
                        "!doc": "Specifies an Event which is triggered when a popup goes out of view.\n@property {Event}\n@Available All Platforms except Mobile Web platforms.\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "outTransitionConfig": {
                        "!doc": "Specifies the type of transition effect to be applied when the Form is going out of view. It accepts hash values.\n@property {Object}\n@Available All Platforms except Mobile Web platforms.\n@access Read and Write"
                    },
                    "padding": {
                        "!doc": "Specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "remove": {
                        "!doc": " This method removes a widget from the popup container. If a new widget is removed will reflect immediately from the popup hierarchy model perspective, however the changes are displayed when the popup appears.\n @param widgetref {Object} Reference of the name of the widget.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining properties for a Popup.<br/>\nvar popBasic = {id:\"popUp\", title:\"PopUP\", skin:\"popSkin\", isModal:true, transparencyBehindThePopup:100};<br/>\nvar popLayout = {containerWeight:100, padding:[5,5,5,5]};<br/>\nvar popPSP = {};<br/>\n\n//Creating the Popup.<br/>\nvar popUp = new kony.ui.Popup(popBasic, popLayout, popPSP);<br/>\n\n//Removing label,button widgets to the popUp.Here label and button widgets should be created and added to the popUp.<br/>\npopUp.remove(lbl, btn);</pre>",
                        "!type": "fn(widgetref: ?)"
                    },
                    "removeAt": {
                        "!doc": " This method removes a widget at the given index from the popup container. If a new widget is removed will reflect immediately from the popup hierarchy model perspective, however the changes are displayed when the popup appears.\n @param index {Number} Specifies the index of the popup.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining properties for a Popup.<br/>\nvar popBasic = {id:\"popUp\", type:constants.POPUP_TYPE_NATIVE,title:\"PopUP\", skin:\"popSkin\", isModal:true, transparencyBehindThePopup:100};<br/>\nvar popLayout = {containerWeight:100,padding:[5,5,5,5]};<br/>\nvar popPSP = {};<br/>\n\n//Creating the Popup.<br/>\nvar popUp = new kony.ui.Popup(popBasic, popLayout, popPSP);<br/>\n\n//Removing widget from the popUp at 15th index Position.<br/>\npopUp.removeAt(15);</pre>",
                        "!type": "fn(index: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "scrollToBeginning": {
                        "!doc": " This method gives you the control to scroll to the beginning of the popup.\n @Available All Platforms except Mobile Web\n @access Write\n @usage <pre>\n//Defining properties for a Popup.<br/>\nvar popBasic = {id:\"popUp\", title:\"PopUP\", skin:\"popSkin\", isModal:true, transparencyBehindThePopup:100};<br/>\nvar popLayout = {containerWeight:100,padding:[5,5,5,5]};<br/>\nvar popPSP = {};<br/>\n\n//Creating the Popup.<br/>\nvar popUp = new kony.ui.Popup(popBasic, popLayout, popPSP);<br/>\n\n//scrollToBegining method call.<br/>\npopUp.scrollToBegining();</pre>",
                        "!type": "fn()"
                    },
                    "scrollToEnd": {
                        "!doc": " This method gives you the control to scroll to the end of the popup.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining properties for a Popup.<br/>\nvar popBasic = {id:\"popUp\", title:\"PopUP\", skin:\"popSkin\", isModal:true, transparencyBehindThePopup:100};<br/>\nvar popLayout = {containerWeight:100, padding:[5,5,5,5]};<br/>\nvar popPSP = {};<br/>\n\n//Creating the Popup.<br/>\nvar popUp = new kony.ui.Popup(popBasic, popLayout, popPSP);<br/>\n\n//scrollToEnd method call.<br/>\npopUp.scrollToEnd();</pre>",
                        "!type": "fn()"
                    },
                    "scrollToWidget": {
                        "!doc": " This method gives you the control to scroll the widget in the popup.\n @param widget {Object} - scroll to this widget\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining properties for a Popup.<br/>\nvar popBasic = {id:\"popUp\", title:\"PopUP\",skin:\"popSkin\", isModal:true, transparencyBehindThePopup:100};<br/>\nvar popLayout = {containerWeight:100, padding:[5,5,5,5]};<br/>\nvar popPSP = {};<br/>\n\n//Creating the Popup.<br/>\nvar popUp = new kony.ui.Popup(popBasic, popLayout, popPSP);<br/>\n\n//Scrolling the popUp to the Label lbl.\npopUp.scrollToWidget(lbl);</pre>",
                        "!type": "fn(widget: ?)"
                    },
                    "setContext": {
                        "!doc": " This method specifies the popup that must be displayed for the context and also helps you to position the popup on the screen.\n @param setContext {String} Set of key value pairs providing information about the widget and the anchoring used to position the popup on the screen.<b>Mandatory</b>\n @Available All Platforms except BlackBerry\n @access Write\n @usage <pre>\n//Defining properties for a Popup<br/>\nvar popBasic = {id:\"popUp\", title:\"PopUP\", skin:\"popSkin\", isModal:true, transparencyBehindThePopup:100};<br/>\nvar popLayout = {containerWeight:100,padding:[5,5,5,5]};<br/>\nvar popPSP = {};<br/>\n\n//Creating the Popup<br/>\nvar popUp = new kony.ui.Popup(popBasic, popLayout, popPSP);<br/>\n\n//Defining the context Object<br/>\nvar context1 = {};<br/>\ncontext1.widget = frm1.lbl1;<br/>\ncontext1.anchor = \"bottom\";<br/>\ncontext1.sizetoanchorwidth = false;<br/>\n\n//setContext method call<br/>\npopUp.setContext(context1);</pre>",
                        "!type": "fn(setContext: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setTitleBarLeftSideButton": {
                        "!doc": " This method enables you to set the properties for a left-side button of a titlebar.\n @param title {String} - Reference string to be displayed on the button.\n @param image {String} - Reference to the image of the button.\n @param handler {Function} - An event callback is invoked by the platform when the user Reference string to be displayed on the button.\n @Available Available on iOS platform only\n @access Write\n @usage <pre>\n//Defining properties for a Popup.<br/>\nvar popBasic = {id:\"popUp\", title:\"PopUP\",skin:\"popSkin\",isModal:true, transparencyBehindThePopup:100};<br/>\nvar popLayout ={containerWeight:100, padding:[5,5,5,5]};<br/>\nvar popPSP = {};<br/>\n\n//Creating the Popup <br/>\nvar popUp = new kony.ui.Popup(popBasic, popLayout, popPSP);<br/>\n\n//setTitleBarLeftSideButton method call<br/>\npopUp.setTitleBarLeftSideButton(title, image, handler);</pre>",
                        "!type": "fn(title: ?, image: ?, handler: ?)"
                    },
                    "setTitleBarLeftSideButtonSkin": {
                        "!doc": "     This method enables you to set the skin properties for a left-side button of a titlebar.\n     @param text {String} - (Mandatory) Specifies the text of the title bar left side button.\n     @param skin {String} - (Mandatory) Specifies the skin of the button. It supports fontColor, fontSize, and Image properties.\n     @param callback {Function} - (Mandatory) An event callback is invoked by the platform when the user performs a click action.\n     @Available iPhone,iPad\n     @access Write\n     @usage <pre>\n\t  //Defining properties for a Popup.<br/>\n    var popBasic = {id:\"popUp\", title:\"PopUP\",skin:\"popSkin\",isModal:true, transparencyBehindThePopup:100};<br/>\n    var popLayout = {containerWeight:100, padding:[5,5,5,5]};<br/>\n    var popPSP = {};<br/>\n\n    //Creating the Popup <br/>\n    var popUp = new kony.ui.Popup(popBasic, popLayout, popPSP);<br/>\n\n    //Method to set the properties for a left-side button of a titlebar.<br/>\n    popUp.setTitleBarLeftSideButtonSkin(title, 'popupSkin', handler);</pre>",
                        "!type": "fn(text: ?, skin: ?, callBack: ?)"
                    },
                    "setTitleBarRightSideButton": {
                        "!doc": " This method enables you to set the properties for a right-side button of a titlebar.\n @param title {String} - Reference string to be displayed on the button.\n @param image {String} - Reference to the image of the button.\n @param handler {Function} - An event callback is invoked by the platform when the user Reference string to be displayed on the button.\n @Available Available on iOS platform only\n @access Write\n @usage <pre>\n//Defining properties for a Popup.<br/>\nvar popBasic = {id:\"popUp\", title:\"PopUP\",skin:\"popSkin\",isModal:true, transparencyBehindThePopup:100};<br/>\nvar popLayout = {containerWeight:100, padding:[5,5,5,5]};<br/>\nvar popPSP = {};<br/>\n\n//Creating the Popup <br/>\nvar popUp = new kony.ui.Popup(popBasic, popLayout, popPSP);<br/>\n\n//setTitleBarRightSideButton method call<br/>\npopUp.setTitleBarRightSideButton(title, image, handler);</pre>",
                        "!type": "fn(title: ?, image: ?, handler: ?)"
                    },
                    "setTitleBarRightSideButtonSkin": {
                        "!doc": "     This method enables you to set the skin properties for a right-side button of a titlebar.\n     @param text {String} - (Mandatory) Specifies the text of the title bar left side button.\n     @param skin {String} - (Mandatory) Specifies the skin of the button. It supports fontColor, fontSize, and Image properties.\n     @param callback {Function} - (Mandatory) An event callback is invoked by the platform when the user performs a click action.\n     @Available iPhone,iPad\n     @access Write\n     @usage <pre>\n\t  //Defining properties for a Popup.<br/>\n    var popBasic = {id:\"popUp\", title:\"PopUP\",skin:\"popSkin\",isModal:true, transparencyBehindThePopup:100};<br/>\n    var popLayout = {containerWeight:100, padding:[5,5,5,5]};<br/>\n    var popPSP = {};<br/>\n\n    //Creating the Popup <br/>\n    var popUp = new kony.ui.Popup(popBasic, popLayout, popPSP);<br/>\n\n    //Method to set the properties for a right-side button of a titlebar.<br/>\n    popUp.setTitleBarRightSideButtonSkin(title, 'popupSkin', handler);</pre>",
                        "!type": "fn(text: ?, skin: ?, callBack: ?)"
                    },
                    "setTitleBarSkin": {
                        "!doc": " This method enables you to set the skin for a titlebar of a popup.\n @param skin {String} Reference to the skin.\n @Available Available on iOS platform only\n @access Write\n @usage <pre>\n//Defining properties for a Popup.<br/>\nvar popBasic = {id:\"popUp\", title:\"PopUP\",skin:\"popSkin\",isModal:true, transparencyBehindThePopup:100};<br/>\nvar popLayout = {containerWeight:100, padding:[5,5,5,5]};<br/>\nvar popPSP = {};<br/>\n\n//Creating the Popup <br/>\nvar popUp = new kony.ui.Popup(popBasic, popLayout, popPSP);<br/>\n\n//setTitleBarSkin method call<br/>\npopUp.setTitleBarSkin(skin);</pre>",
                        "!type": "fn(skin: ?)"
                    },
                    "show": {
                        "!doc": " This method is used to display the popup on the screen.\n @Available iPhone,iPad\n @access Write\n @usage <pre>\n//Defining properties for a Popup.<br/>\nvar popBasic = {id:\"popUp\", title:\"PopUP\", skin:\"popSkin\", isModal:true, transparencyBehindThePopup:100};<br/>\nvar popLayout = {containerWeight:100,padding:[5,5,5,5]};<br/>\nvar popPSP = {};<br/>\n\n//Creating the Popup.<br/>\nvar popUp = new kony.ui.Popup(popBasic, popLayout, popPSP);<br/>\n\n//show method call\npopUp.show();</pre>",
                        "!type": "fn()"
                    },
                    "showTitleBar": {
                        "!doc": " This method gives you the control to show a titlebar within a popup.\n @Available Available on iOS platform only\n @access Write\n @usage <pre>\n//Defining properties for a Popup.<br/>\nvar popBasic = {id:\"popUp\", title:\"PopUP\",skin:\"popSkin\",isModal:true, transparencyBehindThePopup:100};<br/>\nvar popLayout = {containerWeight:100, padding:[5,5,5,5]};<br/>\nvar popPSP = {};<br/>\n\n//Creating the Popup <br/>\nvar popUp = new kony.ui.Popup(popBasic, popLayout, popPSP);<br/>\n\n//showTitleBar method call<br/>\npopUp.showTitleBar();</pre>",
                        "!type": "fn()"
                    },
                    "skin": {
                        "!doc": "Specifies a background skin for Popup widget.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "title": {
                        "!doc": "Specifies a general or descriptive text that will be shown as the title for the Popup.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "titleBarConfig": {
                        "!doc": "Specifies the configuration properties for title bar for Desktop Web platform.\n@property {Object}\n@Available Available on Desktop Web Platform.\n@access Read and Write"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "transparencyBehindThePopup": {
                        "!doc": "Indicates the transparency to be used behind the popup, default is 100% transparent.\n@property {Number}\n@Available All Platforms except Mobile Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "widgets": {
                        "!doc": " This method returns an array of the widget references which are direct children of the popup.\n @return {Array} - widget list\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining properties for a Popup.<br/>\nvar popBasic = {id:\"popUp\", title:\"PopUP\", skin:\"popSkin\", isModal:true, transparencyBehindThePopup:100};<br/>\nvar popLayout = {containerWeight:100, padding:[5,5,5,5]};<br/>\nvar popPSP = {};<br/>\n\n//Creating the Popup.<br/>\nvar popUp = new kony.ui.Popup(popBasic, popLayout, popPSP);<br/>\n\n//Collecting all the widgets of the PopUp into array and displaying the references.<br/>\nvar wigArr = popUp.widgets();<br/>\nalert(\"Widgets are \" + wigArr);</pre>",
                        "!type": "fn() -> [?]"
                    }
                }
            },
            "RadioButtonGroup": {
                "!doc": "Creates a new RadioButtonGroup object.\n@class kony.ui.RadioButtonGroup\n@returns {kony.ui.RadioButtonGroup}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.RadioButtonGroup",
                "prototype": {
                    "accessibilityConfig": {
                        "!doc": "Specifies the accessibility configuration property for the widget.\n@property {Object}\n@Available iPhone, Android, SPA-iPhone, and SPA-Android Platforms\n@access Read and Write\n@usage <pre>\n   var accessibilityConfig = {\n       \"a11yHidden\": false,\n       \"a11yValue\": \"Your text goes here\",\n       \"a11yLabel\": \"Your text goes here\",\n       \"a11yHint\": \"Your text goes here\"\n   }</pre>"
                    },
                    "anchorPoint": {
                        "!doc": "    Specifies the anchor point of the widget bounds rectangle using the widgets coordinate space.\n@property {Object}\n@Available iOS, Android, Windows, SPA\n@access Read and Write"
                    },
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "backgroundColor": {
                        "!doc": "Specifies the background color of the widget in hex format.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "blur": {
                        "!doc": "Enables blur\n@property blur {{enabled: Boolean, value: Number}}\n@Available iOS, Android, Windows, SPA\n@access Read and Write\n@usage <pre>\n   var blur = {\n       \"enabled\": true,\n       \"value\": 50\n   }</pre>"
                    },
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget widget. The parent widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "createAnimation": {
                        "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                        "!type": "fn(animationDef: ?)"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "enableHapticFeedback": {
                        "!doc": "This property allows you to enable or disable haptic feedback.\n@property {Boolean}\n@Available iOS, Android, Windows platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "focusSkin": {
                        "!doc": "This is a skin property and it determines the look and feel of the RadioButton widget when in focus.\n@property {String}\n@Available All Platforms except on all Mobile Web platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "hoverSkin": {
                        "!doc": "Specifies the look and feel of a widget when the cursor hovers on the widget.\n@property {String}\n@Available windows 8, Desktop web\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identify The RadioButtonGroup widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x.\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies a RadioButtonGroup widget visibility on the form.\n@property {Boolean}\n@Available All Platforms\n@access {Read, Write}",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "layoutType": {
                        "!doc": "Specifies if the arrangement of the widgets either in free form or horizontal or vertical direction (kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, or kony.flex.FLOW_VERTICAL).\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms except Mobile Web (basic).\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "masterData": {
                        "!doc": "Specifies the set of values that must be displayed for the user to make a selection from the available choices.\n@property {Array}\n@Available All Platforms except Mobile Web (basic).\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "masterDataMap": {
                        "!doc": "Specifies the set of values from which you can make a selection. You must specify a key and a value in a master data map.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onSelection": {
                        "!doc": "An event callback that is invoked by the platform when an item is selected or deselected.\n@property {Event}\n@Available All Platforms except Mobile Web (basic)\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchEnd": {
                        "!doc": "An event callback is invoked by the platform when the user touch is released from the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchMove": {
                        "!doc": "An event callback is invoked by the platform when the touch moves on the touch surface continuously until the movement ends. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchStart": {
                        "!doc": "An event callback is invoked by the platform when the user touches the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "padding": {
                        "!doc": "Specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms except Mobile Web (basic).\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "placeholder": {
                        "!doc": "Specifies the temporary or substitute text that must be displayed on the RadioButton until the actual selection is made. If you do not specify the Placeholder text, the first option in the list is shown as the selected value.\n@property {String}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "string"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "selectedKey": {
                        "!doc": "Represents the key that is shown as selected.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "selectedKeyValue": {
                        "!doc": "Returns the array of selected key-value pair.\n@property {Array}\n@Available All Platforms\n@access Read",
                        "!type": "[?]"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget forSPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "shadowDepth": {
                        "!doc": "     Defines the depth of the shadow effect applied to the Widget.\n     @property {Number}\n\t @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the shadowDepth property<br/>\n\t form1.RadBtnGr1.shadowDepth = 10;</pre>",
                        "!type": "number"
                    },
                    "shadowType": {
                        "!doc": "     Sets a type of the shadow effect to apply to the Widget.\n     @property {Number}\n\t @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the shadowType property<br/>\n\t form1.RadBtnGr1.shadowType = constants.VIEW_BOUNDS_SHADOW;</pre>",
                        "!type": "number"
                    },
                    "skin": {
                        "!doc": "Specifies a background skin for RadioButtonGroup Widget.\n@property {String}\n@Available All Platforms except\n@access Read and Write",
                        "!type": "string"
                    },
                    "toolTip": {
                        "!doc": "Specifies the hint text when the cursor hovers over a widget.\n@property {String}\n@Available windows 8\n@access Read and Write",
                        "!type": "string"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "viewConfig": {
                        "!doc": "Specifies the view configuration for different viewtypes. You can set the configuration for toggle view.\n@property {Object}\n@Available iPhone,iPad\n@access Read and Write"
                    },
                    "viewType": {
                        "!doc": "Specifies a property for the View of the RadioButton.\n@property {Number}\n@Available iPhone,iPad,Android,Android Tablet ( only Spinner view is available for the platform)\n@access Read and Write",
                        "!type": "number"
                    },
                    "wheelBackgroundColor": {
                        "!doc": "Specifies the background color for the wheel that is displayed when you click the RadioButton. This property is applicable only when you set the viewType as RADIOGROUP_VIEW_TYPE_ONSCREENWHEEL.\n@property {Boolean}\n@Available iOS\n@access Read and Write",
                        "!type": "bool"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "RichText": {
                "!doc": "Creates a new RichText object.\n@class kony.ui.RichText\n@returns {kony.ui.RichText}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.RichText",
                "prototype": {
                    "accessibilityConfig": {
                        "!doc": "Specifies the accessibility configuration property for the widget.\n@property {Object}\n@Available iPhone, Android, SPA-iPhone, and SPA-Android Platforms\n@access Read and Write\n@usage <pre>\n   accessibilityConfig =  {\n       \"a11yHidden\": false,\n       \"a11yValue\": \"Your text goes here\",\n       \"a11yLabel\": \"Your text goes here\",\n       \"a11yHint\": \"Your text goes here\"\n   }</pre>"
                    },
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "clipView": {
                        "!doc": "     Defines a shape to clip the widget view.\n     @property {JSObject}\n\t @param shape {constant} A key-value pair represents a shape of the clipping. You can clip a view as follows:\n\t VIEW_CLIP_SHAPE_RECTANGLE: Appears the widget view in rectangular shape. By default, this value is set.\n\t VIEW_CLIP_SHAPE_ROUNDED_RECTANGLE: Appears the widget view in rectangular shape with rounded corners.\n\t VIEW_CLIP_SHAPE_CIRCLE: Appears the widget view in circular shape.\n\t @param bounds {Array} A key-value pair represents the bounds of the shape to clip a view. Specify the bounds as an array of integers [left, top, right, bottom].\n\t @param boundsInPixel {Boolean} Defines whether the units of specified bounds should be in pixels or in percentage. The property takes the Boolean value.\n\t @param radius {constant} Specifies the radius of the clipping shape. Represents the corner radius of the rounded rectangular shape when clipping shape is VIEW_CLIP_SHAPE_ROUNDED_RECTANGLE or represents the radius of circle when clipping shape is VIEW_CLIP_SHAPE_CIRCLE.\n     @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the clipView property<br/>\n\t form1.RchTxt1.clipView  = {\n\t\t shape: constants.VIEW_CLIP_SHAPE_CIRCLE,\n\t\t bounds: [5, 5, 5, 5],\n\t\t boundsInPixel: true,\n\t\t radius: 10\n        };</pre>"
                    },
                    "containerWeight": {
                        "!doc": "The percentage of width to be allocated by its parent widget. The parent's widget space is distributed to its child widgets based on this weight factor.All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "contentAlignment": {
                        "!doc": "Specifies the alignment of the text on the RichText with respect to its boundaries.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "createAnimation": {
                        "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                        "!type": "fn(animationDef: ?)"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the Property to set widget visibility on the form.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "layoutType": {
                        "!doc": "Specifies if the arrangement of the widgets either in free form or horizontal or vertical direction (kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, or kony.flex.FLOW_VERTICAL).\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "linkFocusSkin": {
                        "!doc": "Specifies the skin that must be applied to the link when focused.\n@property {String}\n@Available BlackBerry,J2ME\n@access Read and Write",
                        "!type": "string"
                    },
                    "linkSkin": {
                        "!doc": "Specifies the skin that must be applied to the link in the RichText widget.\n@property {String}\n@Available All Platforms except Mobile Web platforms.\n@access Read and Write",
                        "!type": "string"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x.\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "onClick": {
                        "!doc": "An event callback is invoked by the platform when the user performs a click action on the RichText.\n@property {Event}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x.\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onTouchEnd": {
                        "!doc": "An event callback is invoked by the platform when the user touch is released from the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchMove": {
                        "!doc": "An event callback is invoked by the platform when the touch moves on the touch surface continuously until the movement ends. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchStart": {
                        "!doc": "An event callback is invoked by the platform when the user touches the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "padding": {
                        "!doc": "specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms except Mobile Web (basic).\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "shadowDepth": {
                        "!doc": "     Defines the depth of the shadow effect applied to the Widget.\n     @property {Number}\n\t @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the shadowDepth property<br/>\n\t form1.RchTxt1.shadowDepth = 10;</pre>",
                        "!type": "number"
                    },
                    "shadowType": {
                        "!doc": "     Sets a type of the shadow effect to apply to the Widget.\n     @property {Number}\n\t @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the shadowType property<br/>\n\t form1.RchTxt1.shadowType = constants.VIEW_BOUNDS_SHADOW;</pre>",
                        "!type": "number"
                    },
                    "skin": {
                        "!doc": "Specifies the look and feel of the RichText when not in focus.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "superScriptSkin": {
                        "!doc": "Specifies the skin to be applied to superscripts in the RichText widget.\n@property {String}\n@Available BlackBerry,J2ME,Windows Phone/Windows Kiosk,Windows6.x\n@access Read and Write",
                        "!type": "string"
                    },
                    "telephoneLinkSkin": {
                        "!doc": "Specifies the skin to be applied to the telephone links in the RichText widget.\n@property {String}\n@Available Windows Phone7\n@access Read and Write",
                        "!type": "string"
                    },
                    "text": {
                        "!doc": "Specifies a general or descriptive text for the RichText widget.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "toolTip": {
                        "!doc": "Specifies the hint text when the cursor hovers over a widget.\n@property {String}\n@Available windows 8\n@access Read and Write",
                        "!type": "string"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "ScrollBox": {
                "!doc": "Creates a new ScrollBox object.\n@class kony.ui.ScrollBox\n@returns {kony.ui.ScrollBox}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.ScrollBox",
                "prototype": {
                    "accessibilityConfig": {
                        "!doc": "Specifies the accessibility configuration property for the widget.\n@property {Object}\n@Available iPhone, Android, SPA-iPhone, and SPA-Android Platforms\n@access Read and Write\n@usage <pre>\nvar accessibilityConfig = {\n       \"a11yHidden\": false,\n       \"a11yValue\": \"Your text goes here\",\n       \"a11yLabel\": \"Your text goes here\",\n       \"a11yHint\": \"Your text goes here\"\n}</pre>"
                    },
                    "add": {
                        "!doc": " This method is used to add widgets to the ScrollBox.\n When the widgets are added to the current visible ScrollBox , then the changes will reflect immediately.\n @param widgets{Object}Comma separated list of widgets.<b>Mandatory</b>\n @Available All Platforms except on all Mobile Web platforms.\n @access Write\n @usage <pre>\n//Defining properties for a ScrollBox.<br/>\nvar scrollBasic = {id :\"scrollBox\", skin:\"scrlSkin\", isVisible:true, orientation:constants.BOX_LAYOUT_HORIZONTAL};<br/>\nvar scrollLayout = {padding:[2,2,2,2], containerWeight:100, margin:[5,5,5,5], containerHeight:100, percent:true};<br/>\nvar scrollPSP = {};<br/>\n\n//Creating the ScrollBox.\nvar scrollBox = new kony.ui.ScrollBox(scrollBasic, scrollLayout, scrollPSP);<br/>\n\n//Adding label and button widgets to the scrollBox. Here label and button widgets should be created already and made accessible.<br/>\nscrollBox.add(lbl, btn);</pre>",
                        "!type": "fn(widgets: ?)"
                    },
                    "addAt": {
                        "!doc": " This method is used to add widgets to the scrollbox container at the specified index. Widget is prepended if index<0 and appended at the end of the container if index >size+1.\n @param widgetref{Object} Reference of the widget that need to be added to the box.<b>Mandatory</b>\n @param index {Number} Index number at which the widget is to be added.<b>Mandatory</b>\n @Available All Platforms except on all Mobile Web platforms.\n @access Write\n @usage <pre>\n//Defining properties for a ScrollBox.<br/>\nvar scrollBasic = {id :\"scrollBox\", skin:\"scrlSkin\", isVisible:true, orientation:constants.BOX_LAYOUT_HORIZONTAL};<br/>\nvar scrollLayout = {padding:[2,2,2,2], containerWeight:100, margin:[5,5,5,5], containerHeight:100, percent:true};<br/>\nvar scrollPSP = {};<br/>\n\n//Creating the ScrollBox.<br/>\nvar scrollBox = new kony.ui.ScrollBox(scrollBasic, scrollLayout, scrollPSP);<br/>\n\n//Adding label to the scrollBox at 15th index Position. Here label should be created already and made accessible.<br/>\nscrollBox.addAt(lbl, 15);</pre>",
                        "!type": "fn(widgetref: ?, index: ?)"
                    },
                    "bounces": {
                        "!doc": "Specifies whether the scroll view bounces  past the edge of the content and back again.\n@property {Boolean}\n@Available Available on iOS only\n@access Read and Write",
                        "!type": "bool"
                    },
                    "containerHeight": {
                        "!doc": "Specifies the available height of the container in terms of percentage. The percentage is with reference to the value of containerHeightReference property.\n@property {Number}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "containerHeightReference": {
                        "!doc": "Specifies the reference for the height of the container based on option that you set for containerHeight. The container height percentage is calculated based on eigher CONTAINER_HEIGHT_BY_FORM_REFERENCE or CONTAINER_HEIGHT_BY_PARENT_WIDTH.\n@property {Number}\n@Available Available on all platforms except on all Server side Mobile Web and Desktop Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget widget. The parent widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "contextMenu": {
                        "!doc": "Shows the list of actions (appropriate to the widget in focus) as menu items.\n@property {Object}\n@Available Android, Android Tablet,BlackBerry\n@access Read and Write"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "enableScrolling": {
                        "!doc": "Enables the scrolling of the form when containerHeight is given to the ScrollBox.\n@property {Boolean}\n@Available Available on all platforms excelt Server side Mobile Web and Desktop Web platforms.\n@access Read and Write",
                        "!type": "bool"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the visibility of the widget.\n@property {Boolean}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "orientation": {
                        "!doc": "Specifies how you can stack the widgets within the ScrollBox. You can set the orientation of the ScrollBox as horizontal or vertical.\n@property {Number}\n@Available All Platforms except on all Mobile Web platforms\n@access Read",
                        "!type": "number"
                    },
                    "padding": {
                        "!doc": "Specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "pullToRefreshI18NKey": {
                        "!doc": "Property to set i18n key for \"pull to refresh\" title. Platform gets the value from the current application locale specific i18n resource bundle. This property is available only when the orientation is vertical.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "pullToRefreshSkin": {
                        "!doc": "Property to set a skin to the pull to refresh title.\n@property {String}\n@Available iOS and Android Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "pushToRefreshI18NKey": {
                        "!doc": "Property to set i18n key for \"release to refresh\" title that comes for push to refresh. Platform gets the value from the current applications locale specific i18n resource bundle. This property is available only when the orientation is vertical.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "pushToRefreshSkin": {
                        "!doc": "Property to set a skin to the push to refresh title.\n@property {String}\n@Available iOS and Android Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n\n   function onPopCallback(widget, peekForm){\n     // preview form being used for pop also\n     return peekForm;\n   }\n\n   frm1.sbx1.registerForPeekAndPop(onPeekCallback, onPopCallback);\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "releaseToPullRefreshI18NKey": {
                        "!doc": "Property to set i18n key for \"release to refresh\" title that comes for pull to refresh. Platform gets the value from the current applications locale specific i18n resource bundle. This property is available only when the orientation is vertical.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "remove": {
                        "!doc": " This method removes a widget from the ScrollBox container.\n @param widgetref {Object} Reference of the name of the widget.<b>Mandatory</b>\n @returns The current Form handle is returned.\n @Available All Platforms except on all Mobile Web platforms.\n @access Write\n @usage <pre>\n//Defining properties for a ScrollBox.<br/>\nvar scrollBasic = {id :\"scrollBox\",skin:\"scrlSkin\", isVisible:true, orientation:constants.BOX_LAYOUT_HORIZONTAL};<br/>\nvar scrollLayout = {padding:[2,2,2,2], containerWeight:100, margin:[5,5,5,5], containerHeight:100, percent:true};<br/>\nvar scrollPSP = {};<br/>\n\n//Creating the ScrollBox.<br/>\nvar scrollBox = new kony.ui.ScrollBox(scrollBasic, scrollLayout, scrollPSP);<br/>\n\n//Removing label widget from the scrollBox .Here label should be created already and added inside the scrollBox.\nscrollBox.remove(lbl);</pre>",
                        "!type": "fn(widgetref: ?)"
                    },
                    "removeAt": {
                        "!doc": " This method removes a widget at the given index from the scrollbox container. If a new widget is removed will reflect immediately from the scrollbox hierarchy model perspective.\n @param index {Number}Index number of the widget to be removed.<b>Mandatory</b>\n @returns Reference of the removed widget\n @Available All Platforms except on all Mobile Web platforms.\n @access Write\n @usage <pre>\n//Defining properties for a ScrollBox.<br/>\nvar scrollBasic = {id :\"scrollBox\", skin:\"scrlSkin\", isVisible:true, orientation:constants.BOX_LAYOUT_HORIZONTAL};<br/>\nvar scrollLayout = {padding:[2,2,2,2], containerWeight:100,margin:[5,5,5,5], containerHeight:100, percent:true};<br/>\nvar scrollPSP = {};<br/>\n\n//Creating the ScrollBox.<br/>\nvar scrollBox = new kony.ui.ScrollBox(scrollBasic, scrollLayout, scrollPSP);<br/>\n\n//Removing label from the scrollBox at 15th index Position. Here the label should be created and added at 15th index position of the scrollBox.<br/>\nscrollBox.removeAt(15);</pre>",
                        "!type": "fn(index: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "removeGestureRecognizer": {
                        "!doc": " This method allows you to remove a specified gesture recognizer for a specified widget.\n @param uniqueIdentifier{Widgetref} Indicates the type of gesture added to the form.<b>Mandatory</b>\n @Available iPhone,iPad,Android,BlackBerry,Windows phone,SPA\n @access Write\n @usage <pre>\n//The below function will get invoked when a gesture is recognized.<br/>\nfunction myTap(myWidget,gestureInfo) {<br/>\n  alert(\"Tap Gesture detected. \" +\n    \"gestureType: \" + gestureInfo.gestureType +\n    \"gesturePosition: \" + gestureInfo.gesturePosition);\n  //write any further logic here\n} <br/>\n\n//Setting Gesture configuration.<br/>\nvar setupTblTap = {fingers:1,taps:2};//double tap gesture<br/>\n\n//To add a TAP gesture recognizer on a scroll box with id sbx1 placed on a form frm1<br/>\nvar tapGesture = frm1.sbx1.setGestureRecognizer(1, setupTblTap, myTap);<br/>\n\n//To remove the TAP gesture recognizer on a scroll box with id sbx1 placed on a form frm1.<br/>\nfrm1.sbx1.removeGestureRecognizer(tapGesture);</pre>",
                        "!type": "fn(uniqueIdentifier: ?)"
                    },
                    "scrollToBeginning": {
                        "!doc": " This method gives you the control to scroll to the beginning of the ScrollBox.\n @Available iOS, Android, SPA\n @access Write\n @usage <pre>\n//Defining properties for a ScrollBox.\nvar scrollBasic = {id :\"scrollBox\", skin:\"scrlSkin\", isVisible:true, orientation:constants.BOX_LAYOUT_HORIZONTAL};<br/>\nvar scrollLayout = {padding:[2,2,2,2], containerWeight:100,margin:[5,5,5,5], containerHeight:100, percent:true};<br/>\nvar scrollPSP = {};<br/>\n\n//Creating the ScrollBox.<br/>\nvar scrollBox = new kony.ui.ScrollBox(scrollBasic, scrollLayout, scrollPSP);<br/>\n\n//Method to scroll to the beginning of the ScrollBox.<br/>\nscrollBox.scrollToBeginning();</pre>",
                        "!type": "fn()"
                    },
                    "scrollToEnd": {
                        "!doc": " This method gives you the control to scroll to the end of the ScrollBox.\n @Available iOS, Android, SPA\n @access Write\n @usage <pre>\n//Defining properties for a ScrollBox.\nvar scrollBasic = {id :\"scrollBox\", skin:\"scrlSkin\", isVisible:true, orientation:constants.BOX_LAYOUT_HORIZONTAL};<br/>\nvar scrollLayout = {padding:[2,2,2,2], containerWeight:100,margin:[5,5,5,5], containerHeight:100, percent:true};<br/>\nvar scrollPSP = {};<br/>\n\n//Creating the ScrollBox.<br/>\nvar scrollBox = new kony.ui.ScrollBox(scrollBasic, scrollLayout, scrollPSP);<br/>\n\n//Method to scroll to the end of the ScrollBox.<br/>\nscrollBox.scrollToEnd();</pre>",
                        "!type": "fn()"
                    },
                    "scrollToWidget": {
                        "!doc": " This method gives you the control to scroll the ScrollBox up to the position of selected widget.\n @param widget {Object} - widget reference\n @Available iOS\n @access Write\n @usage <pre>\n//Defining properties for a ScrollBox.\nvar scrollBasic = {id :\"scrollBox\", skin:\"scrlSkin\", isVisible:true, orientation:constants.BOX_LAYOUT_HORIZONTAL};<br/>\nvar scrollLayout = {padding:[2,2,2,2], containerWeight:100,margin:[5,5,5,5], containerHeight:100, percent:true};<br/>\nvar scrollPSP = {};<br/>\n\n//Creating the ScrollBox.<br/>\nvar scrollBox = new kony.ui.ScrollBox(scrollBasic, scrollLayout, scrollPSP);<br/>\n\n//Method to scroll the ScrollBox upto label.<br/>\nscrollBox.scrollToWidget(labelForOk);</pre>",
                        "!type": "fn(widget: ?)"
                    },
                    "scrollingEvents": {
                        "!doc": "Specifies the scrolling events which gets called when scrolling reaches beginning of the widget, end of the widget, when the user tries to pull or push the scrolling beyond the vertical boundaries of the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setGestureRecognizer": {
                        "!doc": " This method allows you to set a gesture recognizer for a specified gesture for a specified widget.\n @param gestureType{Number} Indicates the type of gesture that needs to be detected on the widget.<b>Mandatory</b>\n @param setupParams {Array}Specifies an object that has the configuration parameters needed to setup a gesture recognizer.<b>Mandatory</b>\n @param gestureHandler{Function} Specifies the function that needs to be executed when a gesture is recognized.<b>Mandatory</b>\n @Available ios,Android,BlackBerry,Windows phone/Windows Kiosk,J2ME,SPA\n @access Write\n @usage <pre>\n//The below function will get invoked  when a gesture is recognized.\nfunction myTap(myWidget,gestureInfo) {<br/>\n  alert(\"Tap Gesture detected. \" +\n    \"gestureType: \" + gestureInfo.gestureType +\n    \"gesturePosition: \" + gestureInfo.gesturePosition);\n  //write any further logic here\n} <br/>\n\n//Setting Gesture configuration.<br/>\nvar setupTblTap = {fingers:1, taps:2};//double tap gesture<br/>\n\n//To add a TAP gesture recognizer on a scroll box with id sbx1 placed on a form frm1<br/>\nvar tapGesture = frm1.sbx1.setGestureRecognizer(1, setupTblTap, myTap);</pre>",
                        "!type": "fn(gestureType: ?, setupParams: ?, gestureHandler: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "skin": {
                        "!doc": "Specifies a background skin for ScrollBox widget.\n@property {String}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "string"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "widgets": {
                        "!doc": " This method returns an array of the widget references which are direct children of ScrollBox.\n @returns This method returns Read only array of widget references. Modifying the array and changing the position of widgets in this array doesn't reflect in the ScrollBox hierarchy.\n @Available All Platforms except on all Mobile Web platforms.\n @access Write\n @usage <pre>\n//Defining properties for a ScrollBox.\nvar scrollBasic = {id :\"scrollBox\", skin:\"scrlSkin\", isVisible:true, orientation:constants.BOX_LAYOUT_HORIZONTAL};<br/>\nvar scrollLayout = {padding:[2,2,2,2], containerWeight:100,margin:[5,5,5,5], containerHeight:100, percent:true};<br/>\nvar scrollPSP = {};<br/>\n\n//Creating the ScrollBox.<br/>\nvar scrollBox = new kony.ui.ScrollBox(scrollBasic, scrollLayout, scrollPSP);<br/>\n\n//Collecting all the widgets of the scrollBox into array and displaying the references.<br/>\nvar wigArr = scrollBox.widgets();<br/>\nalert(\"Widgets are \" + wigArr);</pre>",
                        "!type": "fn()"
                    }
                }
            },
            "SegmentedUI": {
                "!doc": "Creates a new SegmentedUI object.\n@class kony.ui.SegmentedUI\n@returns {kony.ui.SegmentedUI}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.SegmentedUI",
                "prototype": {
                    "addAll": {
                        "!doc": " This method allows you to add new data to the segment. The new data is appended to the existing data.\n @param arrayofdata{Array} Specifies the array to represent data as key value pairs.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for a Segment.<br/>\nvar segBasic ={id:\"segId\",isVisible:true,widgetSkin:\"widSkin\",rowSkin:\"rowSkn\", rowFocusSkin:\"rowFSkn\", alternateRowSkin:\"altSkin\",sectionHeaderSkin:\"secHSkin\", widgetDataMap:{widgetId1:\"dataid1\", widgetId2:\"dataId2\", widgetId3:\"dataId3\", widgetId4:\"secDataId1\", widgetId5:\"secDataId2\" }, rowTemplate:box1}, selectedIndex:4, selectedIndicies:[4,5], viewType:constants.SEGUI_VIEW_TYPE_PAGEVIEW, onSwipe:onSwipeCallBck};allows you to add new data to the segment.<br/>\nvar segLayout ={padding:[5,5,5,5],margin:[5,5,5,5],containerWeight:100};<br/>\nvar segPSP ={onEditing:onEditingCallBck};<br/>\n\n//Creating the Segment<br/>\nvar segment = new kony.ui.SegmentedUI(segBasic, segLayout, segPSP);<br/>\n\n//addAll method call.<br/>\nsegment.addAll([ {dataId1:\"data1\", dataId2:\"data2\", dataId3:\"data3\"}, {dataId1:\"datax\", dataId2:\"datay\" dataId3:\"dataz\", template:box1}]);</pre>",
                        "!type": "fn(arrayofdata: ?)"
                    },
                    "addDataAt": {
                        "!doc": " This method allows you to add one or more rows of data at a given index or with in a section. The new data is placed before the index. The existing data is pushed to the next row.\n @param arrayofdata{Object} Specifies the JSObject to represent data as key value pairs.<b>Mandatory</b>\n @param rowIndex {Number} Specifies the Index of the row within the section if the sectionIndex is mentioned.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for a Segment.\nvar segBasic ={id:\"segId\",isVisible:true,widgetSkin:\"widSkin\",rowSkin:\"rowSkn\",rowFocusSkin:\"rowFSkn\",alternateRowSkin:\"altSkin\",sectionHeaderSkin:\"secHSkin\", widgetDataMap:{widgetId1:\"dataid1\", widgetId2:\"dataId2\", widgetId3:\"dataId3\" ,widgetId4:\"secDataId1\" ,widgetId5:\"secDataId2\" },rowTemplate:box1}, selectedIndex:4, selectedIndicies:[4,5], viewType:constants.SEGUI_VIEW_TYPE_PAGEVIEW,onSwipe:onSwipeCallBck};<br/>\nvar segLayout ={padding:[5,5,5,5],margin:[5,5,5,5],containerWeight:100};<br/>\nvar segPSP ={onEditing:onEditingCallBck};<br/>\n\n//Creating the Segment.<br/>\nvar segment = new kony.ui.SegmentedUI(segBasic, segLayout, segPSP);<br/>\n\n//Defining a row<br/>\ndataObj1 = {globaDdataId1:\"label1\", globaDataId2:\"label2\", globalDataId3:\"label3\"};<br/>\n\n//addAt method call ,adding the above row at 15th index position.<br/>\nsegment.addDataAt(dataObj1,15);</pre>",
                        "!type": "fn(arrayofdata: ?, rowIndex: ?)"
                    },
                    "addSectionAt": {
                        "!doc": " This method allows you to add one or more sections with rows to the segment.\n @param arrayofdata{Array} Specifies the array to represent data as key value pairs.<b>Mandatory</b>\n @param sectionIndex {Number} Specifies the Index of the section.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for a Segment.<br/>\nvar segBasic ={id:\"segId\",isVisible:true,widgetSkin:\"widSkin\",rowSkin:\"rowSkn\", rowFocusSkin:\"rowFSkn\", alternateRowSkin:\"altSkin\", sectionHeaderSkin:\"secHSkin\", widgetDataMap:{widgetId1:\"dataid1\", widgetId2:\"dataId2\", widgetId3:\"dataId3\", widgetId4:\"secDataId1\", widgetId5:\"secDataId2\" },rowTemplate:box1}, selectedIndex:4, selectedIndicies:[4,5], viewType:constants.SEGUI_VIEW_TYPE_PAGEVIEW, onSwipe:onSwipeCallBck};<br/>\nvar segLayout ={padding:[5,5,5,5],margin:[5,5,5,5],containerWeight:100};<br/>\nvar segPSP ={onEditing:onEditingCallBck};<br/>\n\n//Creating the Segment.<br/>\nvar segment = new kony.ui.SegmentedUI(segBasic, segLayout, segPSP);<br/>\n\n//Defining section data.<br/>\ndata =[ [ \"section1\", [ {dataId1:\"aaa\"},{dataId1:\"bbb\"} ]],[ \"section2\", [{dataId1:\"ccc\"},  {dataId1:\"ddd\"} ] ]];<br/>\n\n//addSectionAt method call.<br/>\nsegment.addSectionAt(data,2);</pre>",
                        "!type": "fn(arrayofdata: ?, sectionIndex: ?)"
                    },
                    "alternateRowSkin": {
                        "!doc": "Specifies the skin that is applied to every alternate even numbered row in the segment.\n@property {String}\n@Available All Platforms except Windows Phone/Windows Kiosk.\n@access Read and Write",
                        "!type": "string"
                    },
                    "autogrowMode": {
                        "!doc": "This property specifies that a segment grows when new content is being added to the segment.\n@property {Number}\n@Available iOS, Windows Phone 8.1, Windows Tablet 8.1, Android, SPA\n@access Read only",
                        "!type": "number"
                    },
                    "blockedUISkin": {
                        "!doc": "Specifies the skin for the segui row.\n@property {String}\n@Available MobileWeb(Advanced),SPA\n@access Read and Write",
                        "!type": "string"
                    },
                    "border": {
                        "!doc": "Specifies the possible borders.\n@property {Number}\n@Available Mobile Web(Basic),Mobile Web(BJS),Mobile Web(Advanced)\n@access Read and Write",
                        "!type": "number"
                    },
                    "containerWeight": {
                        "!doc": "The percentage of width to be allocated by its parent widget. The parent's widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "contextMenu": {
                        "!doc": "The array of menu items that are displayed when the button is selected.\n@property {Array}\n@Available Android\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "data": {
                        "!doc": "Specifies the set of values that must be displayed on each row of the segment. The data is categorized into Sections and Rows.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "defaultSelection": {
                        "!doc": "Specifies if the first clickable element (Image or Label) of the segment is selected by default.\n@property {Boolean}\n@Available Mobile Web(Basic),Mobile Web(BJS)\n@access Read and Write",
                        "!type": "bool"
                    },
                    "dockSectionHeaders": {
                        "!doc": "The property to enable/disable the docking of section headers on top of the screen,while scrolling the section content.\n@property {Boolean}\n@Available Android\n@access Read and Write",
                        "!type": "bool"
                    },
                    "editMode": "number",
                    "editModeCustomConfig": "number",
                    "editStyle": {
                        "!doc": "Specifies whether the editing style of the segment is Swipe or Icon.\n@property {Number}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "number"
                    },
                    "getFirstVisibleRow": {
                        "!doc": "This method returns a JavaScript object containing the first visible row's section index and row index.\n@returns JavaScript object which would be of the following formatcontextDef={sectionIndex=0,rowIndex = 1,}\n@Available All Platforms except on Windows\n@usage <pre>\nVar object = form.segment.getFirstVisibleRow();\nKony.print(object[sectionIndex]);\nKony.print(object[rowIndex])\n</pre>",
                        "!type": "fn()"
                    },
                    "getLastVisibleRow": {
                        "!doc": "This method returns a JavaScript object containing the last visible row's section index and row index.\n@returns JavaScript object which would be of the following formatcontextDef={sectionIndex=0,rowIndex = 1,}\n@Available All Platforms except on Windows\n@usage <pre>\nVar object = form.segment.getLastVisibleRow();\nKony.print(object[sectionIndex]);\nKony.print(object[rowIndex])\n</pre>",
                        "!type": "fn()"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "This property controls the visibility of a widget on the form.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "metainfo": {},
                    "needPageIndicator": {
                        "!doc": "A Page Indicator is a succession of docs centered below the SegmentedUI widget. Each dot corresponds to a row segment with the white dot indicating the currently viewed page.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "onEditing": {
                        "!doc": "Event callback invoked when row is tried to insert through accessory button.\n@property {Event}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onRowClick": {
                        "!doc": "Event callback invoked when the row is clicked.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onSwipe": {
                        "!doc": "This event is triggered when you swipe a row in a segment.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "padding": {
                        "!doc": "specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "pageOffDotImage": {
                        "!doc": "Specifies the image to indicate that the pages that are not been currently viewed. This property is available only when the viewType is selected as pageview.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "pageOnDotImage": {
                        "!doc": "Specifies the image to indicate that the page is currently being viewed. This property is available only when the viewType is selected as pageview.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "pressedSkin": {
                        "!doc": "Specifies the skin to indicate that the row of the Segui is pressed or clicked.\n@property {String}\n@Available Android\n@access Read and Write",
                        "!type": "string"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeAll": {
                        "!doc": " This method Provides the ability to remove all rows and all sections of the segui widget.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for a Segment.<br/>\nvar segBasic ={id:\"segId\",isVisible:true,widgetSkin:\"widSkin\",rowSkin:\"rowSkn\", rowFocusSkin:\"rowFSkn\", alternateRowSkin:\"altSkin\",sectionHeaderSkin:\"secHSkin\", widgetDataMap:{widgetId1:\"dataid1\", widgetId2:\"dataId2\", widgetId3:\"dataId3\" ,widgetId4:\"secDataId1\" ,widgetId5:\"secDataId2\" },rowTemplate:box1}, selectedIndex:4, selectedIndicies:[4,5], viewType:constants.SEGUI_VIEW_TYPE_PAGEVIEW,onSwipe:onSwipeCallBck};<br/>\nvar segLayout ={padding:[5,5,5,5],margin:[5,5,5,5],containerWeight:100};<br/>\nvar segPSP ={onEditing:onEditingCallBck};<br/>\n\n//Creating the Segment.<br/>\nvar segment = new kony.ui.SegmentedUI(segBasic, segLayout, segPSP);<br/>\n\n//removeAll method call.\nsegment.removeAll();</pre>",
                        "!type": "fn()"
                    },
                    "removeAt": {
                        "!doc": " This method Provides the ability to remove a row in the segui widget or a row with in a section of the segmented ui.\n @param rowIndex{Number} Specifies the Index of the row within the section if the sectionIndex is mentioned.<b>Mandatory</b>\n @param sectionIndex {Number} Specifies the Index of the section.\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for a Segment.<br/>\nvar segBasic ={id:\"segId\",isVisible:true,widgetSkin:\"widSkin\",rowSkin:\"rowSkn\", rowFocusSkin:\"rowFSkn\", alternateRowSkin:\"altSkin\",sectionHeaderSkin:\"secHSkin\", widgetDataMap:{widgetId1:\"dataid1\", widgetId2:\"dataId2\", widgetId3:\"dataId3\" ,widgetId4:\"secDataId1\" ,widgetId5:\"secDataId2\" }, rowTemplate:box1}, selectedIndex:4, selectedIndicies:[4,5], viewType:constants.SEGUI_VIEW_TYPE_PAGEVIEW,onSwipe:onSwipeCallBck};<br/>\nvar segLayout ={padding:[5,5,5,5],margin:[5,5,5,5],containerWeight:100};<br/>\nvar segPSP ={onEditing:onEditingCallBck};<br/>\n\n//Creating the Segment<br/>\nvar segment = new kony.ui.SegmentedUI(segBasic, segLayout, segPSP);<br/>\n\n//removeAt method call,removing the row at 15th index position.\nsegment.removeAt(15);</pre>",
                        "!type": "fn(rowIndex: ?, sectionIndex: ?)"
                    },
                    "removeSectionAt": {
                        "!doc": " This method allows you to remove a section at the given index within a segment.\n @param sectionIndex {Number} Specifies the Index of the section.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for a Segment.<br/>\nvar segBasic ={id:\"segId\",isVisible:true,widgetSkin:\"widSkin\",rowSkin:\"rowSkn\", rowFocusSkin:\"rowFSkn\", alternateRowSkin:\"altSkin\", sectionHeaderSkin:\"secHSkin\", widgetDataMap:{widgetId1:\"dataid1\", widgetId2:\"dataId2\", widgetId3:\"dataId3\", widgetId4:\"secDataId1\", widgetId5:\"secDataId2\" }, rowTemplate:box1}, selectedIndex:4, selectedIndicies:[4,5], viewType:constants.SEGUI_VIEW _TYPE_PAGEVIEW, onSwipe:onSwipeCallBck};<br/>\n\nvar segLayout ={padding:[5,5,5,5], margin:[5,5,5,5], containerWeight:100};<br/>\nvar segPSP ={onEditing:onEditingCallBck};<br/>\n\n//Creating the Segment.<br/>\nvar segment = new kony.ui.SegmentedUI(segBasic, segLayout, segPSP);<br/>\n\n//removeSectionAt method call.<br/>\nsegment.removeSectionAt(2);</pre>",
                        "!type": "fn(sectionIndex: ?)"
                    },
                    "retainSelection": {
                        "!doc": "Specifies if the segment should retain the selection made even when the user navigates out of the form and revisits the form.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "rowFocusSkin": {
                        "!doc": "Specifies the skin that must be applied when user selects the row.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "rowSkin": {
                        "!doc": "Specifies the Skin that must be applied for each row.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "rowTemplate": {
                        "!doc": "Indicates the common template to be used for each row while creating the row and filling the data. This can be overridden at the row level when setting the data using the template key.\n@property {kony.ui.Box}\n@Available All Platforms\n@access Read and Write"
                    },
                    "scrollingEvents": {
                        "!doc": "An event callback that is invoked by the platform when scrolling the SegmentedUI widget.\n@property {Event}\n@Available All Platforms except BlackBerry and Mobile Web platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "searchBy": {
                        "!doc": "Indicates the identifier of the widget placed inside the row of the SegmentedUI. Search will be performed against the content present inside the  widget.\n@property {String}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "string"
                    },
                    "searchCriteria": {
                        "!doc": "Indicates search criteria of segmentedUI.\n@property {Number}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "number"
                    },
                    "sectionHeaderSkin": {
                        "!doc": "Specifies the Skin to be applied to the Section Header.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "sectionHeaderTemplate": {
                        "!doc": "Indicates the common template to be used for each section while creating the section header and filling the data.\n@property {kony.ui.Box}\n@Available All Platforms\n@access Read and Write"
                    },
                    "selectImage": "string",
                    "selectedRowIndex": {
                        "!doc": "Indicates the currently selected row in the SegmentedUI.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "selectedRowIndices": {
                        "!doc": "Specifies an array of indexes which indicates the selected rows. In case of MULTI_SELECT there can be more than one selected index and the array represents the same.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "selectedRowItems": {
                        "!doc": "Returns the data in the selected row of the segmentedUI.\n@property {Array}\n@Available All Platforms\n@access Read",
                        "!type": "[?]"
                    },
                    "selectionBehavior": {
                        "!doc": "Specifies if the segment can support single or multiple selection.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "selectionBehaviorConfig": {
                        "!doc": "This property is enabled if you select either singleselect or multiselect. It specifies the Image widget ID which is used to indicate to the user that the row is selected or deselected.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "separatorColor": {
                        "!doc": "Specifies the color of the separator between row of segmentedUI. The color property follows hex format (#RRGGBB) which includes even transparency portion.\n@property {String}\n@Available All Platforms except Symbian.\n@access Read and Write",
                        "!type": "string"
                    },
                    "separatorThickness": {
                        "!doc": "Specifies the Separator thickness in pixels.\n@property {Number}\n@Available All Platforms except iPhone and iPad.\n@access Read and Write",
                        "!type": "number"
                    },
                    "setData": {
                        "!doc": " This method Provides the ability to set the data to the segui widget.\n @param arrayofdata{Array} Specifies the array to represent data as key value pairs.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for a Segment.<br/>\nvar segBasic ={id:\"segId\", isVisible:true, widgetSkin:\"widSkin\", rowSkin:\"rowSkn\", rowFocusSkin:\"rowFSkn\", alternateRowSkin:\"altSkin\", sectionHeaderSkin:\"secHSkin\", widgetDataMap:{widgetId1:\"dataid1\", widgetId2:\"dataId2\", widgetId3:\"dataId3\" ,widgetId4:\"secDataId1\" ,widgetId5:\"secDataId2\" }, rowTemplate:box1}, selectedIndex:4, selectedIndicies:[4,5], viewType:constants.SEGUI_VIEW_TYPE_PAGEVIEW, onSwipe:onSwipeCallBck};<br/>\nvar segLayout ={padding:[5,5,5,5], margin:[5,5,5,5], containerWeight:100};<br/>\nvar segPSP ={onEditing:onEditingCallBck};<br/>\n\n//Creating the Segment.<br/>\nvar segment = new kony.ui.SegmentedUI(segBasic, segLayout, segPSP);<br/>\n\n//setData method call.<br/>\nsegment.setData([ {dataId1:\"data1\", dataId2:\"data2\", dataId3:\"data3\"}, {dataId1:\"datax\", dataId2:\"datay\" dataId3:\"dataz\", template:box1}]);</pre>",
                        "!type": "fn(arrayofdata: ?)"
                    },
                    "setDataAt": {
                        "!doc": " This method Provides the ability to set/modify the data of row in the segui widget or a row with in a section of the segmented ui.\n @param arrayofdata{Object} Specifies the JSObject to represent data as key value pairs.<b>Mandatory</b>\n @param rowIndex{Number} Specifies the Index of the row within the section if the sectionIndex is mentioned.<b>Mandatory</b>\n @param sectionIndex{Number} Specifies the Index of the section\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for a Segment.<br/>\nvar segBasic ={id:\"segId\",isVisible:true,widgetSkin:\"widSkin\",rowSkin:\"rowSkn\", rowFocusSkin:\"rowFSkn\", alternateRowSkin:\"altSkin\",sectionHeaderSkin:\"secHSkin\", widgetDataMap:{widgetId1:\"dataid1\", widgetId2:\"dataId2\", widgetId3:\"dataId3\", widgetId4:\"secDataId1\", widgetId5:\"secDataId2\" }, rowTemplate:box1},selectedIndex:4, selectedIndicies:[4,5], viewType:constants.SEGUI_VIEW_TYPE_PAGEVIEW, onSwipe:onSwipeCallBck};<br/>\nvar segLayout ={padding:[5,5,5,5],margin:[5,5,5,5],containerWeight:100};<br/>\nvar segPSP ={onEditing:onEditingCallBck};<br/>\n\n//Creating the Segment.<br/>\nvar segment = new kony.ui.SegmentedUI(segBasic, segLayout, segPSP);<br/>\n\n//Defining a row.<br/>\ndataObj1 = {globaDdataId1:\"label3\", globaDataId2:\"label4\", globalDataId3:\"label5\"};<br/>\n\n//setDataAt method call,modifying the data at 15th index position with the above row.<br/>\nsegment.setDataAt(dataObj1,15);</pre>",
                        "!type": "fn(arrayofdata: ?, rowIndex: ?, sectionIndex: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setSectionAt": {
                        "!doc": " This method Provides the ability to replace a section with in the segui widget with a new section and rows.\n @param arrayofdata{Array} Specifies the array to represent data as key value pairs.<b>Mandatory</b>\n @param sectionIndex{Number} Specifies the Index of the section.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for a Segment.<br/>\nvar segBasic ={id:\"segId\",isVisible:true, widgetSkin:\"widSkin\", rowSkin:\"rowSkn\", rowFocusSkin:\"rowFSkn\", alternateRowSkin:\"altSkin\", sectionHeaderSkin:\"secHSkin\", widgetDataMap:{widgetId1:\"dataid1\", widgetId2:\"dataId2\", widgetId3:\"dataId3\", widgetId4:\"secDataId1\" , widgetId5:\"secDataId2\" }, rowTemplate:box1}, selectedIndex:4, selectedIndicies:[4,5], viewType:constants.SEGUI_VIEW_TYPE_PAGEVIEW, onSwipe:onSwipeCallBck};<br/>\nvar segLayout ={padding:[5,5,5,5],margin:[5,5,5,5],containerWeight:100};<br/>\nvar segPSP ={onEditing:onEditingCallBck};<br/>\n\n//Creating the Segment.<br/>\nvar segment = new kony.ui.SegmentedUI(segBasic, segLayout, segPSP);<br/>\n\n//Defining section data.<br/>\ndata =[ [ \"section1\", [ {dataId1:\"aaa\"},{dataId1:\"bbb\"} ] ], [ \"section2\", [{dataId1:\"ccc\"},  {dataId1:\"ddd\"} ] ]];<br/>\n\n//setSectionAt method call,modifying the data at 2nd sectionIndex position.<br/>\nsegment.setSectionAt(data,2);</pre>",
                        "!type": "fn(arrayofdata: ?, sectionIndex: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "unselectImage": "string",
                    "viewType": {
                        "!doc": "You can use this property to select the view type of a segment.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "widgetDataMap": {
                        "!doc": "Specifies the mapping information between the widget id's and the keys in the data.\n@property {Object}\n@Available All Platforms except Mobile Web (basic).\n@access Read and Write"
                    }
                }
            },
            "SegmentedUI2": {
                "!doc": "Creates a new SegmentedUI2 object.\n@class kony.ui.SegmentedUI2\n@returns {kony.ui.SegmentedUI2}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.SegmentedUI2",
                "prototype": {
                    "accessibilityConfig": {
                        "!doc": "Specifies the accessibility configuration property for the widget.\n@property {Object}\n@Available iPhone, Android, SPA-iPhone, and SPA-Android Platforms\n@access Read and Write\n@usage <pre>\n   var accessibilityConfig = {\n       \"a11yHidden\": false,\n       \"a11yValue\": \"Your text goes here\",\n       \"a11yLabel\": \"Your text goes here\",\n       \"a11yHint\": \"Your text goes here\"\n   }</pre>"
                    },
                    "addAll": {
                        "!doc": " This method allows you to add new data to the segment. The new data is appended to the existing data.\n @param data {Array} Specifies the array to represent data as key value pairs.<b>Mandatory</b>\n @param animation{Array} This parameter is used to associate animation at given operation.<b>Optional</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for a Segment.<br/>\nvar segBasic = {id:\"segId\",isVisible:true,widgetSkin:\"widSkin\",rowSkin:\"rowSkn\", rowFocusSkin:\"rowFSkn\", alternateRowSkin:\"altSkin\",sectionHeaderSkin:\"secHSkin\", widgetDataMap:{widgetId1:\"dataid1\", widgetId2:\"dataId2\", widgetId3:\"dataId3\", widgetId4:\"secDataId1\", widgetId5:\"secDataId2\" }, rowTemplate:box1}, selectedIndex:4, selectedIndicies:[4,5], viewType:constants.SEGUI_VIEW_TYPE_PAGEVIEW, onSwipe:onSwipeCallBck};allows you to add new data to the segment.<br/>\nvar segLayout = {padding:[5,5,5,5], margin:[5,5,5,5], containerWeight:100};<br/>\nvar segPSP = {onEditing: onEditingCallBck};<br/>\n\n//Creating the Segment<br/>\nvar segment = new kony.ui.SegmentedUI2(segBasic, segLayout, segPSP);<br/>\n\n//addAll method call.<br/>\nsegment.addAll([{dataId1:\"data1\", dataId2:\"data2\", dataId3:\"data3\"}, {dataId1:\"datax\", dataId2:\"datay\" dataId3:\"dataz\", template:box1}]);</pre>",
                        "!type": "fn(data: ?)"
                    },
                    "addDataAt": {
                        "!doc": " This method allows you to add one row of data at a given index or with in a section. The new data is placed before the index. The existing data is pushed to the next row.\n @param data {Object} Specifies the JSObject to represent data as key value pairs.<b>Mandatory</b>\n @param rowIndex {Number} Specifies the Index of the row within the section if the sectionIndex is mentioned.<b>Mandatory</b>\n @param sectionIndex{Number} Specifies the Index of the section. If the index is not mentioned, the rowIndex will be treated in absolute terms.\n @param animation{Array} This parameter is used to associate animation at given operation.<b>Optional</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for a Segment.\nvar segBasic = {id:\"segId\",isVisible:true,widgetSkin:\"widSkin\",rowSkin:\"rowSkn\",rowFocusSkin:\"rowFSkn\",alternateRowSkin:\"altSkin\",sectionHeaderSkin:\"secHSkin\", widgetDataMap:{widgetId1:\"dataid1\", widgetId2:\"dataId2\", widgetId3:\"dataId3\" ,widgetId4:\"secDataId1\" ,widgetId5:\"secDataId2\" },rowTemplate:box1}, selectedIndex:4, selectedIndicies:[4,5], viewType:constants.SEGUI_VIEW_TYPE_PAGEVIEW,onSwipe:onSwipeCallBck};<br/>\nvar segLayout = {padding:[5,5,5,5], margin:[5,5,5,5], containerWeight:100};<br/>\nvar segPSP = {onEditing:onEditingCallBck};<br/>\n\n//Creating the Segment.<br/>\nvar segment = new kony.ui.SegmentedUI2(segBasic, segLayout, segPSP);<br/>\n\n//Defining a row<br/>\nvar dataObj1 = {globaDdataId1:\"label1\", globaDataId2:\"label2\", globalDataId3:\"label3\"};<br/>\n\n//addAt method call ,adding the above row at 15th index position.<br/>\nsegment.addDataAt(dataObj1, 15);</pre>",
                        "!type": "fn(data: ?, rowIndex: ?, sectionIndex: ?)"
                    },
                    "addSectionAt": {
                        "!doc": " This method allows you to add one or more sections with rows to the segment.\n @param data{Array} Specifies the array to represent data as key value pairs.<b>Mandatory</b>\n @param sectionIndex {Number} Specifies the Index of the section.\n @param animation{Array} This parameter is used to associate animation at given operation.<b>Optional</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for a Segment.<br/>\nvar segBasic = {id:\"segId\",isVisible:true,widgetSkin:\"widSkin\",rowSkin:\"rowSkn\", rowFocusSkin:\"rowFSkn\", alternateRowSkin:\"altSkin\", sectionHeaderSkin:\"secHSkin\", widgetDataMap:{widgetId1:\"dataid1\", widgetId2:\"dataId2\", widgetId3:\"dataId3\", widgetId4:\"secDataId1\", widgetId5:\"secDataId2\" },rowTemplate:box1}, selectedIndex:4, selectedIndicies:[4,5], viewType:constants.SEGUI_VIEW_TYPE_PAGEVIEW, onSwipe:onSwipeCallBck};<br/>\nvar segLayout = {padding:[5,5,5,5], margin:[5,5,5,5], containerWeight:100};<br/>\nvar segPSP = {onEditing:onEditingCallBck};<br/>\n\n//Creating the Segment.<br/>\nvar segment = new kony.ui.SegmentedUI2(segBasic, segLayout, segPSP);<br/>\n\n//Defining section data.<br/>\nvar data =[[ \"section1\", [ {dataId1:\"aaa\"},{dataId1:\"bbb\"} ]],[ \"section2\", [{dataId1:\"ccc\"},  {dataId1:\"ddd\"} ] ]];<br/>\n\n//addSectionAt method call.<br/>\nsegment.addSectionAt(data, 2);</pre>",
                        "!type": "fn(data: ?, sectionIndex: ?)"
                    },
                    "alternateRowSkin": {
                        "!doc": "Specifies the skin that is applied to every alternate even numbered row in the segment.\n@property {String}\n@Available All Platforms except Windows Phone/Windows Kiosk.\n@access Read and Write",
                        "!type": "string"
                    },
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "animateRows": {
                        "!doc": " Applies animations to specific rows of a Segment widget.\n @param animationConfig {Array} The array of elements and their animation definitions. <b>Mandatory</b>\n  @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for a Segment.<br/>\nVar transfromObject = kony.ui.makeAffineTransform();\ntransfromObject.translate(10, 0);\ntransfromObject.scale(0.1, 1);\n\nvar animationDef = {\n    100: {\n        transform: transfromObject\n    }\n};\n\nvar animationDefObject = kony.ui.createAnimation(animationDef);\n\nvar animationConfig = {\n    duration: 0.3,\n    fillMode: kony.anim.FILL_MODE_FORWARDS\n};\n\nvar row1 = {\n    sectionIndex: 0,\n    rowIndex: 1,\n};\n\nvar row2 = {\n    sectionIndex: 0,\n    rowIndex: 1,\n};\n\nform.segment.animateRows({context: [row1, row2], widgets: [widgetId], animation: {definition: animationDefObject, config: animationConfig}});</pre>",
                        "!type": "fn(animationConfig: ?)"
                    },
                    "autogrowMode": {
                        "!doc": "This property specifies that a segment grows when new content is being added to the segment.\n@property {Number}\n@Available iOS, Windows Phone 8.1, Windows Tablet 8.1, Android, SPA\n@access Read only",
                        "!type": "number"
                    },
                    "blockedUISkin": {
                        "!doc": "Specifies the skin that must be used to block the interface until the action in progress (for example, a service call) is completed.\n@property {String}\n@Available MobileWeb(Advanced),SPA(iPhone/Android/BlackBerry/Windows NTH)/Playbook\n@access Read and Write",
                        "!type": "string"
                    },
                    "border": {
                        "!doc": "Specifies the border to the SegmentedUI.\n@property {Number}\n@Available Mobile Web(Basic),Mobile Web(BJS),Mobile Web(Advanced),SPA\n@access Read and Write",
                        "!type": "number"
                    },
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "containerHeight": {
                        "!doc": "Specifies the height of the SegmentedUI in terms of percentage. The percentage is with reference to the value of containerHeightReference property. This property is applicable only when the viewType is set as SEGUI_VIEW_TYPE_TABLEVIEW or SEGUI_VIEW_TYPE_PAGEVIEW.\n@property {Number}\n@Available Available on all platforms except on all Server side Mobile Web and Desktop Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "containerHeightReference": {
                        "!doc": "Specifies the reference for the height of the container based on option that you set for containerHeight. The container height percentage is calculated based on eigher CONTAINER_HEIGHT_BY_FORM_REFERENCE or CONTAINER_HEIGHT_BY_PARENT_WIDTH.\n@property {Number}\n@Available Available on all platforms except on all Server side Mobile Web and Desktop Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "containerWeight": {
                        "!doc": "The percentage of width to be allocated by its parent widget. The parent's widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms except Win Mobile 6x.\n@access Read and Write",
                        "!type": "number"
                    },
                    "contentOffsetMeasured": {
                        "!doc": "Specifies the x and y coordinates of the top-left of the scrollable region measured in dp.\n@property {Object}\n@Available iOS, Android, Windows\n@access Read Only"
                    },
                    "contextMenu": {
                        "!doc": "A context menu is a menu that appears upon clicking a widget. A context menu typically offers a limited set of choices that are applicable for that widget.\n@property {Array}\n@Available Android/Android Tablet,BlackBerry,Windows Phone/Windows Kiosk\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "createAnimation": {
                        "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                        "!type": "fn(animationDef: ?)"
                    },
                    "data": {
                        "!doc": "Specifies the set of values that must be displayed on each row of the segment. The data is categorized into Sections and Rows.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "defaultSelection": {
                        "!doc": "Specifies if the first clickable element (Image or Label) of the segment is selected by default.\n@property {Boolean}\n@Available Mobile Web(Basic),Mobile Web(BJS)\n@access Read and Write",
                        "!type": "bool"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "dockSectionHeaders": {
                        "!doc": "The docking header property enables you to dock or place the section header at the top of the segment while scrolling the section content.\n@property {Boolean}\n@Available Android/Android Tablet\n@access Read and Write",
                        "!type": "bool"
                    },
                    "editMode": "number",
                    "editModeCustomConfig": "number",
                    "editStyle": {
                        "!doc": "Specifies the editing style to be applied to the rows in the SegmentedUI.\n@property {Number}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "number"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "enableHapticFeedback": {
                        "!doc": "This property allows you to enable or disable haptic feedback.\n@property {Boolean}\n@Available iOS, Android, Windows platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "enableReordering": {
                        "!doc": "The property allows you enable or disable reordering the rows in a Segment.\n@property {Boolean}\n@Available Android, iOS\n@access Read and Write",
                        "!type": "bool"
                    },
                    "getFirstVisibleRow": {
                        "!doc": "This method returns a JavaScript object containing the first visible row's section index and row index.\n@returns JavaScript object which would be of the following formatcontextDef={sectionIndex=0,rowIndex = 1,}\n@Available All Platforms except on Windows\n@usage <pre>\nvar object = form.segment.getFirstVisibleRow();\nkony.print(object[sectionIndex]);\nkony.print(object[rowIndex])\n</pre>",
                        "!type": "fn()"
                    },
                    "getLastVisibleRow": {
                        "!doc": "This method returns a JavaScript object containing the last visible row's section index and row index.\n@returns JavaScript object which would be of the following formatcontextDef={sectionIndex=0,rowIndex = 1,}\n@Available All Platforms except on Windows\n@usage <pre>\nVar object = form.segment.getLastVisibleRow();\nKony.print(object[sectionIndex]);\nKony.print(object[rowIndex])\n</pre>",
                        "!type": "fn()"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isMaster": {
                        "!doc": "Specifies whether the container is a master container.\n@property {Boolean}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only after initialization",
                        "!type": "bool"
                    },
                    "isVisible": {
                        "!doc": "This property controls the visibility of a widget on the form.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "layoutType": {
                        "!doc": "Specifies if the arrangement of the widgets either in free form or horizontal or vertical direction (kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, or kony.flex.FLOW_VERTICAL).\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x.\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "metainfo": {},
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "needPageIndicator": {
                        "!doc": "A Page Indicator is a succession of docs centered below the SegmentedUI2 widget. Each dot corresponds to a row segment with the white dot indicating the currently viewed page.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "onDragCompleted": {
                        "!doc": "An event callback that is invoked by the platform when drag and drop is completed on a particular Segment row.\n@param this Reference to the Segment widget\n@param dragstartcontext Table which includes row and section info for drag start position\n@param dragendcontext Table which includes row and section info for drag end position\n@Available iPhone, Android, iPad, Android Tablet\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onEditing": {
                        "!doc": "This event is triggered when a user indicates his desire to edit the row (delete or insert). This event is only triggered if the eidtStyle is set to SEGUI_EDITING_STYLE_ICON or SEGUI_EDITING_STYLE_SWIPE.\n@property {Event}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onPull": {
                        "!doc": "This action is called when Segment2 is pulled from top.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onPush": {
                        "!doc": "This action is called when Segment2 is pushed from bottom.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onReachingBegining": {
                        "!doc": "This action is called when scrolling reaches the beginning of the Segment2 widget.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onReachingEnd": {
                        "!doc": "This action is called when scrolling reaches the end of the Segment2 widget.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onRowClick": {
                        "!doc": "This event is triggered when the user click any row of the SegmentedUI. This event is not raised if the clickable property in the metainfo is set to false.\n@property {Event}\n@Available All Platforms except Mobile Web (basic).\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onRowDisplay": {
                        "!doc": "This method is used to overwrite the rows that are getting effected because of an operation on rows.\n@param listener {Function} The listener parameter is to be associated to the Segment before the elements are being displayed. <b>Mandatory</b>\n@Available All Platforms except on Windows\n@access Write\n@usage <pre>\nfunction onRowDisplayListener(widget, state, currentRowContext, startRowContext, endRowContext){}\n\nfrm1.seg.onRowDisplay = onRowDisplayListener;\n </pre>",
                        "!type": "fn()"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onSwipe": {
                        "!doc": "This event is triggered when you swipe a row in a segment.\n@property {Event}\n@Available All Platforms except BlackBerry, Mobile Web (basic), and Mobile Web (BJS) platforms.\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "padding": {
                        "!doc": "specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms except Mobile Web (basic).\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "pageOffDotImage": {
                        "!doc": "Specifies the image to indicate that the pages that are not been currently viewed. This property is available only when the viewType is selected as pageview.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "pageOnDotImage": {
                        "!doc": "Specifies the image to indicate that the page is currently being viewed. This property is available only when the viewType is selected as pageview.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "pressedSkin": {
                        "!doc": "Specifies the skin to indicate that the row of the Segui is pressed or clicked.\n@property {String}\n@Available Android/Android Tablet\n@access Read and Write",
                        "!type": "string"
                    },
                    "pullToRefreshI18NKey": {
                        "!doc": "Property to set i18n key for \"pull to refresh\" title. Platform gets the value from the current application locale specific i18n resource bundle. This property is available only when the viewType is selected as tableview.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "pullToRefreshSkin": {
                        "!doc": "Property to set a skin to the pull to refresh title. This property is available only when the viewType is selected as tableview and screenLevelWidget is true.\n@property {String}\n@Available iOS and Android Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "pushToRefreshI18NKey": {
                        "!doc": "Property to set i18n key for \"release to refresh\" title that comes for push to refresh. Platform gets the value from the current applications locale specific i18n resource bundle. This property is available only when the viewType is selected as tableview.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "pushToRefreshSkin": {
                        "!doc": "Property to set a skin to the push to refresh title. This property is available only when the viewType is selected as tableview and screenLevelWidget is true.\n@property {String}\n@Available iOS and Android Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "releaseToPullRefreshI18NKey": {
                        "!doc": "Property to set i18n key for \"release to refresh\" title that comes for pull to refresh. Platform gets the value from the current applications locale specific i18n resource bundle. This property is available only when the viewType is selected as tableview.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "releaseToPushRefreshI18NKey": {
                        "!doc": "Specifies the i18N key for \"release to refresh\" title that appears for push for refresh. The platforms get the value from the existing application locale specific i18N resource bundle. If the key is not found in the resource bundle, then platforms use the default (english locale) title text.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "removeAll": {
                        "!doc": " This method is used to remove all the existing rows and sections in a segment.\n @param animation{Array} This parameter is used to associate animation at given operation.<b>Optional</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for a Segment.<br/>\nvar segBasic ={id:\"segId\",isVisible:true,widgetSkin:\"widSkin\",rowSkin:\"rowSkn\", rowFocusSkin:\"rowFSkn\", alternateRowSkin:\"altSkin\",sectionHeaderSkin:\"secHSkin\", widgetDataMap:{widgetId1:\"dataid1\", widgetId2:\"dataId2\", widgetId3:\"dataId3\" ,widgetId4:\"secDataId1\" ,widgetId5:\"secDataId2\" },rowTemplate:box1}, selectedIndex:4, selectedIndicies:[4,5], viewType:constants.SEGUI_VIEW_TYPE_PAGEVIEW,onSwipe:onSwipeCallBck};<br/>\nvar segLayout ={padding:[5,5,5,5],margin:[5,5,5,5],containerWeight:100};<br/>\nvar segPSP ={onEditing:onEditingCallBck};<br/>\n\n//Creating the Segment.<br/>\nvar segment = new kony.ui.SegmentedUI2(segBasic, segLayout, segPSP);<br/>\n\n//removeAll method call.\nsegment.removeAll();</pre>",
                        "!type": "fn()"
                    },
                    "removeAt": {
                        "!doc": " This method is used to remove the row at the given index or a row with in a section.\n @param rowIndex{Number} Specifies the Index of the row within the section if the sectionIndex is mentioned.<b>Mandatory</b>\n @param sectionIndex {Number} Specifies the Index of the section.\n @param animation{Array} This parameter is used to associate animation at given operation.<b>Optional</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for a Segment.<br/>\nvar segBasic ={id:\"segId\",isVisible:true,widgetSkin:\"widSkin\",rowSkin:\"rowSkn\", rowFocusSkin:\"rowFSkn\", alternateRowSkin:\"altSkin\",sectionHeaderSkin:\"secHSkin\", widgetDataMap:{widgetId1:\"dataid1\", widgetId2:\"dataId2\", widgetId3:\"dataId3\" ,widgetId4:\"secDataId1\" ,widgetId5:\"secDataId2\" }, rowTemplate:box1}, selectedIndex:4, selectedIndicies:[4,5], viewType:constants.SEGUI_VIEW_TYPE_PAGEVIEW,onSwipe:onSwipeCallBck};<br/>\nvar segLayout ={padding:[5,5,5,5],margin:[5,5,5,5],containerWeight:100};<br/>\nvar segPSP ={onEditing:onEditingCallBck};<br/>\n\n//Creating the Segment<br/>\nvar segment = new kony.ui.SegmentedUI2(segBasic, segLayout, segPSP);<br/>\n\n//removeAt method call,removing the row at 15th index position.\nsegment.removeAt(15);</pre>",
                        "!type": "fn(rowIndex: ?, sectionIndex: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "removeSectionAt": {
                        "!doc": " This method allows you to remove a section at the given index within a segment.\n @param sectionIndex {Number} Specifies the Index of the section.<b>Mandatory</b>\n @param animation{Array} This parameter is used to associate animation at given operation.<b>Optional</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for a Segment.<br/>\nvar segBasic ={id:\"segId\",isVisible:true,widgetSkin:\"widSkin\",rowSkin:\"rowSkn\", rowFocusSkin:\"rowFSkn\", alternateRowSkin:\"altSkin\", sectionHeaderSkin:\"secHSkin\", widgetDataMap:{widgetId1:\"dataid1\", widgetId2:\"dataId2\", widgetId3:\"dataId3\", widgetId4:\"secDataId1\", widgetId5:\"secDataId2\" }, rowTemplate:box1}, selectedIndex:4, selectedIndicies:[4,5], viewType:constants.SEGUI_VIEW _TYPE_PAGEVIEW, onSwipe:onSwipeCallBck};<br/>\n\nvar segLayout ={padding:[5,5,5,5], margin:[5,5,5,5], containerWeight:100};<br/>\nvar segPSP ={onEditing:onEditingCallBck};<br/>\n\n//Creating the Segment.<br/>\nvar segment = new kony.ui.SegmentedUI2(segBasic, segLayout, segPSP);<br/>\n\n//removeSectionAt method call.<br/>\nsegment.removeSectionAt(2);</pre>",
                        "!type": "fn(sectionIndex: ?)"
                    },
                    "retainSelection": {
                        "!doc": "Specifies if the segment should retain the selection made even when the user navigates out of the form and revisits the form.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "rowFocusSkin": {
                        "!doc": "Specifies the skin that must be applied when user selects the row.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "rowSkin": {
                        "!doc": "Specifies the Skin that must be applied for each row.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "rowTemplate": {
                        "!doc": "Indicates the common template to be used for each row while creating the row and filling the data. This can be overridden at the row level when setting the data using the template key.\n@property {kony.ui.Box}\n@Available All Platforms\n@access Read and Write"
                    },
                    "scrollingEvents": {
                        "!doc": "An event callback that is invoked by the platform when scrolling the SegmentedUI widget.\n@property {Object}\n@Available All Platforms except BlackBerry and Mobile Web platforms.\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "scrollsToTop": {
                        "!doc": "This property enables you to scroll the Segment to top on tapping a deviceÃ¢â‚¬â„¢s status bar.\n@property {Boolean}\n@Available iPhone, iPad\n@access Read and Write",
                        "!type": "bool"
                    },
                    "searchBy": {
                        "!doc": "Indicates the identifier of the widget placed inside the row of the SegmentedUI. Search will be performed against the content present inside the widget.\n@property {String}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "string"
                    },
                    "searchCriteria": {
                        "!doc": "Specifies the search criteria to be applied when searching has been enabled on the SegmentedUI.\n@property {Number}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "number"
                    },
                    "sectionHeaderSkin": {
                        "!doc": "Specifies the Skin to be applied to the Section Header.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "sectionHeaderTemplate": {
                        "!doc": "Indicates the common template to be used for each section while creating the section header and filling the data.\n@property {kony.ui.Box}\n@Available All Platforms\n@access Read and Write"
                    },
                    "selectImage": "string",
                    "selectedIndices": {
                        "!doc": "Specifies an array of indexes which indicates the selected rows. In case of MULTI_SELECT there can be more than one selected index and the array represents the same.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "selectedRowIndex": {
                        "!doc": "Indicates the currently selected row in the SegmentedUI.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "selectedRowIndices": {
                        "!doc": "Specifies an array of indexes which indicates the selected rows. In case of MULTI_SELECT there can be more than one selected index and the array represents the same.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "selectedRowItems": {
                        "!doc": "Returns the data in the selected row of the segmentedUI.\n@property {Array}\n@Available All Platforms\n@access Read",
                        "!type": "[?]"
                    },
                    "selectionBehavior": {
                        "!doc": "Specifies if the segment can support single or multiple selection.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "selectionBehaviorConfig": {
                        "!doc": "This property is enabled if you select either singleselect or multiselect. It specifies the Image widget ID which is used to indicate to the user that the row is selected or deselected.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "separatorColor": {
                        "!doc": "Specifies the color of the separator between row of segmentedUI. The color property follows hex format (#RRGGBB) which includes even transparency portion.\n@property {String}\n@Available All Platforms except Symbian.\n@access Read and Write",
                        "!type": "string"
                    },
                    "separatorThickness": {
                        "!doc": "Specifies the Separator thickness in pixels.\n@property {Number}\n@Available All Platforms except iPhone and iPad.\n@access Read and Write",
                        "!type": "number"
                    },
                    "setAnimations": {
                        "!doc": "This method is used to associate animations to the rows at each operation.\n@param animationConfig {Array} The animation definitions to be associated. <b>Mandatory</b>\n@Available All Platforms except on Windows\n@access Write\n@usage <pre>\nVar transformObject = kony.ui.makeAffineTransform();\ntransfromObject.translate(10, 0);\ntransfromObject.scale(0.1, 1);\n\nvar animationDef = {\n    100: {\n      transform: transformObject\n    }\n};\n\nvar animationDefObject = kony.ui.createAnimation(animationDef);\n\nvar animationConfig = {\n    duration: 0.3,\n    fillMode: kony.anim.FILL_MODE_FORWARDS\n};\n\nform1.seg.setAnimations({\n  visible: {\n    definition: animationDefObject,\n    config: animationConfig,\n    callbacks: null\n  }\n});\n</pre>",
                        "!type": "fn(animationConfig: ?)"
                    },
                    "setData": {
                        "!doc": " This method allows you to set new data to the segment. When you set new data, the existing data will be replaced with the new data. If the segment has no data, the new data is placed in the segment.\n @param data{Array} Specifies the array to represent data as key value pairs.<b>Mandatory</b>\n @param animation{Array} This parameter is used to associate animation at given operation.<b>Optional</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for a Segment.<br/>\nvar segBasic ={id:\"segId\", isVisible:true, widgetSkin:\"widSkin\", rowSkin:\"rowSkn\", rowFocusSkin:\"rowFSkn\", alternateRowSkin:\"altSkin\", sectionHeaderSkin:\"secHSkin\", widgetDataMap:{widgetId1:\"dataid1\", widgetId2:\"dataId2\", widgetId3:\"dataId3\" ,widgetId4:\"secDataId1\" ,widgetId5:\"secDataId2\" }, rowTemplate:box1}, selectedIndex:4, selectedIndicies:[4,5], viewType:constants.SEGUI_VIEW_TYPE_PAGEVIEW, onSwipe:onSwipeCallBck};<br/>\nvar segLayout ={padding:[5,5,5,5], margin:[5,5,5,5], containerWeight:100};<br/>\nvar segPSP ={onEditing:onEditingCallBck};<br/>\n\n//Creating the Segment.<br/>\nvar segment = new kony.ui.SegmentedUI2(segBasic, segLayout, segPSP);<br/>\n\n//setData method call.<br/>\nsegment.setData([ {dataId1:\"data1\", dataId2:\"data2\", dataId3:\"data3\"}, {dataId1:\"datax\", dataId2:\"datay\" dataId3:\"dataz\", template:box1}]);</pre>",
                        "!type": "fn(data: ?)"
                    },
                    "setDataAt": {
                        "!doc": " This method allows you to set data or modify an existing data of a row or within a section.\n @param data{Object} Specifies the JSObject to represent data as key value pairs.<b>Mandatory</b>\n @param rowIndex{Number} Specifies the Index of the row within the section if the sectionIndex is mentioned.<b>Mandatory</b>\n @param sectionIndex{Number} Specifies the Index of the section.\n @param animation{Array} This parameter is used to associate animation at given operation.<b>Optional</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for a Segment.<br/>\nvar segBasic ={id:\"segId\",isVisible:true,widgetSkin:\"widSkin\",rowSkin:\"rowSkn\", rowFocusSkin:\"rowFSkn\", alternateRowSkin:\"altSkin\",sectionHeaderSkin:\"secHSkin\", widgetDataMap:{widgetId1:\"dataid1\", widgetId2:\"dataId2\", widgetId3:\"dataId3\", widgetId4:\"secDataId1\", widgetId5:\"secDataId2\" }, rowTemplate:box1},selectedIndex:4, selectedIndicies:[4,5], viewType:constants.SEGUI_VIEW_TYPE_PAGEVIEW, onSwipe:onSwipeCallBck};<br/>\nvar segLayout ={padding:[5,5,5,5],margin:[5,5,5,5],containerWeight:100};<br/>\nvar segPSP ={onEditing:onEditingCallBck};<br/>\n\n//Creating the Segment.<br/>\nvar segment = new kony.ui.SegmentedUI2(segBasic, segLayout, segPSP);<br/>\n\n//Defining a row.<br/>\ndataObj1 = {globaDdataId1:\"label3\", globaDataId2:\"label4\", globalDataId3:\"label5\"};<br/>\n\n//setDataAt method call,modifying the data at 15th index position with the above row.<br/>\nsegment.setDataAt(dataObj1,15);</pre>",
                        "!type": "fn(data: ?, rowIndex: ?, sectionIndex: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setSectionAt": {
                        "!doc": " This method allows you to set or modify a section with rows to the segment. When you set new data, the existing data will be replaced with the new data. If the segment has no data, the new data is placed in the segment.\n @param data{Array} Specifies the array to represent data as key value pairs.<b>Mandatory</b>\n @param sectionIndex{Number} Specifies the Index of the section.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for a Segment.<br/>\nvar segBasic ={id:\"segId\",isVisible:true, widgetSkin:\"widSkin\", rowSkin:\"rowSkn\", rowFocusSkin:\"rowFSkn\", alternateRowSkin:\"altSkin\", sectionHeaderSkin:\"secHSkin\", widgetDataMap:{widgetId1:\"dataid1\", widgetId2:\"dataId2\", widgetId3:\"dataId3\", widgetId4:\"secDataId1\" , widgetId5:\"secDataId2\" }, rowTemplate:box1}, selectedIndex:4, selectedIndicies:[4,5], viewType:constants.SEGUI_VIEW_TYPE_PAGEVIEW, onSwipe:onSwipeCallBck};<br/>\nvar segLayout ={padding:[5,5,5,5],margin:[5,5,5,5],containerWeight:100};<br/>\nvar segPSP ={onEditing:onEditingCallBck};<br/>\n\n//Creating the Segment.<br/>\nvar segment = new kony.ui.SegmentedUI2(segBasic, segLayout, segPSP);<br/>\n\n//Defining section data.<br/>\ndata =[ [ \"section1\", [ {dataId1:\"aaa\"},{dataId1:\"bbb\"} ] ], [ \"section2\", [{dataId1:\"ccc\"},  {dataId1:\"ddd\"} ] ]];<br/>\n\n//setSectionAt method call,modifying the data at 2nd sectionIndex position.<br/>\nsegment.setSectionAt(data,2);</pre>",
                        "!type": "fn(arrayofdata: ?, sectionIndex: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@param animationConfig {Object} Specifies the animation configuration object.<b> Note: This is OPTIONAL parameter and is supported only on iOS and Android platforms.</b></dd>\n   <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animEffect</b> {Object} Specifies the animation effect. Following are the available options of animation effect. <b>Optional </b></pre> </pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_EXPAND:&#160;Specifies the widget must expand gradually by increasing the height of the widget. This option is applicable only when visibility is turned on.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_REVEAL: Specifies the widget must appear gradually by decreasing the transparency of the widget.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_COLLAPSE: This is applicable when the visibility is turned off. Specifies the widget must collapse gradually by decreasing the height of the widget.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_FADE: This is applicable when the visibility is turned off. Specifies the widget must disappear gradually by increasing the transparency of the widget.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_EFFECT_NONE:&#160;This is the default option. Specifies animation should not be applied to the widget, but layout animations are applied on the Form that may be change the current widgets layout. The animation events are not triggered when this option is set.</pre></li></pre></dd>\n\n   <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animDuration - Optional </b> {Number} Specifies the duration of the animation effect in seconds. The default value is 1. <b>Optional </b></pre> </pre></dd>\n\n   <pre>  &nbsp;&nbsp;  <pre> &nbsp;&nbsp;<b>- animDelay - Optional </b> {Number} Specifies the delay of the animation effect in seconds. The default value is 0. <b>Optional </b></pre> </pre></dd>\n\n   <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp; <b>- animCurve - Optional </b> Specifies the animation curve to be applied while playing the animation. An animation curve defines the speed of the animations at different intervals of the animation duration. Following are the available options of animation curve: </p></dd> </pre> </pre> </dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEIN:&#160;Specifies the animation to start slowly and then continues with normal speed.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEOUT: Specifies the animation to start with normal speed and slowdown towards the end.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_EASEINOUT:&#160;Specifies the animation to start slowly and then continues with normal speed and then again slowdown towards the end.</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; constants.ANIMATION_CURVE_LINEAR:&#160;This is the default value. Specifies the animation to continue with normal speed.</pre></li></pre></dd>\n\n   <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp; <b>- animCallBacks - Optional </b> It is a JS dictionary containing the events invoked by the platform during the animation life cycle. Following are the available events: </p></dd> </pre> </pre> </dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; animStarted:&#160;Invoked at the end of the animation without any parameters. Following is the signature of the event:</pre></li></pre></dd><b>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp;<b>function animStarted() </b></dd> </p></pre> </pre> </pre> </br> </pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp; &gt; &nbsp; animEnded: Invoked at the end of the animation without any parameters. Following is the signature of the event:</pre></li></pre></dd>\n       <pre> &nbsp;&nbsp;  <pre> &nbsp;&nbsp;&nbsp;&nbsp;<li><pre>&nbsp;&nbsp;&nbsp;&nbsp;<b>function animEnded() </b></pre> </pre> </pre>\n\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?, animationConfig: ?)"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "unselectImage": "string",
                    "viewConfig": {
                        "!doc": "Specifies the view configuration properties such as projectionAngle, rowItemRotationAngle, spaceBetweenRowItems, rowItemWidth, and isCircular as applicable when the viewType is set as SEGUI_VIEW_TYPE_COVERFLOW.\n@property {Object}\n@Available Available on Android and Android Tablet only.\n@access Read and Write"
                    },
                    "viewType": {
                        "!doc": "You can use this property to select the view type of a segment.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "widgetDataMap": {
                        "!doc": "Specifies the mapping information between the widget id's and the keys in the data.\n@property {Object}\n@Available All Platforms except Mobile Web (basic).\n@access Read and Write"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "SignatureCapture": {
                "!doc": "Creates a new signatureCapture object.\n@class kony.ui.signatureCapture\n@returns {kony.ui.signatureCapture}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> ?",
                "prototype": {
                    "accessMode": {
                        "!doc": "Specifies how the captured image must be stored.\n@property {Number}\n@Available Available on Windows 8 platform\n@access Read and Write",
                        "!type": "number"
                    },
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "base64": {
                        "!doc": "Returns the base64 encoded string of the image raw bytes.\n@property {String}\n@Available Available on Windows 8 platform.\n@access Read",
                        "!type": "string"
                    },
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "clear": {
                        "!doc": " This method enables you to clear the area where a signature is captured. If signature is already set to widget, canvas will show that signature. If an image is not loaded, the area where the signature widget is placed is cleared.\n @Available Available on Windows 8 platform\n @access Write\n @usage <pre>\n//Defining the properties for signatureCapture<br/>\nvar signatureBasic = {id:\"signature\", info:{key:\"signature\"}, skin:\"signatureSkin\", isVisible:true, penWidth: 3};<br/>\nvar signatureLayout = {containerWeight:100};<br/>\nvar signaturePSPConf = {};<br/>\n\n//Creating the signatureCapture.<br/>\nvar signature = new kony.ui.signatureCapture(signatureBasic, signatureLayout, signaturePSPConf);<br/>\n\n//SignatureCapture clear Method call\nsignature.clear();</pre>",
                        "!type": "fn()"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget widget. The parent widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available Available on Windows 8 platform\n@access Read and Write",
                        "!type": "number"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "createAnimation": {
                        "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                        "!type": "fn(animationDef: ?)"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations when it is set to true.\n@property {Boolean}\n@Available On winphone8 only\n@access Read and Write",
                        "!type": "bool"
                    },
                    "getAsRawBytes": {
                        "!doc": "This method enables you to return the signature that is saved as an image as rawbytes. These rawbytes can be used to assign the signature image to another widget getasrawbytes() returns rawbytes which can be assigned to a variable and later can be assigned only to an image.\n@param  imageformat{String} Specifies the image format. The supported file formats are png, or jpg.<b>Mandatory</b>\n@Available Available on Windows 8 platform\n@access Write",
                        "!type": "fn(imageformat: ?)"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available Available on Windows 8 platform\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available Available on Windows 8 platform\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the visibility of the widget.\n@property {Boolean}\n@Available Available on Windows 8 platform\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutType": {
                        "!doc": "Specifies if the arrangement of the widgets either in free form or horizontal or vertical direction (kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, or kony.flex.FLOW_VERTICAL).\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available Available on Windows 8 platform\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "onCapture": {
                        "!doc": "Event callback invoked when a picture is captured.\n@property {Event}\n@Available Available on Windows 8 platform\n@access Write",
                        "!type": "fn()"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onTouchEnd": {
                        "!doc": "An event callback is invoked by the platform when the user touch is released from the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchMove": {
                        "!doc": "An event callback is invoked by the platform when the touch moves on the touch surface continuously until the movement ends. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchStart": {
                        "!doc": "An event callback is invoked by the platform when the user touches the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "padding": {
                        "!doc": "specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available Available on Windows 8 platform\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "penWidth": {
                        "!doc": "Specifies the width of the stroke lines of a signature. You can enter a value between 1-10 inclusive.\n@property {Number}\n@Available Available on Windows 8 platform\n@access Read and Write",
                        "!type": "number"
                    },
                    "rawBytes": {
                        "!doc": "Specifies the rawbytes representing an Image (usually the image captured from the camera) that can be used as a background for the Camera.\n@property {Object}\n@Available Available on Windows 8 platform.\n@access Read and Write"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "save": {
                        "!doc": " This method enables you to clear the area where a signature is captured. If signature is already set to widget, canvas will show that signature. If an image is not loaded, the area where the signature widget is placed is cleared.\n @param filename{String} Specifies the name of the file.<b>Mandatory</b>\n @param  imageformat{String} Specifies the image format. The supported file formats are png, or jpg.<b>Mandatory</b>\n @Available Available on Windows 8 platform\n @access Write\n @usage <pre>\n//Defining the properties for signatureCapture<br/>\nvar signatureBasic = {id:\"signature\", info:{key:\"signature\"}, skin:\"signatureSkin\", isVisible:true, penWidth: 3};<br/>\nvar signatureLayout = {containerWeight:100};<br/>\nvar signaturePSPConf = {};<br/>\n\n//Creating the signatureCapture.<br/>\nvar signature = new kony.ui.signatureCapture(signatureBasic, signatureLayout, signaturePSPConf);<br/>\n\n//SignatureCapture save Method call\nsignature.save(\"mysignature\", \"png\");</pre>",
                        "!type": "fn(filename: ?, imageformat: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available Available on Windows 8 platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available Available on Windows 8 platform\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available Available on Windows 8 platform\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "skin": {
                        "!doc": "Specifies the look and feel of the widget when not in focus.\n@property {String}\n@Available Available on Windows 8 platform\n@access Read and Write",
                        "!type": "string"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "Slider": {
                "!doc": "Creates a new Slider object.\n@class kony.ui.Slider\n@returns {kony.ui.Slider}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.Slider",
                "prototype": {
                    "accessibilityConfig": {
                        "!doc": "Specifies the accessibility configuration property for the widget.\n@property {Object}\n@Available iPhone, Android, SPA-iPhone, and SPA-Android Platforms\n@access Read and Write\n@usage <pre>\n   accessibilityConfig =  {\n       \"a11yHidden\": false,\n       \"a11yValue\": \"Your text goes here\",\n       \"a11yLabel\": \"Your text goes here\",\n       \"a11yHint\": \"Your text goes here\"\n   }</pre>"
                    },
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "containerWeight": {
                        "!doc": "The percentage of width to be allocated by its parent widget widget. The parent's widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox\n@property {Number}\n@Available All Platforms except SPA, Desktop Web and on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "focusThumbImage": {
                        "!doc": "Specifies the image to indicate that there is focus on the thumb. You can select the image from the resources folder.\n@property {String}\n@Available All Platforms except SPA, Desktop Web and on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "string"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the Property to set widget visibility.\n@property {Boolean}\n@Available All Platforms except SPA,Desktop Web and on all Mobile Web platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "layoutType": {
                        "!doc": "Specifies if the arrangement of the widgets either in free form or horizontal or vertical direction (kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, or kony.flex.FLOW_VERTICAL).\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "leftSkin": {
                        "!doc": "Specifies the skin to be applied to the background of the slider on left side of the thumb image.\n@property {String}\n@Available All Platforms except SPA,Desktop Web and on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "string"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms except SPA, Desktop Web and on all Mobile Web platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onSelection": {
                        "!doc": "An event callback that is invoked by the platform when the user makes a selection.\n@property {Event}\n@Available All Platforms except SPA, Desktop Web and on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onSlide": {
                        "!doc": "An event callback that is invoked by the platform when there is a change in the default selected value.\n@property {Event}\n@Available All Platforms except SPA, Desktop Web and on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchEnd": {
                        "!doc": "An event callback is invoked by the platform when the user touch is released from the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchMove": {
                        "!doc": "An event callback is invoked by the platform when the touch moves on the touch surface continuously until the movement ends. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchStart": {
                        "!doc": "An event callback is invoked by the platform when the user touches the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "orientation": {
                        "!doc": "Specifies the orientation of the slider widget. You can select the orientation as horizontal or vertical. The options are SLIDER_HORIZONTAL_ORIENTATION and SLIDER_VERTICAL_ORIENTATION.\n@property {Number}\n@Available Desktop Web\n@access Read",
                        "!type": "number"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "rightSkin": {
                        "!doc": "Specifies the Skin to be applied to the background of the slider on right side of the thumb image.\n@property {String}\n@Available All Platforms except SPA,Desktop Web and on all Mobile Web platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "selectedValue": {
                        "!doc": "Specifies the value that must be displayed as selected when rendered.\n@property {Number}\n@Available All Platforms except SPA, Desktop Web and on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "thumbImage": {
                        "!doc": "Specifies the image to indicate the thumb. You can select the image from the resources folder.\n@property {String}\n@Available All Platforms except SPA,Desktop Web and on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "string"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "viewType": {
                        "!doc": "Specifies the view type of the Slider widget. The default option is SLIDER_VIEW_TYPE_DEFAULT. When you select this option an indicator is displayed on the slider widget. The other option is SLIDER_VIEW_TYPE_PROGRESS. When you select this option the indicator is not displayed. It represents the progress of an activity that is being completed in percentage.\n@property {Number}\n@Available Desktop Web\n@access Read and Write",
                        "!type": "number"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "Switch": {
                "!doc": "Creates a new Switch object.\n@class kony.ui.Switch\n@returns {kony.ui.Switch}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.Switch",
                "prototype": {
                    "accessibilityConfig": {
                        "!doc": "Specifies the accessibility configuration property for the widget.\n@property {Object}\n@Available iPhone, Android, SPA-iPhone, and SPA-Android Platforms\n@access Read and Write\n@usage <pre>\naccessibilityConfig =  {\n       \"a11yHidden\": false,\n       \"a11yValue\": \"Your text goes here\",\n       \"a11yLabel\": \"Your text goes here\",\n       \"a11yHint\": \"Your text goes here\"\n   }</pre>"
                    },
                    "blur": {
                        "!doc": "Enables blur\n@property blur {{enabled: Boolean, value: Number}}\n@Available iOS, Android, Windows, SPA\n@access Read and Write\n@usage <pre>\n   blur =  {\n       \"enabled\": true,\n       \"value\": 50\n   }</pre>"
                    },
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "containerWeight": {
                        "!doc": "The percentage of width to be allocated by its parent widget. The parent's widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "enableHapticFeedback": {
                        "!doc": "This property allows you to enable or disable haptic feedback.\n@property {Boolean}\n@Available Android and Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "specifies the Property to set widget visibility.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "layoutType": {
                        "!doc": "Specifies if the arrangement of the widgets either in free form or horizontal or vertical direction (kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, or kony.flex.FLOW_VERTICAL).\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms except Mobile Web (basic).\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "marginInPixel": {
                        "!doc": "Enables you to define the space around a widget in pixels or in percentage.\n@property {Boolean}\n@Available on iOS, Windows, SPA, Desktop Web Platforms\n@access No",
                        "!type": "bool"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "nativeThumbLook": {
                        "!doc": "Provides the native thumb look of the Switch.\n@property {Boolean}\n@Available iOS\n@access Read and Write",
                        "!type": "bool"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onSlide": {
                        "!doc": "An event callback that is invoked by the platform when there is a change in the default selected value.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchEnd": {
                        "!doc": "An event callback is invoked by the platform when the user touch is released from the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchMove": {
                        "!doc": "An event callback is invoked by the platform when the touch moves on the touch surface continuously until the movement ends. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchStart": {
                        "!doc": "An event callback is invoked by the platform when the user touches the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "rightSideText": {
                        "!doc": "Specifies the text to be displayed on the right portion of the Switch.\n@property {String}\n@Available on iOS, Windows, SPA, Desktop Web Platforms\n@access No",
                        "!type": "string"
                    },
                    "selectedIndex": {
                        "!doc": "This property is accessible only from code and it specifies the option of the Switch that must be shown as selected when rendered.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "skin": {
                        "!doc": "Specifies a background skin for switch widget.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "widgetAlignment": {
                        "!doc": "Indicates how a widget is to be anchored with respect to its parent. Each of these below options have a horizontal alignment attribute and a vertical alignment attribute.\n@property {Number}\n@Available on iOS, Windows, SPA, Desktop Web platforms\n@access No",
                        "!type": "number"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "TabPane": {
                "!doc": "Creates a new TabPane object.\n@class kony.ui.TabPane\n@returns {kony.ui.TabPane}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.TabPane",
                "prototype": {
                    "activeFocusSkin": {
                        "!doc": "This is a skin property.This property specifies the skin that is to be applied when a TabPane is active and focused.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "activeSkin": {
                        "!doc": "This is a skin property.Skin to be applied when a Tabpane is active.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "activeTabs": {
                        "!doc": "Indicates the selected Tabs indices. Index starts from 0. Specifies the Tab that must be displayed as the default open Tab.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "addTabAt": {
                        "!doc": " This method Provides the ability to add a tab at the specified index to the TabPane.\n @param tabId{String} Specifies the id of the tab.<b>Mandatory</b>\n @param tabName{String}Specifies the name of the tab.<b>Mandatory</b>\n @param tabImage{String}Specifies the image of the tab.<b>Mandatory</b>\n @param box{Object}Specifies the reference of the box.<b>Mandatory</b>\n @param index{Number} Index number at which the widget is to be added.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for TabPane.<br/>\nvar tabPaneBasic = {id:\"tPane\", activeSkin:\"aSkin\",activeFocusSkin:\"aFSkin\", inactiveSkin:\"inActiveSkin\", viewType:constants.TABPANE_VIEW_TYPE_TABVIEW , screenLevelWidget:true, isVisible:true,retainPositionInTab:true, needPageIndicator:true, selectedTabIndex:0};<br/>\nvar tabPaneLayout ={padding:[5,5,5,5], margin:[5,5,5,5], paddingInPixel:true, marginInPixel:true, widgetAlignment:constants.WIDGET_ALIGN_TOP_LEFT, containerWeight:99};<br/>\nvar tabPanePSP={};<br/>\n\n//Creating the TabPane.<br/>\nvar tabPane = new kony.ui.TabPane(tabPaneBasic, tabPaneLayout, tabPanePSP);<br/>\n\n//Defining the properties for Tab.<br/>\nvar tabBasicConfig = {\"id\": \"tabNew\", \"tabName\": \"TabDynamic\",\"spacing\": 1, \"widgetDirection\": 1,\"isVisible\": true,\"orientation\": constants.BOX_LAYOUT_VERTICAL }<br/>\n\nvar tabLayoutConfig =  { \"margin\": [0, 0, 0, 0],\"padding\": [0, 0, 0, 0],\"marginInPixel\": false,\"paddingInPixel\": false,\"containerWeight\": 93,\"layoutType\": constants.CONTAINER_LAYOUT_BOX}<br/>\n\nvar tabPspConfig =  {\"image\": null }<br/>\n\n//Creating the Tab<br/>\nvar tabNew = new kony.ui.Box(tabBasicConfig,tabLayoutConfig,tabPspConfig)<br/>\n\n//addTabAt method call <br/>\ntabPane.addTabAt(\"tabNew\",\"TabDynamic\", \"TabImage.png\",tabNew ,0);  //image should already be made available.</pre>",
                        "!type": "fn(tabId: ?, tabName: ?, tabImage: ?, box: ?, index: ?)"
                    },
                    "addtab": {
                        "!doc": " This method Provides the ability to add a tab to the TabPane widget.\n @param tabId{String}Specifies the id of the tab.<b>Mandatory</b>\n @param tabName{String}Specifies the name of the tab.<b>Mandatory</b>\n @param tabImage{String}Specifies the image of the tab.<b>Mandatory</b>\n @param tabpaneid{Object}Handle to the widget instance.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for TabPane.<br/>\nvar tabBasic = {id:\"tPane\", activeSkin:\"aSkin\", activeFocusSkin:\"aFSkin\", inactiveSkin:\"inActiveSkin\", viewType:constants.TABPANE_VIEW_TYPE_TABVIEW , screenLevelWidget:true, isVisible:true, retainPositionInTab:true, needPageIndicator:true, selectedTabIndex:0};<br/>\nvar tabLayout ={padding:[5,5,5,5], margin:[5,5,5,5], paddingInPixel:true, marginInPixel:true, widgetAlignment:constants.WIDGET_ALIGN_TOP_LEFT, containerWeight:99};<br/>\nvar tabPSP={};<br/>\n\n//Creating the TabPane.<br/>\nvar tabPane = new kony.ui.TabPane(tabBasic, tabLayout, tabPSP);<br/>\n\n//addTab method call<br/>\ntabPane.addTab(\"tPane\",\"LocTAB\",\"app.png\", box1, masterDataLoad:{}); //image should already be made available.</pre>",
                        "!type": "fn(tabId: ?, tabName: ?, tabImage: ?, tabpaneid: ?)"
                    },
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "containerHeight": {
                        "!doc": "Specifies the available height of the container in terms of percentage. The percentage is with reference to the value of containerHeightReference property.\n@property {Number}\n@Available Available on all platforms except on all Server side Mobile Web, Desktop Web, and Windows Kiosk platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "containerHeightReference": {
                        "!doc": "Specifies the reference for the height of the container based on option that you set for containerHeight. The container height percentage is calculated based on eigher CONTAINER_HEIGHT_BY_FORM_REFERENCE or CONTAINER_HEIGHT_BY_PARENT_WIDTH.\n@property {Number}\n@Available Available on all platforms except on all Server side Mobile Web, Desktop Web, and Windows Kiosk platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget widget.The parent widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms except Win Mobile 6x.\n@access Read and Write",
                        "!type": "number"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "createAnimation": {
                        "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                        "!type": "fn(animationDef: ?)"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "inactiveSkin": {
                        "!doc": "Skin to be applied for all inactive tabs.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isMaster": {
                        "!doc": "Specifies whether the container is a master container.\n@property {Boolean}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only after initialization",
                        "!type": "bool"
                    },
                    "isVisible": {
                        "!doc": "Specifies the visibility of the widget on the form.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "layoutType": {
                        "!doc": "Specifies if the arrangement of the widgets either in free form or horizontal or vertical direction (kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, or kony.flex.FLOW_VERTICAL).\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x.\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onTabClick": {
                        "!doc": "Event callback invoked when the tab is clicked. This event is available only when the viewType is set to Collapsible View and is triggered when you expand or collapse any Tab. It accepts 2 input parameters as tabpane and tabindex.\n@property {Event}\n@Available Available on all platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "padding": {
                        "!doc": "Specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms except Mobile Web (basic).\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "pageSkin": {
                        "!doc": "Specifies the skin for page indicator. This property is applicable only when viewType is set as TABPANE_VIEW_TYPE_PAGEVIEW and images are selected for pageOnDotImage and pageOffDotImage.\n@property {String}\n@Available Available on Desktop Web platform only.\n@access Read and Write",
                        "!type": "string"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "removeTabAt": {
                        "!doc": " This method Provides the ability to remove a tab at the specified index on the TabPane.\n @param index{Number} Index represents the tabindex in the order in which the tab originally was added.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for TabPane.<br/>\nvar tabBasic = {id:\"tPane\", activeSkin:\"aSkin\", activeFocusSkin:\"aFSkin\", inactiveSkin:\"inActiveSkin\", viewType:constants.TABPANE_VIEW_TYPE_TABVIEW , screenLevelWidget:true, isVisible:true, retainPositionInTab:true, needPageIndicator:true, selectedTabIndex:0};<br/>\nvar tabLayout ={padding:[5,5,5,5], margin:[5,5,5,5], paddingInPixel:true, marginInPixel:true, widgetAlignment:constants.WIDGET_ALIGN_TOP_LEFT, containerWeight:99};<br/>\nvar tabPSP={};<br/>\n\n//Creating the TabPane.<br/>\nvar tabPane = new kony.ui.TabPane(tabBasic, tabLayout, tabPSP);<br/>\n\n//removeTabAt method call.<br/>\ntabPane.removeTabAt(2);</pre>",
                        "!type": "fn(index: ?)"
                    },
                    "removeTabById": {
                        "!doc": " This method Provides the ability to remove a tab based on the tabid on the TabPane.\n @param tabId{String} Specifies the id of the tab.<b>Mandatory</b>\n @Available All Platforms\n @access Write\n @usage <pre>\n//Defining the properties for TabPane.<br/>\nvar tabBasic = {id:\"tPane\", activeSkin:\"aSkin\", activeFocusSkin:\"aFSkin\", inactiveSkin:\"inActiveSkin\", viewType:constants.TABPANE_VIEW_TYPE_TABVIEW , screenLevelWidget:true, isVisible:true, retainPositionInTab:true, needPageIndicator:true, selectedTabIndex:0};<br/>\nvar tabLayout ={padding:[5,5,5,5], margin:[5,5,5,5], paddingInPixel:true, marginInPixel:true, widgetAlignment:constants.WIDGET_ALIGN_TOP_LEFT, containerWeight:99};<br/>\nvar tabPSP={};<br/>\n\n//Creating the TabPane.<br/>\nvar tabPane = new kony.ui.TabPane(tabBasic, tabLayout, tabPSP);<br/>\n\n//removeTabById method call.<br/>\ntabPane.removeTabById(\"tPane\")</pre>",
                        "!type": "fn(tabId: ?)"
                    },
                    "retainPositionInTab": {
                        "!doc": "Indicates whether each individual tab should retain its scroll position when the Tabpanes are switched over.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "tabHeaderHeight": {
                        "!doc": "Specifies the height of the Tab header in pixels. Default is 64 pixels. This property is applicable only when the viewType is set as TABPANE_VIEW_TYPE_TABPANE.\n@property {number}\n@Available Available on Android/Android Tablet platform only.\n@access Read and Write",
                        "!type": "number"
                    },
                    "tabHeaderTemplate": {
                        "!doc": "Accepts reference to a box widget which represents a UI template for a custom tab header. The box template is allowed to have only Label, Link, Richtext, Button, and Image widgets.\n@property {Object}\n@Available Available on Desktop Web platform only.\n@access Read and Write"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "viewConfig": {
                        "!doc": "Specifies the view configuration for different viewtypes of TabPane.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "viewType": {
                        "!doc": "Specifies the View type of the TabPane.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "TextArea": {
                "!doc": "Creates a new TextArea object.\n@class kony.ui.TextArea\n@returns {kony.ui.TextArea}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.TextArea",
                "prototype": {
                    "autoCapitalize": {
                        "!doc": "Specifies the character capitalization behavior.\n@property {Number}\n@Available All Platforms except SPA and on all Mobile Web platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "backgroundColor": {
                        "!doc": "Specifies the background color of the widget in hex format.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "blockedUISkin": {
                        "!doc": "Specifies the skin that must be used to block the interface until the action in progress (for example, a service call) is completed.\n@property {String}\n@Available MobileWeb(Advanced),SPA (iPhone/Android/BlackBerry/Windows NTH)/Playbook\n@access Read and Write",
                        "!type": "string"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget widget. The parent widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "enableHapticFeedback": {
                        "!doc": "This property allows you to enable or disable haptic feedback.\n@property {Boolean}\n@Available iOS and Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "focusSkin": {
                        "!doc": "This is a skin property and it determines the look and feel of the widget when in focus.\n@property {String}\n@Available All Platforms except Mobile Web and SPA (Android) platforms.\n@access Read and Write",
                        "!type": "string"
                    },
                    "getBadge": {
                        "!doc": " This method enables you to read the badge value (if any) attached to the given widget.\n @returns {String} - Reference to the gesture is returned.\n @Available iPhone,iPad\n @access Write\n @usage <pre>\n//To get a badge value on a box with ID hbx1 placed on a form frm1, use the following code:<br/>\nvar badgeVal =frm1.hbx1.getBadge();<br/>\nalert(\"badge value is::\"+badgeVal);</pre>",
                        "!type": "fn() -> string"
                    },
                    "hoverSkin": {
                        "!doc": "Specifies the look and feel of a widget when the cursor hovers on the widget.\n@property {String}\n@Available windows 8,Desktop Web\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the visibility of the widget.\n@property {Boolean}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x.\n@access Read and Write",
                        "!type": "bool"
                    },
                    "keyBoardStyle": {
                        "!doc": "When you interact with a TextBox widget, a keyboard is displayed  You can use this property to select the type of keyboard that you want to display.\n@property {Number}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "keyboardActionLabel": {
                        "!doc": "Specifies if the text to be displayed in action key of the keyboard.\n@property {Number}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "number"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "maxTextLength": {
                        "!doc": "Specifies the maximum number of characters that the text field can accept.\n@property {Number}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "numberOfVisibleLines": {
                        "!doc": "Number of lines to be displayed at a given time in the view port of the TextArea. This essentially decides the height of the text area.\n@property {Number}\n@Available All Platforms except Mobile Web (basic)\n@access Read and Write",
                        "!type": "number"
                    },
                    "onBeginEditing": {
                        "!doc": "This is an event callback that is invoked by the platform when the user clicks within the TextArea and is about to start editing.\n@property {Event}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onDone": {
                        "!doc": "This event is triggered when user is done with entering text in TextArea and click or touch the Go or Enter option.\n@property {Event}\n@Available All Platforms except SPA and on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onEndEditing": {
                        "!doc": "Property to listen for events when user ends entering the text.\n@property {Event}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onKeyDown": {
                        "!doc": "This is an event that is invoked when the key is pressed down.\n@property {Event}\n@Available Desktop Web\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onKeyUp": {
                        "!doc": "This is an event that is invoked when the key is up.\n@property {Event}\n@Available Desktop Web\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTextChange": {
                        "!doc": "This event callback triggered when text in the TextArea changes. This event is not fired when the text is changed programmatically.\n@property {Event}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "padding": {
                        "!doc": "Specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "pasteboardType": {
                        "!doc": "This property enables an application to share data within the application or with another application using system-wide or application-specific pasteboards.\n@property {Number}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "number"
                    },
                    "placeholder": {
                        "!doc": "The placeholder attribute specifies a short hint that describes the expected value of an input field (example, a sample value or a short description of the expected format).\n@property {String}\n@Available All Platforms except Windows Phone (Mango) and on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "string"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "secureTextEntry": {
                        "!doc": "Specifies whether the text entered by the user will be secured using a mask character, such as asterisk or dot. This is typically set to true for a password field.\n@property {Boolean}\n@Available All Platforms except Win Mobile6x and on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "bool"
                    },
                    "setBadge": {
                        "!doc": " This method enables you to set the badge value to the given widget at the upper, right corner of the widget.\n @param badgeText{String} Specifies the Text value that appears within the badge.<b>Mandatory</b>\n @param skin{String}Specifies the background color for the badge.\n @Available iPhone,iPad\n @access Write\n @usage <pre>\n//To set a badge value with skin \"badgeSkin\" on a box with ID hbx1 placed on a form frm1, use the following code:<br/>\nfrm1.hbx1.setBadge(\"2\",\"badgeSkin\");</pre>",
                        "!type": "fn(badgeText: ?, skin: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "skin": {
                        "!doc": "Specifies the look and feel of the widget when not in focus.\n@property {String}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x.\n@access Read and Write",
                        "!type": "string"
                    },
                    "text": {
                        "!doc": "Specify a general or descriptive text for the TextArea widget.\n@property {String}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x.\n@access Read and Write",
                        "!type": "string"
                    },
                    "textInputMode": {
                        "!doc": "Specifies the type of input characters that a user can enter into the TextArea widget.\n@property {Number}\n@Available All Platforms except SPA, BlackBerry, and on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "toolTip": {
                        "!doc": "Specifies the hint text when the cursor hovers over a widget.\n@property {String}\n@Available windows 8\n@access Read and Write",
                        "!type": "string"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    }
                }
            },
            "TextArea2": {
                "!doc": "Creates a new TextArea2 object.\n@class kony.ui.TextArea2\n@returns {kony.ui.TextArea2}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.TextArea2",
                "prototype": {
                    "accessibilityConfig": {
                        "!doc": "Specifies the accessibility configuration property for the widget.\n@property {Object}\n@Available iPhone, Android, SPA-iPhone, and SPA-Android Platforms\n@access Read and Write\n@usage <pre>\n   accessibilityConfig =  {\n       \"a11yHidden\": false,\n       \"a11yValue\": \"Your text goes here\",\n       \"a11yLabel\": \"Your text goes here\",\n       \"a11yHint\": \"Your text goes here\"\n   }</pre>"
                    },
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "autoCapitalize": {
                        "!doc": "Specifies the character capitalization behavior.\n@property {Number}\n@Available All Platforms except SPA and on all Mobile Web platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "backgroundColor": {
                        "!doc": "Specifies the background color of the widget in hex format.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "blockedUISkin": {
                        "!doc": "Specifies the skin that must be used to block the interface until the action in progress (for example, a service call) is completed.\n@property {String}\n@Available MobileWeb(Advanced),SPA (iPhone/Android/BlackBerry/Windows NTH)/Playbook\n@access Read and Write",
                        "!type": "string"
                    },
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget widget. The parent widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "contentAlignment": {
                        "!doc": "Specifies the alignment of the text and placeholder text for a TextArea with respect to its boundaries.\n@property {Number}\n@Available All Platforms except Server side Mobile Web\n@access Read and Write",
                        "!type": "number"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "createAnimation": {
                        "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                        "!type": "fn(animationDef: ?)"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "focusSkin": {
                        "!doc": "This is a skin property and it determines the look and feel of the widget when in focus.\n@property {String}\n@Available All Platforms except Mobile Web and SPA (Android) platforms.\n@access Read and Write",
                        "!type": "string"
                    },
                    "getBadge": {
                        "!doc": " This method enables you to read the badge value (if any) attached to the given widget.\n @returns String - Reference to the gesture is returned.\n @Available iPhone,iPad\n @access Write\n @usage <pre>\n//To get a badge value on a box with ID hbx1 placed on a form frm1, use the following code:<br/>\nvar badgeVal =frm1.hbx1.getBadge();<br/>\nalert(\"badge value is::\"+badgeVal);</pre>",
                        "!type": "fn()"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "hoverSkin": {
                        "!doc": "Specifies the look and feel of a widget when the cursor hovers on the widget.\n@property {String}\n@Available windows 8,Desktop Web\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the visibility of a widget on the form.\n@property {Boolean}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x.\n@access Read and Write",
                        "!type": "bool"
                    },
                    "keyBoardStyle": {
                        "!doc": "When you interact with a TextArea widget, a keyboard is displayed You can use this property to select the type of keyboard that you want to display.\n@property {Number}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "keyboardActionLabel": {
                        "!doc": "Specifies if the text to be displayed in action key of the keyboard.\n@property {Number}\n@Available iPhone,iPad, and Android\n@access Read and Write",
                        "!type": "number"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "layoutType": {
                        "!doc": "Specifies if the arrangement of the widgets either in free form or horizontal or vertical direction (kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, or kony.flex.FLOW_VERTICAL).\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxTextLength": {
                        "!doc": "Specifies the maximum number of characters that the text field can accept.\n@property {Number}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "numberOfVisibleLines": {
                        "!doc": "Number of lines to be displayed with in the view port of the TextArea. This essentially decides the height of the TextArea2.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "onBeginEditing": {
                        "!doc": "This is an event callback that is invoked by the platform when the user clicks within the TextArea and is about to start editing.\n@property {Event}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onDone": {
                        "!doc": "This event is triggered when user is done with entering text in textarea and click or touch the Go or Enter option.\n@property {Event}\n@Available All Platforms except SPA and on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onEndEditing": {
                        "!doc": "Property to listen for events when user ends entering the text.\n@property {Event}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onKeyDown": {
                        "!doc": "This is an event that is invoked when the key is pressed down.\n@property {Event}\n@Available Desktop Web\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onKeyUp": {
                        "!doc": "This is an event that is invoked when the key is up.\n@property {Event}\n@Available Desktop Web\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onTextChange": {
                        "!doc": "This is an event callback triggered when text in the TextArea changes. This event is not fired when the text is changed programmatically.\n@property {Event}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchEnd": {
                        "!doc": "An event callback is invoked by the platform when the user touch is released from the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchMove": {
                        "!doc": "An event callback is invoked by the platform when the touch moves on the touch surface continuously until the movement ends. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchStart": {
                        "!doc": "An event callback is invoked by the platform when the user touches the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "padding": {
                        "!doc": "Specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms except Mobile Web (basic).\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "pasteboardType": {
                        "!doc": "This property enables an application to share data within the application or with another application using system-wide or application-specific pasteboards.\n@property {Number}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "number"
                    },
                    "placeholder": {
                        "!doc": "The placeholder attribute specifies a short hint that describes the expected value of an input field (example, a sample value or a short description of the expected format).\n@property {String}\n@Available All Platforms except Windows Phone (Mango) and on all Mobile Web platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "restrictCharactersSet": {
                        "!doc": "Specifies the restricted character set that app developer can impose on soft keyboard entry into the TextArea widget.\n@property {String}\n@Available iOS, Android and SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "setBadge": {
                        "!doc": " This method enables you to set the badge value to the given widget at the upper, right corner of the widget.\n @param badgeText{String} Specifies the Text value that appears within the badge.<b>Mandatory</b>\n @param skin{String}Specifies the background color for the badge.\n @Available iPhone,iPad\n @access Write\n @usage <pre>\n//To set a badge value with skin \"badgeSkin\" on a box with ID hbx1 placed on a form frm1, use the following code:<br/>\nfrm1.hbx1.setBadge(\"2\",\"badgeSkin\");</pre>",
                        "!type": "fn(badgeText: ?, skin: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "shadowDepth": {
                        "!doc": "     Defines the depth of the shadow effect applied to the Widget.\n     @property {Number}\n\t @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the shadowDepth property<br/>\n\t form1.TxtA1.shadowDepth = 10;</pre>",
                        "!type": "number"
                    },
                    "shadowType": {
                        "!doc": "     Sets a type of the shadow effect to apply to the Widget.\n     @property {Number}\n\t @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the shadowType property<br/>\n\t form1.TxtA1.shadowType = constants.VIEW_BOUNDS_SHADOW;</pre>",
                        "!type": "number"
                    },
                    "skin": {
                        "!doc": "Specifies the look and feel of the widget when not in focus.\n@property {String}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x.\n@access Read and Write",
                        "!type": "string"
                    },
                    "text": {
                        "!doc": "Specify a general or descriptive text for the TextArea widget.\n@property {String}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x.\n@access Read and Write",
                        "!type": "string"
                    },
                    "textInputMode": {
                        "!doc": "Specifies the type of input characters that a user can enter into the TextArea widget.\n@property {Number}\n@Available All Platforms except SPA, BlackBerry, and on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "number"
                    },
                    "toolTip": {
                        "!doc": "Specifies the hint text when the cursor hovers over a widget.\n@property {String}\n@Available windows 8\n@access Read and Write",
                        "!type": "string"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "TextBox": {
                "!doc": "Creates a new TextBox object.\n@class kony.ui.TextBox\n@returns {kony.ui.TextBox}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.TextBox",
                "prototype": {
                    "autoCapitalize": {
                        "!doc": "Specifies the character capitalization behavior.\n@property {Number}\n@Available All Platforms except on all Mobile Web (basic), Mobile Web (BJS) and it is browser specific on Mobile Web (Advanced) platform.\n@access Read and Write",
                        "!type": "number"
                    },
                    "backgroundColor": {
                        "!doc": "Specifies the background color of the widget in hex format.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "blockedUISkin": {
                        "!doc": "Specifies the skin that must be used to block the interface until the action in progress (for example,a service call) is completed.\n@property {String}\n@Available Mobile Web (Advanced),SPA (iPhone/Android/BlackBerry/Windows NTH)/Playbook\n@access Read and Write",
                        "!type": "string"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget widget. The parent widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "contentAlignment": {
                        "!doc": "Specifies the alignment of the text for a TextBox with respect to its boundaries.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "filterlist": {
                        "!doc": "The values you enter in the TextBox are matched against this list and possible matches are displayed.\n@property {Array}\n@Available BlackBerry,Android,Windows Mobile\n@access write",
                        "!type": "[?]"
                    },
                    "focusSkin": {
                        "!doc": "This is a skin property and it determines the look and feel of the widget when in focus .\n@property {String}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "string"
                    },
                    "getBadge": {
                        "!doc": " This method enables you to read the badge value (if any) attached to the given widget.\n @returns {String} Reference to the gesture is returned\n @Available iPhone,iPad\n @access Write\n @usage <pre>\n//To get a badge value on a box with ID hbx1 placed on a form frm1, use the following code:<br/>\nvar badgeVal =frm1.hbx1.getBadge();<br/>\nalert(\"badge value is::\"+badgeVal);</pre>",
                        "!type": "fn() -> string"
                    },
                    "hoverSkin": {
                        "!doc": "Specifies the look and feel of a widget when the cursor hovers on the widget.\n@property {String}\n@Available windows 8,Desktop Web\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the visibility of the widget.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "keyBoardStyle": {
                        "!doc": "When you interact with a TextBox widget, a keyboard is displayed You can use this property to select the type of keyboard that you want to display.\n@property {Number}\n@Available All Platforms except on all Mobile Web (basic), Mobile Web (BJS) and it is device specific on Mobile Web (Advanced) platform.\n@access Read and Write",
                        "!type": "number"
                    },
                    "keyboardActionLabel": {
                        "!doc": "Specifies if the text to be displayed in action key of the keyboard.\n@property {Number}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "number"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "maxTextLength": {
                        "!doc": "Specifies the maximum number of characters that the text field can accept.\n@property {Number}\n@Available All Platforms except Mobile Web(basic)\n@access Read and Write",
                        "!type": "number"
                    },
                    "nativeListFieldFocusSkin": {
                        "!doc": "Specifies the skin that is applied to a focused item in the native popup (the list of items are displayed and a pop up appears just below the textfield) that appears when you enter a value in the TextBox.\n@property {String}\n@Available BlackBerry\n@access Read and Write",
                        "!type": "string"
                    },
                    "nativeListFieldSkin": {
                        "!doc": "Specifies the skin that is applied to each item in the native popup (the list of items are displayed and a pop up appears just below the text field) that appears when you enter a value in the TextBox.\n@property {String}\n@Available BlackBerry\n@access Read and Write",
                        "!type": "string"
                    },
                    "onBeginEditing": {
                        "!doc": "This is an event callback that is invoked by the platform when the user clicks within the TextBox and is about to start editing.\n@property {Event}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onCancel": {
                        "!doc": "This event is a callback that is invoked by the platform when the user performs a click action on the cancel button. This event is triggered only when the viewType is set as TEXTBOX_VIEW_TYPE_SEARCH_VIEW.\n@property {Event}\n@Available iOS platform only\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onDone": {
                        "!doc": "This event is a callback that is invoked by the platform then the user performs a click action on the Go or Enter button.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onEndEditing": {
                        "!doc": "This is an event callback that is invoked by the platform when the user performs one of the actions.\n@property {Event}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onKeyDown": {
                        "!doc": "This is an event that is invoked when the key is pressed down.\n@property {Event}\n@Available Desktop Web\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onKeyUp": {
                        "!doc": "This is an event that is invoked when the key is up.\n@property {Event}\n@Available Desktop Web\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTextChange": {
                        "!doc": "This is an event callback triggered when text in the text box changes. This event is not fired when the text is changed programmatically.\n@property {Event}\n@Available All Platforms except Mobile Web(basic/BJS) and J2ME.\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "padding": {
                        "!doc": "Specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms except Mobile Web(basic).\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "pasteboardType": {
                        "!doc": "Specifies the property to manage copy and paste of text in the textbox.\n@property {Number}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "number"
                    },
                    "placeholder": {
                        "!doc": "The placeholder attribute specifies a short hint that describes the expected value of an input field (example, a sample value or a short description of the expected format).\n@property {String}\n@Available All Platforms except Mango and Mobile Web (basic/BJS)\n@access Read and Write",
                        "!type": "string"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "setBadge": {
                        "!doc": " This method enables you to set the badge value to the given widget at the upper, right corner of the widget.\n @param badgeText{String} Specifies the Text value that appears within the badge.<b>Mandatory</b>\n @param skin{String}Specifies the background color for the badge.\n @Available iPhone,iPad\n @access Write\n @usage <pre>\n//To set a badge value with skin \"badgeSkin\" on a box with ID hbx1 placed on a form frm1, use the following code:<br/>\nfrm1.hbx1.setBadge(\"2\",\"badgeSkin\");</pre>",
                        "!type": "fn(badgeText: ?, skin: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "skin": {
                        "!doc": "Specifies the look and feel of the widget when not in focus.\n@property {String}\n@Available All Platfroms\n@access Read and Write",
                        "!type": "string"
                    },
                    "text": {
                        "!doc": "Specifies a general or descriptive text for the TextBox widget.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "textInputMode": {
                        "!doc": "Specifies the type of input characters that a user can enter into the TextBox widget.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "viewType": {
                        "!doc": "Specifies the appearance of the Textbox as Search view or a textbox to accept text input.\n@property {Number}\n@Available iPhone,iPad,Mobile Web (Advanced),Andriod\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "TextBox2": {
                "!doc": "Creates a new TextBox2 object.\n@class kony.ui.TextBox2\n@returns {kony.ui.TextBox2}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.TextBox2",
                "prototype": {
                    "accessibilityConfig": {
                        "!doc": "Specifies the accessibility configuration property for the widget.\n@property {Object}\n@Available iPhone, Android, SPA-iPhone, and SPA-Android Platforms\n@access Read and Write\n@usage <pre>\n   accessibilityConfig =  {\n       \"a11yHidden\": false,\n       \"a11yValue\": \"Your text goes here\",\n       \"a11yLabel\": \"Your text goes here\",\n       \"a11yHint\": \"Your text goes here\"\n   }</pre>"
                    },
                    "accessibilityConfigForClearButton": {
                        "!doc": "Specifies the accessiblity configuration property for clear button.\n@property {Object}\n@Available iPhone Platform\n@access Read and Write\n@usage <pre>\naccessibilityConfig =  {\n     \"a11yHidden\": false,\n     \"a11yValue\": \"Your text goes here\",\n     \"a11yLabel\": \"Your text goes here\",\n     \"a11yHint\": \"Your text goes here\"\n},"
                    },
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "autoCapitalize": {
                        "!doc": "Specifies the character capitalization behavior.\n@property {Number}\n@Available All Platforms except on all Mobile Web (basic), Mobile Web (BJS) and it is browser specific on Mobile Web (Advanced) platform.\n@access Read and Write",
                        "!type": "number"
                    },
                    "autoFilter": {
                        "!doc": "Specifies if the input characters you enter in the TextBox widget must be matched against the filterList and possible matches be displayed.\n@propert {Boolean}\n@Available Windows Mobile, Android, Windows Kiosk\n@access Read and Write",
                        "!type": "bool"
                    },
                    "backgroundColor": {
                        "!doc": "Specifies the background color of the widget in hex format.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "blockedUISkin": {
                        "!doc": "Specifies the skin that must be used to block the interface until the action in progress (for example,a service call) is completed.\n@property {String}\n@Available Mobile Web (Advanced),SPA(iPhone/Android/BlackBerry/Windows NTH)/Playbook\n@access Read and Write",
                        "!type": "string"
                    },
                    "blur": {
                        "!doc": "Enables blur\n@property blur {{enabled: Boolean, value: Number}}\n@Available iOS, Android, Windows, SPA\n@access Read and Write\n@usage <pre>\n   blur =  {\n       \"enabled\": true,\n       \"value\": 50\n   }</pre>"
                    },
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "containerHeight": {
                        "!doc": "Specifies the height of the textbox in terms of percentage. The percentage is with reference to the value of containerHeightReference property.\n@property {Number}\n@Available All Platforms except Server side Mobile Web platform\n@access Read and Write",
                        "!type": "number"
                    },
                    "containerHeightMode": {
                        "!doc": "Specifies the height of the container based on the TEXTBOX_DEFAULT_PLATFORM_HEIGHT or TEXTBOX_FONT_METRICS_DRIVEN_HEIGHT or TEXTBOX_CUSTOM_HEIGHT.\n@property {Number}\n@Available All Platforms except Server side Mobile Web\n@access Read and Write",
                        "!type": "number"
                    },
                    "containerHeightReference": {
                        "!doc": "Specifies the reference of the height of the container based on option that you set for containerHeight.\n@property {Number}\n@Available All Platforms except Server side Mobile Web platform\n@access Read and Write",
                        "!type": "number"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget widget. The parent widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "contentAlignment": {
                        "!doc": "Specifies the alignment of the text for a TextBox with respect to its boundaries.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "createAnimation": {
                        "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                        "!type": "fn(animationDef: ?)"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "enableHapticFeedback": {
                        "!doc": "This property allows you to enable or disable haptic feedback.\n@property {Boolean}\n@Available iOS and Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "filterList": {
                        "!doc": "The values you enter in the TextBox are matched against this list and possible matches are displayed.\n@property {Array}\n@Available BlackBerry,Android,Windows Mobile\n@access write",
                        "!type": "[?]"
                    },
                    "focusSkin": {
                        "!doc": "This is a skin property and it determines the look and feel of the widget when in focus .\n@property {String}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "string"
                    },
                    "getBadge": {
                        "!doc": " This method enables you to read the badge value (if any) attached to the given widget.\n @returns {String}   Reference to the gesture is returned.\n @Available iPhone,iPad\n @access Write\n @usage <pre>\n//To get a badge value on a box with ID hbx1 placed on a form frm1, use the following code:<br/>\nvar badgeVal =frm1.hbx1.getBadge();<br/>\nalert(\"badge value is::\"+badgeVal);</pre>",
                        "!type": "fn() -> string"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "hoverSkin": {
                        "!doc": "Specifies the look and feel of a widget when the cursor hovers on the widget.\n@property {String}\n@Available windows 8,Desktop Web\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "imageForSearchBarBackground": {
                        "!doc": "Sets an image as the background for the TextBox widget in Search View.\n@property {String}\n@Available iOS\n@access Read and Write",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isVisible": {
                        "!doc": "Specifies the visibility of the widget.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "keyBoardStyle": {
                        "!doc": "When you interact with a TextBox widget, a keyboard is displayed You can use this property to select the type of keyboard that you want to display.\n@property {Number}\n@Available All Platforms except on all Mobile Web (basic), Mobile Web (BJS) and it is device specific on Mobile Web (Advanced) platform.\n@access Read and Write",
                        "!type": "number"
                    },
                    "keyboardActionLabel": {
                        "!doc": "Specifies if the text to be displayed in action key of the keyboard.\n@property {Number}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "number"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "layoutType": {
                        "!doc": "Specifies if the arrangement of the widgets either in free form or horizontal or vertical direction (kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, or kony.flex.FLOW_VERTICAL).\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxTextLength": {
                        "!doc": "Specifies the maximum number of characters that the text field can accept.\n@property {Number}\n@Available All Platforms except Mobile Web(basic)\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "nativeListFieldFocusSkin": {
                        "!doc": "Specifies the skin that is applied to a focused item in the native popup (the list of items are displayed and a pop up appears just below the textfield) that appears when you enter a value in the TextBox.\n@property {String}\n@Available BlackBerry\n@access Read and Write",
                        "!type": "string"
                    },
                    "nativeListFieldSkin": {
                        "!doc": "Specifies the skin that is applied to each item in the native popup (the list of items are displayed and a pop up appears just below the text field) that appears when you enter a value in the TextBox.\n@property {String}\n@Available BlackBerry\n@access Read and Write",
                        "!type": "string"
                    },
                    "onBeginEditing": {
                        "!doc": "This is an event callback that is invoked by the platform when the user clicks within the TextBox and is about to start editing.\n@property {Event}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onCancel": {
                        "!doc": "This event is a callback that is invoked by the platform when the user performs a click action on the cancel button. This event is triggered only when the viewType is set as TEXTBOX_VIEW_TYPE_SEARCH_VIEW.\n@property {Event}\n@Available iOS platform only\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onDone": {
                        "!doc": "This event is a callback that is invoked by the platform then the user performs a click action on the Go or Enter button.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onEndEditing": {
                        "!doc": "This is an event callback that is invoked by the platform when the user performs one of the actions.\n@property {Event}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onKeyDown": {
                        "!doc": "This is an event that is invoked when the key is pressed down.\n@property {Event}\n@Available Desktop Web\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onKeyUp": {
                        "!doc": "This is an event that is invoked when the key is up.\n@property {Event}\n@Available Desktop Web\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onTextChange": {
                        "!doc": "This is an event callback triggered when text in the text box changes and This event is not fired when the text is changed programmatically.\n@property {Event}\n@Available All Platforms except Mobile Web(basic/BJS) and J2ME.\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchEnd": {
                        "!doc": "An event callback is invoked by the platform when the user touch is released from the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchMove": {
                        "!doc": "An event callback is invoked by the platform when the touch moves on the touch surface continuously until the movement ends. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchStart": {
                        "!doc": "An event callback is invoked by the platform when the user touches the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "padding": {
                        "!doc": "Specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "pasteboardType": {
                        "!doc": "This property enables an application to share data within the application or with another application using system-wide or application-specific pasteboards.\n@property {Number}\n@Available iPhone,iPad\n@access Read and Write",
                        "!type": "number"
                    },
                    "placeholder": {
                        "!doc": "The placeholder attribute specifies a short hint that describes the expected value of an input field (example, a sample value or a short description of the expected format).\n@property {String}\n@Available All Platforms except Mango and Mobile Web (basic/BJS)\n@access Read and Write",
                        "!type": "string"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "restrictCharactersSet": {
                        "!doc": "Specifies the restricted character set that app developer can impose on soft keyboard entry into the TextBox widget.\n@property {String}\n@Available iOS, Android and SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "setBadge": {
                        "!doc": " This method enables you to set the badge value to the given widget at the upper, right corner of the widget.\n @param badgeText{String} Specifies the Text value that appears within the badge.<b>Mandatory</b>\n @param skin{String}Specifies the background color for the badge.\n @Available iPhone,iPad\n @access Write\n @usage <pre>\n//To set a badge value with skin \"badgeSkin\" on a box with ID hbx1 placed on a form frm1, use the following code:<br/>\nfrm1.hbx1.setBadge(\"2\",\"badgeSkin\");</pre>",
                        "!type": "fn(badgeText: ?, skin: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "shadowDepth": {
                        "!doc": "     Defines the depth of the shadow effect applied to the Widget.\n     @property {Number}\n\t @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the shadowDepth property<br/>\n\t form1.TxtB1.shadowDepth = 10;</pre>",
                        "!type": "number"
                    },
                    "shadowType": {
                        "!doc": "     Sets a type of the shadow effect to apply to the Widget.\n     @property {Number}\n\t @Available Android 5.0 and later versions.\n     @access Read and Write\n\t @usage <pre>\n\t //Setting the shadowType property<br/>\n\t form1.TxtB1.shadowType = constants.VIEW_BOUNDS_SHADOW;</pre>",
                        "!type": "number"
                    },
                    "skin": {
                        "!doc": "Specifies the look and feel of the widget when not in focus.\n@property {String}\n@Available All Platfroms\n@access Read and Write",
                        "!type": "string"
                    },
                    "text": {
                        "!doc": "Specifies a general or descriptive text for the TextBox widget.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "textInputMode": {
                        "!doc": "Specifies the type of input characters that a user can enter into the TextBox widget.\n@property {Number}\n@Available All Platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "viewType": {
                        "!doc": "Specifies the appearance of the Textbox as Search view or a textbox to accept text input.\n@property {Number}\n@Available iPhone,iPad,Mobile Web (Advanced),Andriod\n@access Read and Write",
                        "!type": "number"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "UserWidgetInstance": {
                "!doc": "Creates a new UserWidgetInstance object.\n@class kony.ui.UserWidgetInstance\n@returns {kony.ui.UserWidgetInstance}",
                "!type": "fn() -> +kony.ui.UserWidgetInstance",
                "prototype": {
                    "addGestureRecognizer": {
                        "!doc": "This API allows you to set a gesture recognizer for a specified gesture for a specified widget.\n    @param gestureType {Number}Indicates the type of gesture  to be detected on the widget. The following are possible values:\n1 – conatants.GESTURE_TYPE_TAP\n2 -  conatants.GESTURE_TYPE_SWIPE\n3 – conatants.GESTURE_TYPE_LONGPRESS\n4 – conatants.GESTURE_TYPE_PAN\n5 – conatants.GESTURE_TYPE_ROTATION\n6 - conatants.GESTURE_TYPE_PINCH\n7 - conatants.GESTURE_TYPE_RIGHTTAP\n\n\nNote: RIGHTTAP is applicable only to Windows 8.1 and Windows Desktop/Kiosk platforms.\nROTATION is not supported on Android. <b>Mandatory</b>\n    @param gestureConfigParams {object}Specifies a table that has the configuration parameters needed to setup a gesture recognizer. The configuration parameters vary based on the type of the gesture.\n\n\nThis parameter has the following key-value pairs:\nGesture Type:TAP\n\nfingers [Number] - specifies the maximum number of fingers that must be respected for a gesture. Possible values are: 1. Default value is 1.\ntaps [Number] - specifies the maximum number of taps that must be respected for a gesture. Possible values are: 1 or 2. Default value is 1.\n\n\n\n\nFor example,{fingers:1,taps:1}\n\n\nGesture Type:SWIPE\n\nfingers [Number] - specifies the maximum number of fingers that must be respected for a gesture. Possible values are: 1. Default value is 1.\n\nFor example, {fingers: 1}.\n\n\nGesture Type :LONGPRESS\n\npressDuration [Number] - specifies the minimum time interval (in seconds) after which the gesture is recognized as a LONGPRESS. This is not applicable to Windows. For example, if the pressDuration is 2 seconds, any continued press is recognized as LONGPRESS only if it lasts for at least 2 seconds. Default value is 1.\nFor example, {pressDuration=1}.\nLONGPRESS event is not supported in SPA (Windows Phone) platform.\n\n\n\nGesture Type :PAN\nfingers [number]  specifies the minimum number of fingers needed to recognize this gesture. Default value is 1.\ncontinuousEvents [Boolean]  indicates if callback should be called continuously for every change beginning from the time the gesture is recognized to the time it ends.\n\nGesture Type :ROTATION\nRotation gesture involves only two fingers.\ncontinuousEvents [Boolean]  indicates if callback must be called continuously for every change beginning from the time the gesture is recognized to the time it ends.\n\nGesture Type :PINCH\nPinch gesture invloves two fingures.\ncontinuousEvents [Boolean]  indicates if callback should be called continuously every change beginning from the time the gesture is recognized to the time it ends. <b>Mandatory</b>\n    @param onGestureClosure {function}Specifies the function that needs to be executed when a gesture is recognized. This function will be raised asynchronously and has the following signature:\nonGestureClosure(widgetRef, gestureInfo, context)\nwidgetRef - specifies the handle to the widget on which the gesture was recognized.\ngestureInfo - Table with  information about the gesture. The contents of this table vary based on the gesture type.\ncontext - Table with SegmentedUI row details.\n\ngestureInfo table has the following key-value pairs:\ngestureType [number] – indicates the gesture type; 1 for TAP, 2 for SWIPE, and 3 for LONGPRESS,4 for PAN, 5 for ROTATION, 6 for PINCH and 7 for RIGHTTAP\ngesturesetUpParams [object] – specifies the set up parameters passed while adding the gesture recognizer\ngesturePosition [number] – indicates the position where the gesture was recognized. Possible values are: 1 for TOPLEFT, 2 for TOPCENTER, 3 for TOPRIGHT, 4 for MIDDLELEFT, 5 for MIDDLECENTER, 6 for MIDDLERIGHT, 7 for BOTTOMLEFT, 8 for BOTTOMCENTER, 9 for BOTTOMRIGHT, 10 for CENTER\nswipeDirection [number] –indicates the direction of swipe. This parameter is applicable only if the gesture type is SWIPE. Possible values are: 1 for LEFT, 2 for RIGHT, 3 for TOP, 4 for BOTTOM. Direction is w.r.t the view and not device orientation.\ngestureX [number] – specifies the X coordinate of the point (in pixels) where the gesture has occurred. The coordinate is relative to the widget coordinate system.\ngestureY [number] – specifies the Y coordinate of the point (in pixels) where the gesture has occurred. The coordinate is relative to the widget coordinate system.\nwidgetWidth [number] – specifies the width of the widget (in pixels)\nwidgetHeight [number] – specifies the height of the widget (in pixels)\ngestureState[number] – indicates the gesture state as below\n1 – gesture state begin\n2 -  gesture state changed\n3 – gesture state ended.\ngestureState is applicable only for continuous gestures like PAN, ROTATION and PINCH.\n  rotation   [number] rotation of the gesture in degrees since its last change.( Applicable only when gesture type is ROTATION\nvelocityX and velocityY : horizontal  and vertical component of velocity expressed in points per second. (Applicable only for PAN gesture type)\nvelocity [number]: velocity of pinch in scale per second (Applicable for Pinch gesture)\nscale [number]:scale factor relative to the points of the two touches in screen coordinates\ntouchType[number]:(windows only)\n0 - constants.TOUCHTYPE_FINGER\n1 - constants.TOUCHTYPE_PEN\n2 - constants.TOUCHTYPE_MOUSE\ntranslationX and translationY [number] : cumulative distance as number. (Applicable only for PAN gesture type)\n\ncontext table has the following key-value pairs:\nrowIndex [number] : row index of the segui where gesture was recognised. (Applicable to gestures added to segUI rows)\nsectionIndex [number] : section index of the segui where gesture was recognised. (Applicable to gestures added to segUI rows)<b>Mandatory</b>\n    @Available Available on all platforms except Server Side Mobile Web, BlackBerry 10, Windows 7/Kiosk, and Desktop Web.\n    @access Write\n    @usage  <pre>It is not recommend to define gestures for widgets that have a default behaviour associated with it.\nScenario 1\nIf you click (tap) a button (any clickable widget), the default behaviour is to trigger an onClick event.\nIf you define a Tap gesture on such widgets, the gesture closure is executed in addition to the onClick event.\nScenario 2\nIf you swipe a larger form, the default behaviour is to scroll up and down depending on the direction in which you swipe.\nIf you define a SWIPE gesture on such forms, the gesture closure gets executed in addition to scrolling the form.\n\nScenario 3\nIf you swipe a Segmented UI with huge number of rows, the default behaviour is to scroll the Segmented UI.\nIf you define a SWIPE gesture on such segments, the gesture closure gets executed in addition to scrolling the form.\n\nRules and Restrictions\nGestures can be added only for the following widgets:\nForm\nHBox\nVBox\nScrollable Box\nFlex Container\nFlex Scroll Container. </pre>",
                        "!type": "fn(gestureType: ?, gestureConfigParams: ?, onGestureClosure: ?)"
                    },
                    "addWidgets": {
                        "!doc": "An event callback invoked by the platform when show method of popup is called for first time after its construction.\n@property {Event}\n@Available All Platforms\n@access  Write",
                        "!type": "fn()"
                    },
                    "anchorPoint": {
                        "!doc": "Specifies the anchor point of the widget bounds rectangle using the widgets coordinate space.\n@property {Object}\n@Available iOS, Android, Windows, SPA\n@access Read and Write"
                    },
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "backgroundColor": {
                        "!doc": "Specifies the background color of the widget in hex format.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "focusSkin": {
                        "!doc": "This is a skin property and it determines the look and feel of the widget when in focus.\n@property {String}\n@Available All Platforms except on all Mobile Web platforms.\n@access Read and Write",
                        "!type": "string"
                    },
                    "frame": {
                        "!doc": "This property reflects the changes in position and dimensions of widget due to changes in widget layout properties. The widget layout properties are always retained when they are set but never reflect in final layout calculations. This property reflects the calculated values. A frame is a JSObject with the keys (x, y, width, and height) measured in system units.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available iOS, Android, Windows, SPA platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write"
                    },
                    "init": {
                        "!doc": "This event gets called only once in form life cycle that is when the form is ready with its widget hierarchy.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "isVisible": {
                        "!doc": "This property controls the visibility of a widget on the UserWidgetInstance.\n@property {Boolean}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "onTouchEnd": {
                        "!doc": "An event callback is invoked by the platform when the user touch is released from the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchMove": {
                        "!doc": "An event callback is invoked by the platform when the touch moves on the touch surface continuously until the movement ends. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchStart": {
                        "!doc": "An event callback is invoked by the platform when the user touches the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "removeGestureRecognizer": {
                        "!doc": " This method allows you to remove a specified gesture recognizer for a specified widget.\n @param uniqueIdentifier{Widgetref} Indicates the type of gesture added to the form.<b>Mandatory</b>\n @Available iPhone,iPad,Android,BlackBerry,Windows phone,SPA\n @access Write\n @usage <pre>\n//The below function will get invoked when a gesture is recognized.<br/>\nfunction myTap(myWidget,gestureInfo)<br/>\n{\nalert(\" Tap Gesture detected\");\nalert(\"gestureType :\"+gestureInfo.gestureType);\nalert(\"gesturePosition :\"+gestureInfo.gesturePosition);\n//write any further logic here\n}<br/>\n\n//Setting Gesture configuration.<br/>\nlocal setupTblTap = {fingers:1,taps:2};//double tap gesture<br/>\n\n//To add a TAP gesture recognizer on a hbox with ID hbx1 placed on a form frm1<br/>\nvar tapGesture=frm1.hbx1.setGestureRecognizer(1,setupTblTap,myTap)<br/>\n\n//To remove the TAP gesture recognizer on a hbox with ID hbx1 placed on a form frm1<br/>\nfrm1.hbx1.removeGestureRecognizer(tapGesture);</pre>",
                        "!type": "fn(uniqueIdentifier: ?)"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setGestureRecognizer": {
                        "!doc": "  This method allows you to set a gesture recognizer for a specified gesture for a specified widget.\n  @param gestureType{Number} Indicates the type of gesture that needs to be detected on the widget.<b>Mandatory</b>\n  @param setupParams {Array}Specifies an object that has the configuration parameters needed to setup a gesture recognizer.<b>Mandatory</b>\n  @param gestureHandler{Function} Specifies the function that needs to be executed when a gesture is recognized.<b>Mandatory</b>\n  @Available ios,Android,BlackBerry,Windows phone/Windows Kiosk,J2ME,SPA\n  @access Write\n  @usage <pre>\n //The below function will get invoked  when a gesture is recognized.\n function myTap(myWidget,gestureInfo)<br/>\n{\n alert(\" Tap Gesture detected\");\n alert(\"gestureType :\"+gestureInfo.gestureType);\n alert(\"gesturePosition :\"+gestureInfo.gesturePosition);\n //write any further logic here\n } <br/>\n\n //Setting Gesture configuration.<br/>\n local setupTblTap = {fingers:1,taps:2};//double tap gesture<br/>\n\n //To add a TAP gesture recognizer on a hbox with ID hbx1 placed on a form frm1<br/>\n var tapGesture=frm1.hbx1.setGgestureRecognizer(1,setupTblTap,myTap);</pre>",
                        "!type": "fn(gestureType: ?, setupParams: ?, gestureHandler: ?)"
                    },
                    "setVisibility": {
                        "!doc": "Specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "skin": {
                        "!doc": "Specifies a background skin for UserWidgetInstance.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "toolTip": {
                        "!doc": "Specifies the hint text when the cursor hovers over a widget.\n@property {String}\n@Available windows 8,Desktop Web\n@access Read and Write",
                        "!type": "string"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "Video": {
                "!doc": "Creates a new Video object.\n@class kony.ui.Video\n@returns {kony.ui.Video}",
                "!type": "fn(basicProperties: ?, layoutProperties: ?, platformSpecificProperties: ?) -> +kony.ui.Video",
                "prototype": {
                    "accessibilityConfig": {
                        "!doc": "Specifies the accessibility configuration property for the widget.\n@property {Object}\n@Available iPhone, Android, SPA-iPhone, and SPA-Android Platforms\n@access Read and Write\n@usage <pre>\n   accessibilityConfig =  {\n       \"a11yHidden\": false,\n       \"a11yValue\": \"Your text goes here\",\n       \"a11yLabel\": \"Your text goes here\",\n       \"a11yHint\": \"Your text goes here\"\n   }</pre>"
                    },
                    "animate": {
                        "!doc": "This method applies the animation to the widget immediately, if the widget is part of the currently visible view hierarchy. If widget is not part of the currently visible view hierarchy then this API invocation is ignored. This method is asynchronous and immediately returns and do not wait for the animation to start or complete.\n@param animationObj {Object} An object defined using kony.ui.createAnimation() API.<b>Mandatory</b>.\n@param animationConfig {Object} An object that contains duration, iterationCount, direction, delay and fillMode.<b>Optional</b>\n@param animationCallbacks {Object} An object that represents animationStart and animationEnd callbacks.<b>Optional</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(animationObj: ?, animationConfig: ?, animationCallbacks: ?)"
                    },
                    "bottom": {
                        "!doc": "It determines the bottom edge of the widget and measured from the bottom bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerX": {
                        "!doc": "It determines the center of widget measured from left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "centerY": {
                        "!doc": "It determines the center of the widget measured from top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "containerWeight": {
                        "!doc": "Specifies percentage of width to be allocated by its parent widget widget. The parent widget space is distributed to its child widgets based on this weight factor. All its child widgets should sum up to 100% of weight except when placed in kony.ui.ScrollBox.\n@property {Number}\n@Available All Platforms except Win Mobile 6x.\n@access Read and Write",
                        "!type": "number"
                    },
                    "controls": {
                        "!doc": "Specifies if the default video controls need to be displayed.\n@property {Boolean}\n@Available iOS, Android, SPA\n@access Read only",
                        "!type": "bool"
                    },
                    "convertPointFromWidget": {
                        "!doc": "This method allows you to convert the point from fromWidget co-ordinate system to co-ordinate system of the receiver.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param fromWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted to the receivers co-ordinate system.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "convertPointToWidget": {
                        "!doc": "This method allows you to convert the point from receivers co-ordinate system to co-ordinate system of toWidget.\n@param point {Object} An object with possible keys as x, y and the values can be specified in all possible units (dp, px and %) of measurement.<b>Mandatory</b>\n@param toWidget {widgetref} Handle to the widget instance to whose co-ordinate system given point to be converted.<b>Mandatory</b>\n@Available iOS, Android, Windows, SPA platforms\n@access Write",
                        "!type": "fn(point: ?, toWidget: ?)"
                    },
                    "createAnimation": {
                        "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                        "!type": "fn(animationDef: ?)"
                    },
                    "doLayout": {
                        "!doc": "Specifies a JavaScript synchronous callback function that gets invoked for each widget once the widget and its parent's position and dimensions are set.\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "enableCache": {
                        "!doc": "This property enables you to improve the performance of Positional Dimension Animations.\n@property {Boolean}\n@Available only on Windows\n@access Read and Write",
                        "!type": "bool"
                    },
                    "getBufferPercentage": {
                        "!doc": "Returns the percentage of the video loaded.\n@returns {Number}\n@Available iOS, Android",
                        "!type": "fn() -> number"
                    },
                    "getCurrentPosition": {
                        "!doc": "Returns the time(in milliseconds) of the current video playing position.\n@returns {Number}\n@Available iOS, Android",
                        "!type": "fn() -> number"
                    },
                    "getDuration": {
                        "!doc": "Returns the overall duration (time in milliseconds) of the current video playing.\n@returns {Number}\n@Available iOS, Android",
                        "!type": "fn() -> number"
                    },
                    "height": {
                        "!doc": "It determines the height in %, px, dp, or preferred height of the widget and measured along the y-axis.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "id": {
                        "!doc": "Defines a string of alpha numeric characters that uniquely identifies a widget within an application.\n@property {String}\n@Mandatory Yes\n@Available All Platforms\n@access Read",
                        "!type": "string"
                    },
                    "info": {
                        "!doc": "Specifies custom JS Object with the key,value pairs that a developer can use to store the context with the widget.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "isPlaying": {
                        "!doc": "This method tells if the video is playing or paused.\n@returns {boolean}\n@Available iOS, Android",
                        "!type": "fn() -> bool"
                    },
                    "isVisible": {
                        "!doc": "Specifies the visibility of the widget on the form.\n@property {Boolean}\n@Available All Platforms\n@access Read and Write",
                        "!type": "bool"
                    },
                    "layoutAnimConfig": {
                        "!doc": "Specifies the layout changes that occur due to the animations applied/removed on other widgets.\n@property {Object}\n@Available iOS and Android Platforms\n@access Read and Write"
                    },
                    "layoutType": {
                        "!doc": "Specifies if the arrangement of the widgets either in free form or horizontal or vertical direction (kony.flex.FREE_FORM, kony.flex.FLOW_HORIZONTAL, or kony.flex.FLOW_VERTICAL).\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "left": {
                        "!doc": "It determines the lower left corner edge of the widget and measured from the left bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "margin": {
                        "!doc": "Specifies the space around a widget.\n@property {Array}\n@Available All Platforms except Mobile Web (basic) and Win Mobile6x.\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "maxHeight": {
                        "!doc": "Specifies the maximum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "maxWidth": {
                        "!doc": "Specifies the maximum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minHeight": {
                        "!doc": "Specifies the minimum height of the widget. This property is considered only when height property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "minWidth": {
                        "!doc": "Specifies the minimum width of the widget. This property is considered only when width property is not specified.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "onCompletion": {
                        "!doc": "Callback which gets invoked when playback is completed.",
                        "!type": "fn()"
                    },
                    "onError": {
                        "!doc": "Callback which gets invoked when there occurs an error in setup or playback.",
                        "!type": "fn()"
                    },
                    "onPrepared": {
                        "!doc": "Callback which gets invoked when the media file is loaded and ready to go.",
                        "!type": "fn()"
                    },
                    "onScrollWidgetPosition": {
                        "!doc": "This event callback is invoked by the platform when the widget location is changed on scrolling. This event is invoked asynchronously.\n@Available Android, IOS, Windows, SPA plaforms\n@access Write",
                        "!type": "fn()"
                    },
                    "onTouchEnd": {
                        "!doc": "An event callback is invoked by the platform when the user touch is released from the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchMove": {
                        "!doc": "An event callback is invoked by the platform when the touch moves on the touch surface continuously until the movement ends. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "onTouchStart": {
                        "!doc": "An event callback is invoked by the platform when the user touches the touch surface. This event is invoked asynchronously.\n@param source{widgetreg} Handle to the widget reference on which the scrolling is in progress.<b>Optional</b>\n@param x{Number} Specifies the X co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@param y{Number} Specifies the Y co-ordinate with in the widget with respect to widget's co-ordinate system. It is a number indicating device independent pixel.<b>Optional</b>\n@property {Event}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "opacity": {
                        "!doc": "Specifies the opacity of the widget. The value of this property must be in the range 0.0 (transparent) to 1.0 (opaque). Any values outside this range are fixed to the nearest minimum or maximum value.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "padding": {
                        "!doc": "Specifies the space between the content of the widget and the widget boundaries.\n@property {Array}\n@Available All Platforms except Mobile Web (basic).\n@access Read and Write",
                        "!type": "[?]"
                    },
                    "parent": {
                        "!doc": "Gives the ability to access the parent of the widget. If the widget is still not added part of the widget hierarchy then this property returns null.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "pause": {
                        "!doc": "This method is used to pause the video playing.\n@Available iOS, Android",
                        "!type": "fn()"
                    },
                    "play": {
                        "!doc": "This method is used to play the video.\n@Available iOS, Android",
                        "!type": "fn()"
                    },
                    "poster": {
                        "!doc": "You can specify an image which is to be displayed as a poster or as a starting image for the video.\nThe image location must point to an external URL or the local image name from resource.\nFor example, www.kony.com/sites/all/themes/kony/logo.png\n@property {String}\n@Available iOS, Android, SPA\n@access Read only",
                        "!type": "string"
                    },
                    "registerForPeekAndPop": {
                        "!doc": "Registers a widget to enable 3d touch peek and pop gesture.\n@param {Function} onPeekCallback - callback, Called when user slightly presses(soft press) the widget. It gets widget, contextInfo as params and shall return preview info table.\n@param {Function} onPopCallback - callback, Called when user further presses(hard press) the preview that is displayed for the widget. It gets widget, peekForm as params. This is the place where you need to set content for pop. The form handle returned by this callback is used for pop content. In general, the form that is used for preview has to be used for pop content also. If pop callback is not implement, peek disappears and the app will be taken to its previous state.\n @usage <pre>\n   function onPeekCallback(widget, contextInfo) {\n     var previewInfoTable = {\n       \"peekForm\": frmSecond,\n       \"focusRect\": [0,0,200,200],\n       \"contentSize\": [320, 480]\n     }\n     return previewInfoTable;\n   }\n </pre>",
                        "!type": "fn(onPeekCallback: ?, onPopCallback: ?)"
                    },
                    "removeFromParent": {
                        "!doc": "This method allows you to remove the widget from the parent if it is part of the widget hierarchy..\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "fn()"
                    },
                    "resume": {
                        "!doc": "This method is used to resume the paused video playing.\n@Available iOS, Android",
                        "!type": "fn()"
                    },
                    "right": {
                        "!doc": "It determines the lower right corner of the widget and measured from the right bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "seekTo": {
                        "!doc": "This method is used to move playing to specific time.\n@param time {Number}\n@Available iOS, Android",
                        "!type": "fn(time: ?)"
                    },
                    "setEnabled": {
                        "!doc": "This method specifies the widget that must be enabled or disabled.\n@param enabled{Boolean} Indicates widget whether true or false.<b>Mandatory</b>\n@Available All Platforms except on Map widget for SPA platform\n@access Write",
                        "!type": "fn(enabled: ?)"
                    },
                    "setFocus": {
                        "!doc": "This method specifies the widget on which there must be focus.\n@param focus{Boolean} Indicates focus is set on a widget.<b>Mandatory</b>\n@Available All Platforms\n@access Write",
                        "!type": "fn(focus: ?)"
                    },
                    "setOnPeek": {
                        "!doc": "Sets and overrides the existing onPeekCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPeekCallback - Callback",
                        "!type": "fn(onPeekCallback: ?)"
                    },
                    "setOnPop": {
                        "!doc": "Sets and overrides the existing onPopCallback for the widget. Description same as for ‘registerForPeekAndPop’ API.\n@param {Function} onPopCallback - Callback",
                        "!type": "fn(onPopCallback: ?)"
                    },
                    "setSource": {
                        "!doc": "This method allow to set/modify the video source.\n@param source {Object} - JSObject with mp4 path\n@Available iOS, Android",
                        "!type": "fn(source: ?)"
                    },
                    "setVisibility": {
                        "!doc": "specifies the method to set the visibility of the widget.\n@param visible{Boolean} Indicates visibility on a widget.<b>Mandatory</b>\n@Available All Platforms except on all Mobile Web platforms\n@access Write",
                        "!type": "fn(visible: ?)"
                    },
                    "skin": {
                        "!doc": "Specifies the look and feel of the video when not in focus.\n@property {String}\n@Available All Platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "source": {
                        "!doc": "Specifies the URLs of the video which are to be streamed.\n@property {Object}\n@Available All Platforms\n@access Read and Write"
                    },
                    "start": {
                        "!doc": "This method is used to start the video playing.\n@Available iOS, Android",
                        "!type": "fn()"
                    },
                    "stop": {
                        "!doc": "This method is used to stop the video playing.\n@Available iOS, Android",
                        "!type": "fn()"
                    },
                    "text": {
                        "!doc": "Specifies a general or descriptive text for the video widget.\n@property {String}\n@Available iOS, Android, SPA\n@access Read and Write",
                        "!type": "string"
                    },
                    "top": {
                        "!doc": "It determines the top edge of the widget and measured from the top bounds of the parent container.\n@property {String}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "string"
                    },
                    "transform": {
                        "!doc": "This property is set to the identity transform by default. Any transformations you apply to the widget occur relative to the widget anchor point.\n@property {Object}\n@Available iOS, Android, Windows, SPA platforms\n@access Read Only"
                    },
                    "unregisterForPeekAndPop": {
                        "!doc": "Unregisters a widget from 3d touch peek and pop gesture.",
                        "!type": "fn()"
                    },
                    "volume": {
                        "!doc": "Specifies the current volume of the audio/video. Must be a number between 0.0 and 1.0\n@property {String}\n@Available iOS, Android, SPA\n@access Read only",
                        "!type": "string"
                    },
                    "width": {
                        "!doc": "It determines the width of the widget in %, px, or dp measured along the x-axis or or the option kony.flex.USEPREFERED_SIZE.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    },
                    "zIndex": {
                        "!doc": "Specifies the stack order of the widgets. A widget with higher zIndex is always in front of a widget with lower zIndex.\n@property {Number}\n@Available iOS, Android, Windows, SPA platforms\n@access Read and Write",
                        "!type": "number"
                    }
                }
            },
            "alertHandler": {
                "!doc": "JS function that should get called when alert is dismissed either through “yes” label button or through “no” label button.\n@property {Event}\n@Available All Platforms\n@access Read and Write",
                "!type": "fn()"
            },
            "createAnimation": {
                "!doc": "This method creates an animation object that can be used to animate the widgets using animate API.\n @param animationDef {Number} Animation Definition.<b>Mandatory</b>.\n @Available iOS, Android, Windows, SPA platforms\n @access Write",
                "!type": "fn(animationDef: ?)"
            },
            "makeAffineTransform": "fn() -> kony.ui.makeAffineTransform.!ret"
        },
        "worker": {
            "!doc": "WorkerThread APIs",
            "WorkerThread": {
                "!doc": "The WorkerThread () constructor creates a new worker thread and returns a handle to the new worker thread, which can be used by the Parent thread for any further communication with the worker thread.\n@param workerjs{string}workerjs can be the name of javascript file name or functional module name which contains worker thread code.<b>Mandatory</b>\n@Available All Platforms\n@access Write\n@usage  <pre>try {\n\nvar worker = new kony.worker.WorkerThread(“worker1.js”);\n\n} catch (e) {\n\nvar err = kony.getError(e);\n\nif (err instanceof KonyError) {\n\nkony.print(\"KonyError Catch : \" + JSON.stringify(err));\n\n}\n\n}</pre>",
                "!type": "fn(workerjs: ?)"
            },
            "addEventListener": {
                "!doc": "EventHandlers can be registered using addEventListener() method on the worker Objects and once registered messages and errors from a worker thread can be received in parent thread.\n    @param key{}message: When message event handler is being registered.error: When error event handler is being registered.<b>Mandatory</b>\n    @param listener{}The listener parameter indicates the event listener function to be added.<b>Mandatory</b>\n    @Available Available only on iOS.\n    @access Write\n    @usage  <pre>\n    “message” event handler :\n\n\n//Parent Scope\nvar worker = new kony.worker.WorkerThread(“worker1.js”);\n\n    var evtMessageHandler_1 = function (event) {\n            kony.print (\"Parent Scope : In message handler 1\");\n};\n\n    var evtMessageHandler_2 = function (event) {\n            kony.print (\"Parent Scope : In message handler 2\");\n};\n\nworker.addEventListener(“message”, evtMessageHandler_1);\nworker.addEventListener(“message”, evtMessageHandler_2);\n\n\n\n//Worker Scope\n    var evtMessageHandler_1 = function (event) {\n            kony.print (\"Worker Scope : In message handler 1\");\n};\n\nself.addEventListener(“message”, evtMessageHandler_1);\n//or\nthis.addEventListener(“message”, evtMessageHandler_1);\n//or\naddEventListener(“message”, evtMessageHandler_1);\n</pre>",
                "!type": "fn(key: ?, listener: ?)"
            },
            "hasWorkerThreadSupport": {
                "!doc": "hasWorkerThreadSupport() API can be used during runtime in Parent scope to determine whether the current platform environment has worker thread support.\nThis API is only available in Parent thread scope and not available in Worker thread scope. This API is most useful in case of SPA and Desktop Web platforms where runtime query can be made to determine whether a browser environment supports Worker Threads or not.\n@Available Available for iOS, Android, Windows, SPA, and Desktop Web\n@access Write\n@usage  <pre>var hasWorkerSupport = kony.worker.hasWorkerThreadSupport();\n\nif(hasWorkerSupport) {\n\nvar worker = new kony.worker.WorkerThread(“worker1.js”);\n\n//do something\n\n} else {\n\n//workers not supported\n\n}</pre>",
                "!type": "fn()"
            },
            "postMessage": {
                "!doc": "postMessage() can be used to send a JSON object message or String message from Worker/Parent to Parent/Worker's scope by invoking respective registered “message” event handlers.\n    @param Parameter1{Object}String or JSON Object<b>Mandatory</b>\n    @Available Available only on iOS.\n    @access Write\n    @usage  <pre>\n    var worker = new kony.worker.WorkerThread(“worker1.js”);\n\n// Parent scope:\n//JSON Object\n            worker.postMessage({‘msg’ : ‘hello’});\n\n//String\n            worker.postMessage(‘message hello’);\n\n// Worker scope:\n\n//JSON Object\n            postMessage({‘msg’ : ‘hello’});\n//or\n            this.postMessage({‘msg’ : ‘hello’});\n//or\n            self.postMessage({‘msg’ : ‘hello’});\n\n\n//String\n            postMessage(‘message hello’);\n//or\n            this.postMessage(‘message hello’);\n//or\n            self.postMessage(‘message hello’); </pre>",
                "!type": "fn(Parameter1: ?)"
            },
            "removeEventListener": {
                "!doc": "removeEventListener() can be used to remove the previously registered “message” event listener or “error” event listener which was registered using addEventListener().\n\nThis function can be used in both Parent and worker scope\n    @param key or listener{}key\nmessage:When message event handler being registered.\nerror: When error event handler being registered.\nlistener\nThe listener parameter indicates the event listener function to be added.\n<b>Mandatory</b>\n    @Available Available only on iOS.\n    @access Write\n    @usage  <pre>\n    “message” event handler :\n\n//Parent Scope\nvar worker = new kony.worker.WorkerThread(“worker1.js”);\n\n    var evtMessageHandler_1 = function (event) {\n            kony.print (\"Parent Scope : In message handler 1\");\n};\n\n    var evtMessageHandler_2 = function (event) {\n            kony.print (\"Parent Scope : In message handler 2\");\n};\n\n//adding event listeners\nworker.addEventListener(“message”, evtMessageHandler_1);\nworker.addEventListener(“message”, evtMessageHandler_2);\n\n//removing event listener\nworker.removeEventListener(“message”, evtMessageHandler_2);\n\n\n//Worker Scope\n    var evtMessageHandler_1 = function (event) {\n            kony.print (\"Worker Scope : In message handler 1\");\n};\n\n    var evtMessageHandler_2 = function (event) {\n            kony.print (\"Worker Scope : In message handler 2\");\n};\n\n//adding event listeners\nself.addEventListener(“message”, evtMessageHandler_1);\nself.addEventListener(“message”, evtMessageHandler_2);\n\n//removing event listener\nself.removeEventListener(“message”, evtMessageHandler_2);\n\n\n“error” event listener :\n\n//Parent Scope\nvar worker = new kony.worker.WorkerThread(“worker1.js”);\n\nvar evtErrorHandler_1 = function (event) {\n     kony.print(\"Parent Scope: In error handler 1\");\n};\n\nvar evtErrorHandler_2 = function (event) {\n     kony.print(\"Parent Scope: In error handler 2\");\n};\n\n//adding event listeners\nworker.addEventListener(\"error\", evtErrorHandler_1);\nworker.addEventListener(\"error\", evtErrorHandler_2);\n\n    //removing event listener\n    worker.removeEventListener(“error”, evtErrorHandler_2);\n\n\n//Worker Scope\nvar evtErrorHandler_1 = function (event) {\n     kony.print(\"Worker Scope: In error handler 1\");\n};\n\nvar evtErrorHandler_2 = function (event) {\n     kony.print(\"Worker Scope: In error handler 2\");\n};\n\n//adding event listeners\nself.addEventListener(\"error\", evtErrorHandler_1);\nself.addEventListener(\"error\", evtErrorHandler_2);\n\n    //removing event listener\n    self.removeEventListener(“error”, evtErrorHandler_2);\n\n</pre>",
                "!type": "fn()"
            },
            "terminate": {
                "!doc": "When called from parent scope immediately terminates the worker. This does not offer the worker an opportunity to finish its operations. It is simply stopped at once.\nThe tasks pending in the message queue and callbacks registered for network, timer APIs etc are discarded without wait until completion.\n    @Available Available only on iOS.\n    @access Write\n    @usage  <pre>\nvar worker = new kony.worker.WorkerThread(“worker1.js”);\n\n//post a message to the worker\nworker.postMessage(“Hello from Parent”);\n\n//terminate the worker\nworker.terminate();</pre>",
                "!type": "fn()"
            }
        }
    },
    "message": {
        "!doc": "Use this API to remove the previously registered “message” event listener,  which was registered using addEventListener().\nThis function can be used in both Parent and worker scope\n    @param event object (message, filename, lineno){}<b>Mandatory</b>\n    @Available Available only on iOS.\n    @access Write\n    @usage  <pre>function(event) {\n        kony.print ('ERROR: Line '+ event.lineno + ' in ' + event.filename + ': ' + event.message);\n  }\n</pre>",
        "!type": "fn()"
    },
    "objc": {
        "!doc": "This API allows you to create a new class in JavaScript. Using this API you can extend or implement any iOS native class or interface.\n @Available Applicable on iOS Platform\n @class objc\n @returns {objc}",
        "import": {
            "!doc": "This API allows you to import any iOS native class into JavaScript. You must use the keyword \"new\" to instantiate (create an object) an instance of a JavaScript class. All the APIs, methods, constants, and all members of the native class are directly accessible with the instantiated object.\n@param native_class_name {String} Specifies the native class name including the package name.<b>Mandatory</b>\n @returns Returns the class that is created.\n @Available Applicable on iOS Platform\n @usage\n    <pre>\n      var HKHealthStore = objc.import('HKHealthStore');\n    </pre>",
            "!type": "fn(native_class_name: ?)"
        },
        "newClass": {
            "!doc": "This API allows you to extend or implement any iOS native class, or interface.\n@param base_class_name {String} Specifies the new Javascript class name.\n@param native_class_name {String} Specifies the native class name including the package name.<b>Mandatory</b>\n@param Interface_name {Array} Specifies the interface name that is implemented by the new class.\n@param Interface_methods_to_override {Object} Specifies the interface methods that must be overridden or implemented by the new class.\n@returns Returns the class that is created.\n@Available Applicable on Android Platform\n@usage <pre>\n   var ViewController = objc.newClass('ViewController', 'UIViewController', ['PKPaymentAuthorizationViewControllerDelegate'], {\n    paymentAuthorizationViewControllerDidAuthorizePaymentCompletion: function(controller, payment, completion) {},\n\n    paymentAuthorizationViewControllerDidFinish: function(controller) {},\n\n    paymentAuthorizationViewControllerDidSelectShippingMethodCompletion: function(controller, shippingmethod, completion) {}\n\n    });\n   </pre>",
            "!type": "fn(base_class_name: ?, native_class_name: ?, Interface_name: ?, Interface_methods_to_override: ?)"
        }
    }
}